import data.set.intervals
import analysis.mewan_inequalities_pow

import for_mathlib.data.nnreal.basic
import for_mathlib.Profinite.extend
import pseudo_normed_group.category
import condensed.ab

.

open_locale big_operators nnreal

universe u
variables (p : ‚Ñù‚â•0) (S : Fintype.{u})

/-- The functor represented by ‚Ñ§, i.e., sending a finite type `S` to `S ‚Üí ‚Ñ§`,
  equipped with the "p-norm" sending `s ‚Ü¶ f(s)` to `‚àë‚Çõ‚à•f(s)‚à•‚Çä·µñ`. This is the
  construction defined as a bare function. -/
@[derive add_comm_group]
def normed_free_pfpng (p : ‚Ñù‚â•0) (S : Fintype.{u}) := S ‚Üí ‚Ñ§

noncomputable theory
open_locale classical

instance : has_nnnorm (normed_free_pfpng p S) :=
‚ü®Œª f, ‚àë s, ‚à•f s‚à•‚Çä ^ (p:‚Ñù)‚ü©

namespace normed_free_pfpng

protected lemma nnnorm_def (f : normed_free_pfpng p S) : ‚à•f‚à•‚Çä = ‚àë s, ‚à•f s‚à•‚Çä ^ (p:‚Ñù) := rfl

@[simp] lemma nnnorm_zero [fact (0 < p)] : ‚à•(0 : normed_free_pfpng p S)‚à•‚Çä = 0 :=
by { change ‚àë _, _ = _, simp only [pi.zero_apply, nnnorm_zero, finset.sum_const, nsmul_eq_mul, mul_eq_zero, nat.cast_eq_zero, finset.card_eq_zero,
  nnreal.rpow_eq_zero_iff, eq_self_iff_true, ne.def, nnreal.coe_eq_zero, true_and],
  right, have : 0 < p := fact.out _, exact this.ne' }

@[simp] lemma nnnorm_neg (f : normed_free_pfpng p S) : ‚à•(-f)‚à•‚Çä = ‚à•f‚à•‚Çä :=
by { change ‚àë _, _ = _, simpa }

lemma nnnorm_add [fact (0 < p)] [fact (p ‚â§ 1)]
  (f‚ÇÅ f‚ÇÇ : normed_free_pfpng p S) : ‚à•f‚ÇÅ + f‚ÇÇ‚à•‚Çä ‚â§ ‚à•f‚ÇÅ‚à•‚Çä + ‚à•f‚ÇÇ‚à•‚Çä :=
begin
  change ‚àë _, _ ‚â§ ‚àë _, _ + ‚àë _, _,
  rw ‚Üê finset.sum_add_distrib,
  apply finset.sum_le_sum,
  intros s _,
  have h0p : 0 < p := fact.out _,
  have hp1 : p ‚â§ 1 := fact.out _,
  calc ‚à•(f‚ÇÅ + f‚ÇÇ) s‚à•‚Çä ^ ‚Üëp
      ‚â§ (‚à•f‚ÇÅ s‚à•‚Çä + ‚à•f‚ÇÇ s‚à•‚Çä) ^ ‚Üëp : nnreal.rpow_le_rpow (nnnorm_add_le _ _) h0p.le
  ... ‚â§ ‚à•f‚ÇÅ s‚à•‚Çä ^ ‚Üëp + ‚à•f‚ÇÇ s‚à•‚Çä ^ ‚Üëp : nnreal.rpow_add_le_add_rpow _ _ h0p hp1,
end

instance (c) : topological_space { f : normed_free_pfpng p S | ‚à•f‚à•‚Çä ‚â§ c } := ‚ä•
instance (c) : discrete_topology { f : normed_free_pfpng p S | ‚à•f‚à•‚Çä ‚â§ c } := ‚ü®rfl‚ü©

lemma norm_eval_le {c : nnreal} (s : S)
  (f : normed_free_pfpng p S) (hf : ‚à•f‚à•‚Çä ‚â§ c) : ‚à•f s‚à•‚Çä ^ (p:‚Ñù) ‚â§ c :=
le_trans (begin
  apply @finset.single_le_sum S nnreal _ (Œª t, ‚à•f t‚à•‚Çä ^ (p:‚Ñù)) finset.univ,
  { intros _ _, apply zero_le },
  { exact finset.mem_univ s }
end) hf

instance [fact (0 < p)] (c) : fintype { f : normed_free_pfpng p S | ‚à•f‚à•‚Çä ‚â§ c } :=
begin
  let A := { f : normed_free_pfpng p S | ‚à•f‚à•‚Çä ‚â§ c },
  let N := ‚åàc ^ (p‚Åª¬π:‚Ñù)‚åâ‚Çä,
  have hN := @nat.le_ceil ‚Ñù‚â•0 _ _ (c ^ (p‚Åª¬π:‚Ñù)),
  have h0p : 0 < p := fact.out _,
  have h0pinv : 0 ‚â§ p‚Åª¬π, { rw ‚Üê nnreal.inv_pos at h0p, exact h0p.le },
  let Œπ : A ‚Üí S ‚Üí set.Icc (-(N : ‚Ñ§)) N :=
    Œª a s, ‚ü®a.1 s, _‚ü©,
  swap,
  { have := (nnreal.rpow_le_rpow (norm_eval_le p S s a.val a.2) h0pinv).trans hN,
    rw [‚Üê nnreal.coe_le_coe, ‚Üê nnreal.rpow_mul, ‚Üê nnreal.coe_mul,
      mul_inv_cancel h0p.ne', nnreal.coe_one, nnreal.rpow_one, nnreal.coe_nat_cast] at this,
    split,
    { rw [‚Üê neg_le_neg_iff] at this,
      exact_mod_cast this.trans (neg_abs_le_self (a.val s)), },
    { exact_mod_cast (le_abs_self _).trans this, } },
  have : function.injective Œπ,
  { rintros ‚ü®f,hf‚ü© ‚ü®g,hg‚ü© h,
    ext s,
    apply_fun (Œª e, (e s).1) at h,
    assumption },
  apply fintype.of_injective Œπ this,
end

variables [fact (0 < p)] [fact (p ‚â§ 1)]

instance : profinitely_filtered_pseudo_normed_group (normed_free_pfpng p S) :=
{ filtration := Œª c, { f | ‚à• f ‚à•‚Çä ‚â§ c },
  filtration_mono := Œª c‚ÇÅ c‚ÇÇ h f hf, le_trans hf h,
  zero_mem_filtration := Œª c, by simp,
  neg_mem_filtration := Œª c f hf, by simpa,
  add_mem_filtration := Œª c‚ÇÅ c‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ,
    le_trans (nnnorm_add _ _ _ _) (add_le_add h‚ÇÅ h‚ÇÇ),
  continuous_add' := Œª c‚ÇÅ c‚ÇÇ,
    continuous_of_discrete_topology,
  continuous_neg' := Œª c, continuous_of_discrete_topology,
  continuous_cast_le := Œª _ _ _, continuous_of_discrete_topology,
  ..(infer_instance : add_comm_group (normed_free_pfpng p S)) }

def map {S‚ÇÅ S‚ÇÇ : Fintype.{u}} (g : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  strict_comphaus_filtered_pseudo_normed_group_hom
  (normed_free_pfpng p S‚ÇÅ) (normed_free_pfpng p S‚ÇÇ) :=
{ to_fun := Œª f s, ‚àë t in finset.univ.filter (Œª w, g w = s), f t,
  map_zero' := by simpa,
  map_add' := Œª f g, by simpa [finset.sum_add_distrib],
  strict' := begin
    have h0p : 0 < p := fact.out _,
    have hp1 : p ‚â§ 1 := fact.out _,
    intros c f hf,
    refine le_trans _ hf,
    simp only [normed_free_pfpng.nnnorm_def],
    have : ‚àë s‚ÇÇ, ‚à•(‚àë t in finset.univ.filter (Œª w, g w = s‚ÇÇ), f t)‚à•‚Çä ^ (p:‚Ñù) ‚â§
      ‚àë s‚ÇÇ : S‚ÇÇ, ‚àë t in finset.univ.filter (Œª w, g w = s‚ÇÇ), ‚à•f t‚à•‚Çä ^ (p:‚Ñù),
    { apply finset.sum_le_sum,
      intros i _,
      refine le_trans _ (nnreal.rpow_sum_le_sum_rpow _ _ h0p hp1),
      refine nnreal.rpow_le_rpow _ h0p.le,
      apply nnnorm_sum_le },
    refine le_trans this _,
    rw ‚Üê finset.sum_bUnion,
    apply le_of_eq,
    apply finset.sum_congr,
    { rw finset.eq_univ_iff_forall,
      intros x,
      rw finset.mem_bUnion,
      use [g x, by simp] },
    { intros s‚ÇÅ _, refl },
    { intros x _ y _ h,
      rintros a hh,
      apply h,
      simp only [finset.inf_eq_inter, finset.mem_inter, finset.mem_filter,
        finset.mem_univ, true_and] at hh,
      rw [‚Üê hh.1, ‚Üê hh.2] }
  end,
  continuous' := Œª c, continuous_of_discrete_topology }

@[simp]
lemma map_id : map p (ùüô S) =
  strict_comphaus_filtered_pseudo_normed_group_hom.id :=
begin
  ext s,
  dsimp [map],
  simp [finset.filter_congr_decidable, finset.sum_filter],
end

@[simp]
lemma map_comp {S‚ÇÅ S‚ÇÇ S‚ÇÉ : Fintype.{u}}
  (g‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (g‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  map p (g‚ÇÅ ‚â´ g‚ÇÇ) =
  (map p g‚ÇÇ).comp (map p g‚ÇÅ) :=
begin
  ext s‚ÇÉ,
  dsimp [map],
  erw ‚Üê finset.sum_bUnion,
  apply finset.sum_congr,
  { ext s,
    split,
    { intro h, simp only [finset.mem_filter, finset.mem_univ, true_and] at h,
      rw finset.mem_bUnion,
      use [g‚ÇÅ s, by simpa] },
    { intro h, simp only [finset.mem_bUnion, finset.mem_filter,
      finset.mem_univ, true_and, exists_prop, exists_eq_right'] at h,
      simpa, } },
  { intros s‚ÇÅ h,
    rw finset.mem_bUnion at h },
  { intros x hx y hy,
    simp only [finset.coe_filter, finset.coe_univ, set.sep_univ,
      set.mem_set_of_eq] at hx hy,
    intros h a ha,
    simp only [finset.inf_eq_inter, finset.mem_inter, finset.mem_filter,
      finset.mem_univ, true_and] at ha,
    apply h, rw [‚Üê ha.1, ‚Üê ha.2] }
end

end normed_free_pfpng

variables [fact (0 < p)] [fact (p ‚â§ 1)]

/-- The functor represented by ‚Ñ§, i.e., sending a finite type `S` to
  `normed_free_pfpng p S`, otherwise known as `S ‚Üí ‚Ñ§`,
  equipped with the "p-norm" sending `s ‚Ü¶ f(s)` to `‚àë‚Çõ‚à•f(s)‚à•‚Çä·µñ`. This norm
  makes `S ‚Üí ‚Ñ§` into a `profinitely_filtered_pseudo_normed_group`. -/
@[simps]
def normed_free_pfpng_functor : Fintype ‚•§ ProFiltPseuNormGrp‚ÇÅ :=
{ obj := Œª S,
  { M := normed_free_pfpng p S,
    exhaustive' := Œª f, ‚ü®‚à•f‚à•‚Çä, le_refl _‚ü© },
  map := Œª S‚ÇÅ S‚ÇÇ f, normed_free_pfpng.map p f,
  map_id' := Œª S, normed_free_pfpng.map_id p S,
  map_comp' := Œª _ _ _ g‚ÇÅ g‚ÇÇ, normed_free_pfpng.map_comp p g‚ÇÅ g‚ÇÇ }

def Fintype.normed_free_pfpng (T : Fintype) : ProFiltPseuNormGrp‚ÇÅ :=
(normed_free_pfpng_functor p).obj T

def Fintype.normed_free_pfpng_unit :
  Fintype.to_Profinite ‚ü∂ normed_free_pfpng_functor p ‚ãô ProFiltPseuNormGrp‚ÇÅ.level.obj 1 :=
{ app := Œª S,
  { to_fun := Œª s,
    { val := Œª t, if s = t then 1 else 0,
      property := begin
        show finset.sum _ _ ‚â§ _,
        rw finset.sum_eq_single_of_mem,
        swap 4, { exact s }, swap 2, { apply finset.mem_univ },
        { dsimp, rw [if_pos rfl, nnnorm_one, nnreal.one_rpow], },
        rintro t - ht, dsimp, rw [if_neg ht.symm, nnnorm_zero, nnreal.zero_rpow],
        have h0p : 0 < p := fact.out _, exact_mod_cast h0p.ne',
      end },
    continuous_to_fun := continuous_bot },
  naturality' := Œª S T f, begin
    ext s t,
    delta ProFiltPseuNormGrp‚ÇÅ.level,
    simp only [Fintype.to_Profinite_map_to_fun, Profinite.coe_comp, continuous_map.coe_mk,
      function.comp_app, subtype.coe_mk, category_theory.functor.comp_map, normed_free_pfpng_functor_map,
      pseudo_normed_group.level_coe, subtype.coe_mk, normed_free_pfpng.map, finset.mem_filter, true_and,
      finset.mem_univ, strict_comphaus_filtered_pseudo_normed_group_hom.coe_mk, finset.sum_ite_eq],
  end }

def Profinite.normed_free_pfpng (S : Profinite) : ProFiltPseuNormGrp‚ÇÅ :=
(Profinite.extend $ normed_free_pfpng_functor p).obj S

open category_theory
open category_theory.limits

def Profinite.normed_free_pfpng_level_iso (S : Profinite.{u}) (r) :
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).obj (S.normed_free_pfpng p) ‚âÖ
  limits.limit (S.fintype_diagram ‚ãô normed_free_pfpng_functor p ‚ãô ProFiltPseuNormGrp‚ÇÅ.level.obj r) :=
(is_limit_of_preserves (ProFiltPseuNormGrp‚ÇÅ.level.obj r)
  (limit.is_limit _)).cone_point_unique_up_to_iso $ limit.is_limit _

def Profinite.to_normed_free_pfpng (S : Profinite.{u}) :
  S ‚ü∂ (ProFiltPseuNormGrp‚ÇÅ.level.obj 1).obj (S.normed_free_pfpng p) :=
(limit.is_limit _).map S.as_limit_cone (whisker_left _ $ Fintype.normed_free_pfpng_unit.{u u} p) ‚â´
(S.normed_free_pfpng_level_iso p 1).inv

--(limits.is_limit_of_preserves (ProFiltPseuNormGrp‚ÇÅ.level.obj 1) (limits.limit.is_limit _)).map
--  S.as_limit_cone $ whisker_left _ (Fintype.normed_free_pfpng_unit) ‚â´ (functor.associator _ _ _).inv

def Profinite.normed_free_pfpng_œÄ (S : Profinite) (T : discrete_quotient S) :
  S.normed_free_pfpng p ‚ü∂ (Fintype.of T).normed_free_pfpng p :=
category_theory.limits.limit.œÄ _ _

lemma Profinite.normed_free_pfpng_œÄ_w (S : Profinite) {T‚ÇÅ T‚ÇÇ : discrete_quotient S} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) :
  Profinite.normed_free_pfpng_œÄ p S T‚ÇÅ ‚â´ (S.fintype_diagram ‚ãô normed_free_pfpng_functor p).map f =
  Profinite.normed_free_pfpng_œÄ p S T‚ÇÇ :=
category_theory.limits.limit.w (S.fintype_diagram ‚ãô normed_free_pfpng_functor p) _
