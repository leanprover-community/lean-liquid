import pseudo_normed_group.category.strictProFiltPseuNormGrpWithTinv
import laurent_measures.functor
import condensed.ab
import condensed.rescale
import condensed.exact
import for_mathlib.split_exact
.

noncomputable theory

universe u

open_locale nnreal
open category_theory

variables {C D : Type*} [category C] [category D] (r' : ‚Ñù‚â•0) [fact (0 < r')]

abbreviation category_theory.nat_trans.conj_by {F G : C ‚•§ D} (Œ± : F ‚âÖ G) (Œ≤ : G ‚ü∂ G) :
  F ‚ü∂ F := Œ±.hom ‚â´ Œ≤ ‚â´ Œ±.inv

open category_theory

open ProFiltPseuNormGrpWithTinv‚ÇÅ CompHausFiltPseuNormGrp‚ÇÅ CompHausFiltPseuNormGrp

variables {r'}

/--
Given a functor `F` from `Fintype` to `CompHausFiltPseuNormGrp‚ÇÅ`, we can obtain
a functor `Profinite ‚•§ CompHausFiltPseuNormGrp‚ÇÅ` by expressing any profinite
set as a limit of finite sets and taking a limit in the target category.
We then compose with the functor to condensed abelian groups, and the result is
called `condensify F`.
-/
def condensify (F : Fintype.{u} ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}) :
  Profinite.{u} ‚•§ Condensed.{u} Ab.{u+1} :=
(Profinite.extend.{u} F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) ‚ãô to_Condensed.{u}

variables {F G H : Fintype.{u} ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}}
variables (Œ± Œ≤ : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u})
variables (c cŒ± cŒ≤ cŒ±Œ≤ : ‚Ñù‚â•0) [fact (0 < c)]  [fact (0 < cŒ±)] [fact (0 < cŒ≤)] [fact (0 < cŒ±Œ≤)]

/--
Given functors `F G : Fintype ‚•§ CompHausFiltPseuNormGrp‚ÇÅ` and a
natural transformation `Œ∑` between the induced functors `Fintype ‚•§ CompHausFiltPseuNormGrp`
(obtained by composing with `CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó`), such that the components of `Œ∑` are bounded
by a *single* `c : ‚Ñù‚â•0`, this is the morphism between the associated condensed abelian groups.
-/
def condensify_nonstrict
  (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) (c : ‚Ñù‚â•0) [fact (0 < c)]
  (h : ‚àÄ X, (Œ±.app X).bound_by c) :
  condensify F ‚ü∂ condensify G :=
whisker_right (nonstrict_extend.{u} Œ± c h) to_Condensed

lemma condensify_nonstrict_id (c : ‚Ñù‚â•0) [fact (0 < c)]
  (h : ‚àÄ X, (nat_trans.app (ùüô (F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u})) X).bound_by c) :
  condensify_nonstrict (ùüô _) c h = ùüô _ :=
by { simp only [condensify_nonstrict, nonstrict_extend_id, whisker_right_id'], refl }

lemma condensify_nonstrict_comp
  (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
  (Œ≤ : G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ H ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by cŒ≤)
  (hŒ±Œ≤ : ‚àÄ X, ((Œ± ‚â´ Œ≤).app X).bound_by cŒ±Œ≤) :
  condensify_nonstrict (Œ± ‚â´ Œ≤) cŒ±Œ≤ hŒ±Œ≤ =
    condensify_nonstrict Œ± cŒ± hŒ± ‚â´ condensify_nonstrict Œ≤ cŒ≤ hŒ≤ :=
begin
  simp only [condensify_nonstrict, whisker_right_comp],
  rw [nonstrict_extend_comp cŒ± cŒ≤ cŒ±Œ≤ _ _ _ _, whisker_right_comp],
end

def condensify_map (Œ± : F ‚ü∂ G) : condensify F ‚ü∂ condensify G :=
condensify_nonstrict (whisker_right Œ± _) 1
  (Œª X, (comphaus_filtered_pseudo_normed_group_hom.mk_of_strict_strict _ _).bound_by_one)

lemma condensify_map_id (F : Fintype.{u} ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}) :
  condensify_map (ùüô F) = ùüô (condensify F) :=
condensify_nonstrict_id _ _

lemma condensify_map_comp (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
  condensify_map (Œ± ‚â´ Œ≤) = condensify_map Œ± ‚â´ condensify_map Œ≤ :=
begin
  dsimp only [condensify_map],
  simp only [whisker_right_comp],
  apply condensify_nonstrict_comp,
end

def condensify_def (F : Fintype.{u} ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}) :
  condensify F ‚âÖ Profinite.extend.{u} F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ãô to_Condensed.{u} :=
iso.refl _

/-- Given a family `F` of profinitely filtered normed groups with `T‚Åª¬π`,
  indexed by a category (and such that all the morphisms in the family are strict),
  `Tinv_nat_trans` is the associated (possibly non-strict) morphism from the
  corresponding family of `CompHaus`ly filtered pseudo-normed groups coming from `T‚Åª¬π`.
  -/
def Tinv_nat_trans (F : C ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
  (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó.{u} r') ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂
  (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó.{u} r') ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó :=
{ app := Œª X, profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv,
  naturality' := Œª X Y f, by { ext x, exact ((F.map f).map_Tinv x).symm } }

/-- The endomorphism `T‚Åª¬π - 2` of a strict family of profinitely-filtered
pseudo-normed groups with `T‚Åª¬π`, considered as a possibly non-strict
endomorphism of the associated `CompHaus`ly filtered pseudo-normed groups. -/
def Tinv2_nat_trans (F : C ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
  (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó.{u} r') ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂
  (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó.{u} r') ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó :=
Tinv_nat_trans F - 2 ‚Ä¢ ùüô _

lemma Tinv_bound_by (F : C ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') (X : C) :
  ((Tinv_nat_trans F).app X).bound_by r'‚Åª¬π :=
profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv_bound_by

lemma twoid_bound_by (F : C ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') (X : C) :
  comphaus_filtered_pseudo_normed_group_hom.bound_by
    ((2 ‚Ä¢ ùüô ((F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r') ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)).app X) 2 :=
begin
  simp only [nat_trans.app_nsmul, nat_trans.id_app],
  refine ((comphaus_filtered_pseudo_normed_group_hom.mk_of_bound_bound_by _ 1 _).nsmul 2).mono _ _,
  norm_num,
end

lemma Tinv2_bound_by (F : C ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') (X : C) :
  ((Tinv2_nat_trans F).app X).bound_by (r'‚Åª¬π + 2) :=
(Tinv_bound_by F X).sub (twoid_bound_by F X)

@[reassoc]
lemma Tinv_nat_trans_comp {F G : C ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r'} (Œ± : F ‚ü∂ G) :
  Tinv_nat_trans F ‚â´ @whisker_right _ _ _ _ _ _ F G Œ± (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r' ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) =
  @whisker_right _ _ _ _ _ _ F G Œ± (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r' ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) ‚â´ Tinv_nat_trans G :=
by { ext X x, exact (Œ±.app X).map_Tinv x }

-- move me
instance fact_inv_pos : fact (0 < r'‚Åª¬π) := ‚ü®nnreal.inv_pos.2 $ fact.out _‚ü©

--set_option pp.universes true

/--
Given a functor from `Fintype` to `ProFiltPseuNormGrpWithTinv‚ÇÅ`, the `T‚Åª¬π` action
is a nonstrict morphism which is natural (see `Tinv_nat_trans`) and thus
induces a morphism on the associated condensed abelian groups.
-/
def condensify_Tinv (F : Fintype.{u} ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
  condensify.{u} (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r') ‚ü∂ condensify.{u} (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r') :=
condensify_nonstrict (Tinv_nat_trans _) r'‚Åª¬π (Tinv_bound_by _)

/--
A variant of `condensify_Tinv` with a different bound, given by `r'‚Åª¬π + 2`.
-/
def condensify_Tinv2 (F : Fintype.{u} ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
  condensify.{u} (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r') ‚ü∂ condensify.{u} (F ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r') :=
condensify_nonstrict (Tinv2_nat_trans _) (r'‚Åª¬π + 2) (Tinv2_bound_by _)

lemma condensify_map_comp_Tinv {F G : Fintype.{u} ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r'}
  (Œ± : F ‚ü∂ G) :
  condensify_map (whisker_right Œ± (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r')) ‚â´ condensify_Tinv G =
  condensify_Tinv F ‚â´ condensify_map (whisker_right Œ± (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r')) :=
begin
  delta condensify_map condensify_Tinv,
  rw [‚Üê condensify_nonstrict_comp 1 r'‚Åª¬π r'‚Åª¬π, ‚Üê condensify_nonstrict_comp r'‚Åª¬π 1 r'‚Åª¬π],
  swap, {
    intro X,
    rw nat_trans.comp_app,
    rw ‚Üê one_mul r'‚Åª¬π,
    apply comphaus_filtered_pseudo_normed_group_hom.bound_by.comp (Tinv_bound_by F X),
    simp only [whisker_right_twice, whisker_right_app, functor.comp_map, CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó_map],
    apply strict_comphaus_filtered_pseudo_normed_group_hom.to_chfpsng_hom.bound_by_one
    },
  swap, {
    intro X,
    rw nat_trans.comp_app,
    rw ‚Üê mul_one r'‚Åª¬π,
    refine comphaus_filtered_pseudo_normed_group_hom.bound_by.comp _ (Tinv_bound_by G X),
    simp only [whisker_right_twice, whisker_right_app, functor.comp_map, CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó_map],
    apply strict_comphaus_filtered_pseudo_normed_group_hom.to_chfpsng_hom.bound_by_one, },
  { simp only [whisker_right_twice, Tinv_nat_trans_comp], },
end
.

section


lemma condensify_nonstrict_map_add
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by cŒ≤)
  (hŒ±Œ≤ : ‚àÄ X, ((Œ± + Œ≤).app X).bound_by cŒ±Œ≤) :
  condensify_nonstrict (Œ± + Œ≤) cŒ±Œ≤ hŒ±Œ≤ =
  condensify_nonstrict Œ± cŒ± hŒ± + condensify_nonstrict Œ≤ cŒ≤ hŒ≤ :=
begin
  delta condensify_nonstrict,
  rw [nonstrict_extend_map_add _ _ cŒ± cŒ≤ cŒ±Œ≤ hŒ± hŒ≤],
  refl,
end

lemma condensify_nonstrict_map_neg
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, ((-Œ±).app X).bound_by cŒ≤) :
  condensify_nonstrict (-Œ±) cŒ≤ hŒ≤ = -condensify_nonstrict Œ± cŒ± hŒ± :=
begin
  delta condensify_nonstrict,
  rw [nonstrict_extend_map_neg _ _ cŒ≤ hŒ±],
  refl,
end

lemma condensify_nonstrict_map_sub
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by cŒ≤)
  (hŒ±Œ≤ : ‚àÄ X, ((Œ± - Œ≤).app X).bound_by cŒ±Œ≤) :
  condensify_nonstrict (Œ± - Œ≤) cŒ±Œ≤ hŒ±Œ≤ =
  condensify_nonstrict Œ± cŒ± hŒ± - condensify_nonstrict Œ≤ cŒ≤ hŒ≤ :=
begin
  delta condensify_nonstrict,
  rw [nonstrict_extend_map_sub _ _ cŒ± cŒ≤ cŒ±Œ≤ hŒ± hŒ≤],
  refl,
end

lemma condensify_nonstrict_map_nsmul (n : ‚Ñï)
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, ((n ‚Ä¢ Œ±).app X).bound_by cŒ≤) :
  condensify_nonstrict (n ‚Ä¢ Œ±) cŒ≤ hŒ≤ = n ‚Ä¢ condensify_nonstrict Œ± cŒ± hŒ± :=
begin
  delta condensify_nonstrict,
  rw [nonstrict_extend_map_nsmul _ _ cŒ≤ n hŒ±],
  clear hŒ≤,
  induction n with n ih,
  { rw [zero_smul, zero_smul], refl },
  { rw [succ_nsmul, succ_nsmul, ‚Üê ih], refl, }
end

-- lemma nonstrict_extend_Tinv (F : Fintype.{u} ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
--   nonstrict_extend (Tinv_nat_trans F) r'‚Åª¬π (Tinv_bound_by _) =
--     nat_trans.conj_by (iso_whisker_right
--       (Profinite.extend_commutes F (PFPNG‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó.{u} r')).symm enlarging_functor.{u})
--         (Tinv_nat_trans (Profinite.extend F)) :=
-- begin
--   refine nonstrict_extend_ext' _ _ r'‚Åª¬π (nonstrict_extend_bound_by _ _ _) _ _,
--   { admit },
--   { rw [nonstrict_extend_whisker_left],
--     simp only [whisker_left_comp, ‚Üê iso_whisker_left_hom, ‚Üê iso_whisker_left_inv,
--       ‚Üê iso.inv_comp_eq, iso.eq_comp_inv, category.assoc],
--     admit }
-- end

lemma condensify_nonstrict_Tinv (F : Fintype.{u} ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
  condensify_nonstrict (Tinv_nat_trans F) r'‚Åª¬π (Tinv_bound_by _) = condensify_Tinv F :=
rfl

lemma condensify_nonstrict_whisker_right_enlarging (Œ± : F ‚ü∂ G) :
  condensify_nonstrict (whisker_right Œ± _) 1
    (Œª X, (comphaus_filtered_pseudo_normed_group_hom.mk_of_strict_strict _ _).bound_by_one) =
  condensify_map Œ± :=
rfl

end

open pseudo_normed_group (filtration)

lemma exact_of_iso_comp_exact {V : Type u} [category V] [limits.has_images V]
  [limits.has_zero_morphisms V] [limits.has_equalizers V]
  {A B C D : V} (f : A ‚ü∂ B) {g : B ‚ü∂ C} {h : C ‚ü∂ D} (hf : is_iso f) (hgh : exact g h) :
  exact (f ‚â´ g) h :=
by rwa exact_iso_comp

lemma condensify_nonstrict_exact
  (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) (Œ≤ : G ‚ü∂ H)
  (c : ‚Ñù‚â•0) [fact (0 < c)]
  (h : ‚àÄ X, (Œ±.app X).bound_by c)
  (cŒ± cŒ≤ : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0) (hcŒ± : id ‚â§ cŒ±) (hcŒ≤ : id ‚â§ cŒ≤)
  (H1 : ‚àÄ S, function.injective (Œ±.app S))
  (H2a : ‚àÄ S, (Œ±.app S) ‚â´ ((whisker_right Œ≤ _).app S) = 0)
  (H2b : ‚àÄ S c', (Œ≤.app S) ‚Åª¬π' {0} ‚à© filtration (G.obj S) c' ‚äÜ
    (Œ±.app S) '' filtration (F.obj S) (cŒ± c' * c‚Åª¬π))
  (H3b : ‚àÄ S c', filtration (H.obj S) c' ‚äÜ (Œ≤.app S) '' filtration (G.obj S) (cŒ≤ c'))
  (X : Profinite.{u}) :
  short_exact ((condensify_nonstrict Œ± c h).app X) ((condensify_map Œ≤).app X) :=
begin
  apply_with short_exact.mk { instances := ff },
  { simp only [condensify_nonstrict, nonstrict_extend, whisker_right_comp],
    repeat { apply_with mono_comp { instances := ff }; try { apply_instance } },
    apply Condensed.mono_to_Condensed_map,
    apply strongly_exact_extend_zero_left,
    intro S,
    apply_with strongly_exact_of_mono { instances := ff },
    rw AddCommGroup.mono_iff_injective,
    exact H1 S, },
  { dsimp only [condensify_map, condensify_nonstrict],
    rw nonstrict_extend_whisker_right_enlarging,
    apply Condensed.epi_to_Condensed_map _ cŒ≤,
    apply strongly_exact_extend_zero_right,
    intro S,
    apply strongly_exact_of_epi _ _ _ hcŒ≤ (H3b S), },
  { dsimp only [condensify_map, condensify_nonstrict],
    rw nonstrict_extend_whisker_right_enlarging,
    simp only [nonstrict_extend, whisker_right_comp, nat_trans.comp_app, category.assoc],
    repeat { apply exact_of_iso_comp_exact; [apply_instance, skip] },
    apply Condensed.exact_of_strongly_exact _ _ cŒ±,
    apply strongly_exact.extend,
    intro S,
    refine ‚ü®_, _, hcŒ±‚ü©,
    { ext x, specialize H2a S, apply_fun (Œª œÜ, œÜ.to_fun) at H2a, exact congr_fun H2a x },
    { intros c' y hy,
      obtain ‚ü®x, hx, rfl‚ü© := H2b S c' hy,
      refine ‚ü®@rescale.of c _ x, hx, rfl‚ü©, } }
end
.

lemma condensify_exact (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H)
  (cŒ± cŒ≤ : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0) (hcŒ± : id ‚â§ cŒ±) (hcŒ≤ : id ‚â§ cŒ≤)
  (H1 : ‚àÄ S, function.injective (Œ±.app S))
  (H2a : ‚àÄ S, Œ±.app S ‚â´ Œ≤.app S = 0)
  (H2b : ‚àÄ S c, (Œ≤.app S) ‚Åª¬π' {0} ‚à© filtration (G.obj S) c ‚äÜ
    (Œ±.app S) '' filtration (F.obj S) (cŒ± c))
  (H3b : ‚àÄ S c, filtration (H.obj S) c ‚äÜ (Œ≤.app S) '' filtration (G.obj S) (cŒ≤ c))
  (X : Profinite.{u}) :
  short_exact ((condensify_map Œ±).app X) ((condensify_map Œ≤).app X) :=
begin
  refine condensify_nonstrict_exact _ _ 1 _ cŒ± cŒ≤ hcŒ± hcŒ≤ H1 _ _ H3b _,
  { intro S, simp only [whisker_right_app, ‚Üê functor.map_comp, H2a], refl, },
  { intros S c' x H, obtain ‚ü®x, hx, rfl‚ü© := H2b S c' H,
    refine ‚ü®x, pseudo_normed_group.filtration_mono _ hx, rfl‚ü©,
    simp only [inv_one, mul_one], },
end

-- move me
attribute [simps] Ab.ulift

lemma condensify_Tinv2_eq (F : Fintype.{u} ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
  condensify_Tinv2 F = condensify_Tinv F - 2 ‚Ä¢ ùüô _ :=
begin
  delta condensify_Tinv2 Tinv2_nat_trans,
  rw [condensify_nonstrict_map_sub _ _ r'‚Åª¬π 2 (r'‚Åª¬π + 2) (Tinv_bound_by _) (twoid_bound_by _),
    condensify_nonstrict_map_nsmul _ 1 2, condensify_nonstrict_Tinv],
  swap,
  { intro, exact comphaus_filtered_pseudo_normed_group_hom.mk_of_bound_bound_by _ 1 _ },
  rw [‚Üê condensify_map_id, ‚Üê condensify_nonstrict_whisker_right_enlarging],
  refl
end

open category_theory.preadditive

lemma condensify_map_comp_Tinv2 {F G : Fintype.{u} ‚•§ ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r'}
  (Œ± : F ‚ü∂ G) :
  condensify_map (whisker_right Œ± (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r')) ‚â´ condensify_Tinv2 G =
  condensify_Tinv2 F ‚â´ condensify_map (whisker_right Œ± (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r')) :=
by simp only [condensify_Tinv2_eq, comp_sub, sub_comp, comp_nsmul, nsmul_comp,
    condensify_map_comp_Tinv, category.id_comp, category.comp_id]
