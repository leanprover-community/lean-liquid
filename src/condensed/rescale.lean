import condensed.ab
import rescale.pseudo_normed_group
import hacks_and_tricks.asyncI
import for_mathlib.Profinite.extend
import facts.nnreal

.

noncomputable theory

universe u

open_locale nnreal
open category_theory

namespace comphaus_filtered_pseudo_normed_group

def of_rescale_one_strict (M : Type*) [comphaus_filtered_pseudo_normed_group M] :
  strict_comphaus_filtered_pseudo_normed_group_hom (rescale 1 M) M :=
{ continuous' := Œª c, comphaus_filtered_pseudo_normed_group.continuous_cast_le (c * 1‚Åª¬π) c,
  .. rescale.of_rescale_one_strict_pseudo_normed_group_hom M
}

def to_rescale_one_strict (M : Type*) [comphaus_filtered_pseudo_normed_group M] :
  strict_comphaus_filtered_pseudo_normed_group_hom M (rescale 1 M) :=
{ continuous' := Œª c, begin
    haveI : fact (c ‚â§ c * 1‚Åª¬π) := ‚ü®le_of_eq (by rw [inv_one, mul_one])‚ü©,
    exact comphaus_filtered_pseudo_normed_group.continuous_cast_le c (c * 1‚Åª¬π),
  end,
  .. rescale.to_rescale_one_strict_pseudo_normed_group_hom M
}

def of_rescale_eq_strict (M : Type*) [comphaus_filtered_pseudo_normed_group M]
  (r r' : ‚Ñù‚â•0) [fact (0 < r)] [fact (0 < r')] (hrr' : r = r') :
strict_comphaus_filtered_pseudo_normed_group_hom (rescale r M) (rescale r' M) :=
{ continuous' := Œª c, begin
  haveI : fact (c * r‚Åª¬π ‚â§ c * r'‚Åª¬π) := ‚ü®le_of_eq (by rw hrr')‚ü©,
    exact comphaus_filtered_pseudo_normed_group.continuous_cast_le (c * r‚Åª¬π) (c * r'‚Åª¬π),
  end,
  .. rescale.of_rescale_eq_strict_pseudo_normed_group_hom  r r' M hrr',
}

def of_rescale_rescale_strict (r r' : ‚Ñù‚â•0) [fact (0 < r)] [fact (0 < r')]
  (M : Type*) [comphaus_filtered_pseudo_normed_group M] :
  strict_comphaus_filtered_pseudo_normed_group_hom
    (rescale r (rescale r' M)) (rescale (r' * r) M) :=
{
  continuous' := Œª c,
  begin
    haveI : fact (c * r‚Åª¬π * r'‚Åª¬π ‚â§ c * (r' * r)‚Åª¬π) :=
      ‚ü®le_of_eq (by rw [mul_inv_rev, mul_assoc])‚ü©,
    exact comphaus_filtered_pseudo_normed_group.continuous_cast_le (c * r‚Åª¬π * r'‚Åª¬π) _,
  end,
  ..rescale.of_rescale_rescale_strict_pseudo_normed_group_hom r r' M
}

def to_rescale_rescale_strict (r r' : ‚Ñù‚â•0) [fact (0 < r)] [fact (0 < r')]
  (M : Type*) [comphaus_filtered_pseudo_normed_group M] :
  strict_comphaus_filtered_pseudo_normed_group_hom
    (rescale (r' * r) M) (rescale r (rescale r' M)) :=
{
  continuous' := Œª c,
  begin
    haveI : fact (c * (r' * r)‚Åª¬π ‚â§ c * r‚Åª¬π * r'‚Åª¬π) :=
      ‚ü®le_of_eq (by rw [mul_inv_rev, mul_assoc])‚ü©,
    exact comphaus_filtered_pseudo_normed_group.continuous_cast_le (c * (r' * r)‚Åª¬π) _,
  end,
  ..rescale.to_rescale_rescale_strict_pseudo_normed_group_hom r r' M
}

end comphaus_filtered_pseudo_normed_group

namespace CompHausFiltPseuNormGrp

@[simps]
def rescale (r : ‚Ñù‚â•0) : CompHausFiltPseuNormGrp ‚•§ CompHausFiltPseuNormGrp :=
{ obj := Œª M, of (rescale r M),
  map := Œª M‚ÇÅ M‚ÇÇ f, rescale.map_comphaus_filtered_pseudo_normed_group_hom r f,
  map_id' := by { intros, ext, refl },
  map_comp' := by { intros, ext, refl } }
.

def rescale_iso_component (r : ‚Ñù‚â•0) [fact (0 < r)] (M : CompHausFiltPseuNormGrp) :
  (rescale r).obj M ‚âÖ M :=
{ hom :=
  comphaus_filtered_pseudo_normed_group_hom.mk' (add_monoid_hom.id _)
  begin
    refine ‚ü®r‚Åª¬π, Œª c, ‚ü®_, _‚ü©‚ü©,
    { intros x hx,
      refine pseudo_normed_group.filtration_mono _ hx,
      rw mul_comm },
    { convert @comphaus_filtered_pseudo_normed_group.continuous_cast_le M _ _ _ _ using 1,
      rw mul_comm, apply_instance }
  end,
  inv :=
  comphaus_filtered_pseudo_normed_group_hom.mk' (add_monoid_hom.id _)
  begin
    have hr : r ‚â† 0 := ne_of_gt (fact.out _),
    refine ‚ü®r, Œª c, ‚ü®_, _‚ü©‚ü©,
    { intros x hx,
      dsimp, erw rescale.mem_filtration,
      refine pseudo_normed_group.filtration_mono _ hx,
      rw [mul_comm, inv_mul_cancel_left‚ÇÄ hr], },
    { convert @comphaus_filtered_pseudo_normed_group.continuous_cast_le M _ _ _ _ using 1,
      rw [mul_comm, inv_mul_cancel_left‚ÇÄ hr], apply_instance }
  end,
  hom_inv_id' := by { intros, ext, refl },
  inv_hom_id' := by { intros, ext, refl } }

def rescale_iso (r : ‚Ñù‚â•0) [fact (0 < r)] : rescale r ‚âÖ ùü≠ _ :=
nat_iso.of_components (rescale_iso_component r) $ Œª _ _ _, rfl

-- instance (X : Profinite) (c : ‚Ñù‚â•0) [fact (0 < c)] :
--   limits.preserves_limits (rescale c) :=
-- limits.preserves_limits_of_nat_iso (rescale_iso c).symm

instance rescale_preserves_limits_of_shape_discrete_quotient
  (X : Profinite.{u}) (c : ‚Ñù‚â•0) [fact (0 < c)] :
  limits.preserves_limits_of_shape.{u u u u u+1 u+1} (discrete_quotient.{u} ‚Ü•X) (rescale.{u u} c) :=
limits.preserves_limits_of_shape_of_nat_iso (rescale_iso c).symm

def rescale‚ÇÅ (r : ‚Ñù‚â•0) [fact (0 < r)] (M : CompHausFiltPseuNormGrp)
  (exh : ‚àÄ m : M, ‚àÉ c, m ‚àà pseudo_normed_group.filtration M c) :
  CompHausFiltPseuNormGrp‚ÇÅ :=
{ M := _root_.rescale r M,
  exhaustive' := Œª m, begin
    obtain ‚ü®c, hc‚ü© := exh (rescale.of.symm m),
    simp only [rescale.mem_filtration],
    refine ‚ü®c * r, pseudo_normed_group.filtration_mono _ hc‚ü©,
    rw mul_inv_cancel_right‚ÇÄ, exact ne_of_gt (fact.out _),
  end }

end CompHausFiltPseuNormGrp

namespace CompHausFiltPseuNormGrp‚ÇÅ

@[simps]
def rescale (r : ‚Ñù‚â•0) [fact (0 < r)] : CompHausFiltPseuNormGrp‚ÇÅ ‚•§ CompHausFiltPseuNormGrp‚ÇÅ :=
{ obj := Œª M,
  { M := rescale r M,
    exhaustive' := Œª m, begin
      obtain ‚ü®c, hc‚ü© := M.exhaustive (rescale.of.symm m),
      simp only [rescale.mem_filtration],
      refine ‚ü®c * r, pseudo_normed_group.filtration_mono _ hc‚ü©,
      rw mul_inv_cancel_right‚ÇÄ, exact ne_of_gt (fact.out _),
    end },
  map := Œª M‚ÇÅ M‚ÇÇ f, rescale.map_strict_comphaus_filtered_pseudo_normed_group_hom r f,
  map_id' := by { intros, ext, refl },
  map_comp' := by { intros, ext, refl } }
.

instance rescale.equivalence (r : ‚Ñù‚â•0) [fact (0 < r)] :
  is_equivalence (rescale r) :=
by haveI : fact (0 < r‚Åª¬π) := ‚ü®nnreal.inv_pos.2 (fact.elim infer_instance)‚ü©;
   haveI : fact (0 < r * r‚Åª¬π) := ‚ü®mul_pos (fact.elim infer_instance) (fact.elim infer_instance)‚ü©;
exactI
is_equivalence.mk (@rescale r‚Åª¬π ‚ü®nnreal.inv_pos.2 (fact.elim infer_instance)‚ü©)
{ hom :=
  { app := Œª M,
    -- M ‚ü∂ rescale 1 M ‚ü∂ rescale (r * r‚Åª¬π) M ‚ü∂ rescale r‚Åª¬π (rescale r M)
    ((comphaus_filtered_pseudo_normed_group.to_rescale_rescale_strict r‚Åª¬π r M).comp
    ((comphaus_filtered_pseudo_normed_group.of_rescale_eq_strict M 1 (r * r‚Åª¬π)
      (eq.symm (mul_inv_cancel (ne_of_gt (fact.elim infer_instance))))))).comp
    (comphaus_filtered_pseudo_normed_group.to_rescale_one_strict M),
    naturality' := Œª M N f, rfl,
  },
  inv :=
  { app := Œª M,
    -- rescale r‚Åª¬π (rescale r M) ‚ü∂ rescale (r * r‚Åª¬π) M ‚ü∂ rescale 1 M ‚ü∂ M
    (comphaus_filtered_pseudo_normed_group.of_rescale_one_strict M).comp
    (((comphaus_filtered_pseudo_normed_group.of_rescale_eq_strict M (r * r‚Åª¬π) 1
      ((mul_inv_cancel (ne_of_gt (fact.elim infer_instance)))))).comp
      (comphaus_filtered_pseudo_normed_group.of_rescale_rescale_strict r‚Åª¬π r M)),
    naturality' := Œª M N f, rfl },
  hom_inv_id' := rfl,
  inv_hom_id' := rfl }
  { hom :=
    { app := Œª M,
    -- rescale r (rescale r‚Åª¬π M) ‚ü∂ rescale (r‚Åª¬π * r) M ‚ü∂ rescale 1 M ‚ü∂ M
    (comphaus_filtered_pseudo_normed_group.of_rescale_one_strict M).comp
    (((comphaus_filtered_pseudo_normed_group.of_rescale_eq_strict M (r‚Åª¬π * r) 1
      ((inv_mul_cancel (ne_of_gt (fact.elim infer_instance)))))).comp
      (comphaus_filtered_pseudo_normed_group.of_rescale_rescale_strict r r‚Åª¬π M)),
      naturality' := Œª M N f, rfl },
    inv :=
    { app := Œª M,
    -- M ‚ü∂ rescale 1 M ‚ü∂ rescale (r‚Åª¬π * r) M ‚ü∂ rescale r (rescale r‚Åª¬π M)
    ((comphaus_filtered_pseudo_normed_group.to_rescale_rescale_strict r r‚Åª¬π M).comp
    ((comphaus_filtered_pseudo_normed_group.of_rescale_eq_strict M 1 (r‚Åª¬π * r)
      (eq.symm (inv_mul_cancel (ne_of_gt (fact.elim infer_instance))))))).comp
    (comphaus_filtered_pseudo_normed_group.to_rescale_one_strict M),
      naturality' := Œª M N f, rfl },
    hom_inv_id' := rfl,
    inv_hom_id' := rfl }

instance rescale_preserves_limits_of_shape_discrete_quotient
  (X : Profinite.{u}) (c : ‚Ñù‚â•0) [fact (0 < c)] :
  limits.preserves_limits_of_shape.{u u u u u+1 u+1} (discrete_quotient.{u} ‚Ü•X) (rescale.{u u} c) :=
begin
  let foo := (category_theory.adjunction.is_equivalence_preserves_limits
    (rescale c)).preserves_limits_of_shape,
  exact foo, -- not 100% sure why I need to define foo first
end

@[simps]
def rescale_enlarging_iso (r : ‚Ñù‚â•0) [fact (0 < r)] :
  rescale r ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚âÖ CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó :=
begin
  refine _ ‚â™‚â´ (iso_whisker_left _ (CompHausFiltPseuNormGrp.rescale_iso r))
    ‚â™‚â´ functor.right_unitor _,
  exact nat_iso.of_components (Œª M, iso.refl _) (Œª _ _ _, rfl),
end

@[simps]
def rescale_to_Condensed_iso (r : ‚Ñù‚â•0) [fact (0 < r)] :
  rescale r ‚ãô to_Condensed ‚âÖ
  CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ãô CompHausFiltPseuNormGrp.rescale r ‚ãô CompHausFiltPseuNormGrp.to_Condensed :=
nat_iso.of_components (Œª M, iso.refl _) $ Œª _ _ _, rfl

-- @[simps]
-- def strict_unscale (r : ‚Ñù‚â•0) [fact (1 ‚â§ r)] :
--   rescale r ‚ü∂ ùü≠ _ :=
-- { app := Œª M, comphaus_filtered_pseudo_normed_group.strict_unscale M r,
--   naturality' := by { intros, ext, refl, } }

-- def Condensed_unscale (r : ‚Ñù‚â•0) [fact (1 ‚â§ r)] :
--   rescale r ‚ãô to_Condensed ‚ü∂ to_Condensed :=
-- whisker_right (strict_unscale r) to_Condensed ‚â´ (functor.left_unitor _).hom

-- instance is_iso_strict_unscale (r : ‚Ñù‚â•0) [fact (1 ‚â§ r)] (M) :
--   is_iso ((Condensed_unscale r).app M) :=
-- begin
--   admit
-- end

end CompHausFiltPseuNormGrp‚ÇÅ

namespace comphaus_filtered_pseudo_normed_group_hom

def strictify (M‚ÇÅ M‚ÇÇ : Type*)
  [comphaus_filtered_pseudo_normed_group M‚ÇÅ] [comphaus_filtered_pseudo_normed_group M‚ÇÇ]
  (f : comphaus_filtered_pseudo_normed_group_hom M‚ÇÅ M‚ÇÇ)
  (r : ‚Ñù‚â•0) [fact (0 < r)]
  (hf : f.bound_by r) :
  strict_comphaus_filtered_pseudo_normed_group_hom (rescale r M‚ÇÅ) M‚ÇÇ :=
strict_comphaus_filtered_pseudo_normed_group_hom.mk' (f.to_add_monoid_hom)
begin
  intro c,
  refine ‚ü®Œª x hx, pseudo_normed_group.filtration_mono _ (hf hx), f.continuous _ (Œª _, rfl)‚ü©,
  have hr : r ‚â† 0 := ne_of_gt (fact.out _),
  rw [mul_left_comm, mul_inv_cancel hr, mul_one],
end

end comphaus_filtered_pseudo_normed_group_hom

open CompHausFiltPseuNormGrp‚ÇÅ

def strictify_nat_trans {C : Type*} [category C] {F G : C ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}}
  (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) (c : ‚Ñù‚â•0) [fact (0 < c)]
  (h : ‚àÄ X, (Œ±.app X).bound_by c) :
  F ‚ãô CompHausFiltPseuNormGrp‚ÇÅ.rescale.{u u} c ‚ü∂ G :=
{ app := Œª X, comphaus_filtered_pseudo_normed_group_hom.strictify _ _ (Œ±.app X) c (h X),
  naturality' := Œª X Y f, begin
    ext x, have := Œ±.naturality f, apply_fun (Œª œÜ, œÜ.to_fun x) at this, exact this
  end }

lemma strictify_nat_trans_enlarging {C : Type*} [category C]
  {F G : C ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}}
  (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) (c : ‚Ñù‚â•0) [fact (0 < c)]
  (h : ‚àÄ X, (Œ±.app X).bound_by c) :
  whisker_right (strictify_nat_trans Œ± c h) CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó =
  (functor.associator _ _ _).hom ‚â´ whisker_left F (rescale_enlarging_iso c).hom ‚â´ Œ± :=
begin
  ext, refl,
end

@[simp]
lemma strictify_nat_trans_enlarging' {C : Type*} [category C]
  {F G : C ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}}
  (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}) (c : ‚Ñù‚â•0) [fact (0 < c)]
  (h : ‚àÄ X, (Œ±.app X).bound_by c) :
  whisker_left F (rescale_enlarging_iso.{u u} c).inv ‚â´ (functor.associator _ _ _).inv ‚â´
  whisker_right (strictify_nat_trans Œ± c h) CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó = Œ± :=
begin
  ext, refl,
end

-- move me
instance preadditive_CompHausFiltPseuNormGrp : preadditive CompHausFiltPseuNormGrp.{u} :=
{ hom_group := Œª M N, by apply_instance,
  add_comp' := by { intros X Y Z f‚ÇÅ f‚ÇÇ g, ext, exact g.map_add _ _ },
  comp_add' := by { intros, ext, refl } }

section

variables {F G H : Fintype.{u} ‚•§ CompHausFiltPseuNormGrp‚ÇÅ.{u}}
variables (Œ± Œ≤ : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
variables (c cŒ± cŒ≤ cŒ±Œ≤ : ‚Ñù‚â•0) [fact (0 < c)] [fact (0 < cŒ±)] [fact (0 < cŒ≤)] [fact (0 < cŒ±Œ≤)]

def nonstrict_extend (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
  (c : ‚Ñù‚â•0) [fact (0 < c)] (h : ‚àÄ X, (Œ±.app X).bound_by c) :
  Profinite.extend.{u} F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ Profinite.extend.{u} G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó :=
whisker_left (Profinite.extend F) (rescale_enlarging_iso.{u u} c).inv ‚â´
whisker_right ((Profinite.extend_commutes _ _).hom ‚â´
  Profinite.extend_nat_trans.{u} (strictify_nat_trans Œ± c h)) CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó

-- move me
attribute [reassoc] whisker_left_comp whisker_right_comp

lemma nonstrict_extend_whisker_left (h : ‚àÄ X, (Œ±.app X).bound_by c) :
  whisker_left Fintype.to_Profinite (nonstrict_extend.{u} Œ± c h) =
  (functor.associator _ _ _).inv ‚â´
  whisker_right (Profinite.extend_extends.{u} F).hom CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚â´ Œ± ‚â´
  whisker_right (Profinite.extend_extends.{u} G).inv CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚â´
  (functor.associator _ _ _).hom :=
begin
  rw [nonstrict_extend, whisker_right_comp, whisker_left_comp, whisker_left_comp,
    ‚Üê whisker_right_left, ‚Üê whisker_right_left, Profinite.extend_nat_trans_whisker_left,
    whisker_right_comp, whisker_right_comp, strictify_nat_trans_enlarging,
    ‚Üê category_theory.whisker_right_comp_assoc, Profinite.extend_commutes_comp_extend_extends],
  refl,
end
.

lemma nonstrict_extend_bound_by (h : ‚àÄ X, (Œ±.app X).bound_by c) (X : Profinite.{u}) :
  ((nonstrict_extend Œ± c h).app X).bound_by c :=
begin
  conv begin congr, skip, rw ‚Üê one_mul c, end, -- can't get nth_rewrite to work
  refine comphaus_filtered_pseudo_normed_group_hom.bound_by.comp (Œª r m hm, _) _,
  { rw mul_comm,
    rwa (show r = r * c * c‚Åª¬π, begin
      rw [mul_assoc, mul_inv_cancel (ne_of_gt (fact.elim infer_instance)), mul_one];
      apply_instance,
    end) at hm },
  { rw [‚Üê one_mul (1 : ‚Ñù‚â•0), whisker_right_comp],
    apply comphaus_filtered_pseudo_normed_group_hom.bound_by.comp,
    { apply strict_comphaus_filtered_pseudo_normed_group_hom.to_chfpsng_hom.bound_by_one },
    { apply strict_comphaus_filtered_pseudo_normed_group_hom.to_chfpsng_hom.bound_by_one } },
end

lemma nonstrict_extend_ext'
  (Œ± Œ≤ : Profinite.extend.{u} F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ Profinite.extend G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
  (c : ‚Ñù‚â•0) [fact (0 < c)] (hŒ± : ‚àÄ X, (Œ±.app X).bound_by c) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by c)
  (h : whisker_left Fintype.to_Profinite Œ± = whisker_left Fintype.to_Profinite Œ≤) :
  Œ± = Œ≤ :=
begin
  suffices : strictify_nat_trans Œ± c hŒ± = strictify_nat_trans Œ≤ c hŒ≤,
  { rw [‚Üê strictify_nat_trans_enlarging' Œ± c hŒ±, ‚Üê strictify_nat_trans_enlarging' Œ≤ c hŒ≤, this] },
  rw ‚Üê cancel_epi (Profinite.extend_commutes F (CompHausFiltPseuNormGrp‚ÇÅ.rescale.{u u} c)).inv,
  apply Profinite.extend_nat_trans_ext,
  simp only [whisker_left_comp, cancel_epi],
  refine ((whiskering_right _ _ _).obj CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u}).map_injective _,
  simp only [whiskering_right_obj_map, whisker_right_left,
    strictify_nat_trans_enlarging, whisker_left_comp, h],
end

-- move me
instance fact_max_pos : fact (0 < max cŒ± cŒ≤) := ‚ü®lt_max_iff.mpr (or.inl $ fact.out _)‚ü©

lemma nonstrict_extend_mono (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [fact (0 < c‚ÇÅ)] [fact (0 < c‚ÇÇ)]
  (h‚ÇÅ : ‚àÄ X, (Œ±.app X).bound_by c‚ÇÅ) (h‚ÇÇ : ‚àÄ X, (Œ±.app X).bound_by c‚ÇÇ) :
  nonstrict_extend Œ± c‚ÇÅ h‚ÇÅ = nonstrict_extend Œ± c‚ÇÇ h‚ÇÇ :=
begin
  refine nonstrict_extend_ext' _ _ (max c‚ÇÅ c‚ÇÇ) _ _ _,
  { intro X, refine (nonstrict_extend_bound_by _ _ _ _).mono _ (le_max_left _ _), },
  { intro X, refine (nonstrict_extend_bound_by _ _ _ _).mono _ (le_max_right _ _), },
  { simp only [nonstrict_extend_whisker_left], }
end

lemma nonstrict_extend_ext
  (Œ± Œ≤ : Profinite.extend.{u} F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ Profinite.extend G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
  (cŒ± : ‚Ñù‚â•0) [fact (0 < cŒ±)] (cŒ≤ : ‚Ñù‚â•0) [fact (0 < cŒ≤)]
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by cŒ≤)
  (h : whisker_left Fintype.to_Profinite Œ± = whisker_left Fintype.to_Profinite Œ≤) :
  Œ± = Œ≤ :=
begin
  refine nonstrict_extend_ext' _ _ (max cŒ± cŒ≤) _ _ h,
  { intro X, refine (hŒ± X).mono _ (le_max_left _ _), },
  { intro X, refine (hŒ≤ X).mono _ (le_max_right _ _), },
end

-- move me
instance fact_add_pos (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [h‚ÇÅ : fact (0 < c‚ÇÅ)] [h‚ÇÇ : fact (0 < c‚ÇÇ)] :
  fact (0 < c‚ÇÅ + c‚ÇÇ) :=
‚ü®add_pos h‚ÇÅ.1 h‚ÇÇ.1‚ü©

lemma nonstrict_extend_map_add (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by cŒ≤)
  (hŒ±Œ≤ : ‚àÄ X, ((Œ± + Œ≤).app X).bound_by cŒ±Œ≤) :
  nonstrict_extend (Œ± + Œ≤) cŒ±Œ≤ hŒ±Œ≤ = nonstrict_extend Œ± cŒ± hŒ± + nonstrict_extend Œ≤ cŒ≤ hŒ≤ :=
begin
  refine nonstrict_extend_ext _ _ cŒ±Œ≤ (cŒ± + cŒ≤) _ _ _,
  { intro X, apply nonstrict_extend_bound_by, },
  { intro X,
    simp only [nat_trans.app_add],
    exact (nonstrict_extend_bound_by _ _ _ X).add (nonstrict_extend_bound_by _ _ _ X), },
  { ext S : 2,
    simp only [whisker_left_app, nat_trans.app_add],
    simp only [‚Üê whisker_left_app, nonstrict_extend_whisker_left,
      nonstrict_extend_whisker_left, preadditive.add_comp, preadditive.comp_add,
      nat_trans.app_add, nat_trans.comp_app, category.id_comp, category.comp_id,
      functor.associator_hom_app, functor.associator_inv_app], }
end

lemma nonstrict_extend_map_neg
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, ((-Œ±).app X).bound_by cŒ≤) :
  nonstrict_extend (-Œ±) cŒ≤ hŒ≤ = -nonstrict_extend Œ± cŒ± hŒ± :=
begin
  refine nonstrict_extend_ext _ _ cŒ≤ cŒ± _ _ _,
  { intro X, apply nonstrict_extend_bound_by, },
  { intro X, apply (nonstrict_extend_bound_by _ _ _ _).neg, },
  { ext S : 2,
    simp only [whisker_left_app, nat_trans.app_neg],
    simp only [‚Üê whisker_left_app, nonstrict_extend_whisker_left,
      nonstrict_extend_whisker_left, preadditive.neg_comp, preadditive.comp_neg,
      nat_trans.app_neg, nat_trans.comp_app, category.id_comp, category.comp_id,
      functor.associator_hom_app, functor.associator_inv_app], }
end

lemma nonstrict_extend_map_sub (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by cŒ≤)
  (hŒ±Œ≤ : ‚àÄ X, ((Œ± - Œ≤).app X).bound_by cŒ±Œ≤) :
  nonstrict_extend (Œ± - Œ≤) cŒ±Œ≤ hŒ±Œ≤ = nonstrict_extend Œ± cŒ± hŒ± - nonstrict_extend Œ≤ cŒ≤ hŒ≤ :=
begin
  refine nonstrict_extend_ext _ _ cŒ±Œ≤ (cŒ± + cŒ≤) _ _ _,
  { intro X, apply nonstrict_extend_bound_by, },
  { intro X,
    simp only [nat_trans.app_sub],
    exact (nonstrict_extend_bound_by _ _ _ X).sub (nonstrict_extend_bound_by _ _ _ X), },
  { ext S : 2,
    simp only [whisker_left_app, nat_trans.app_sub],
    simp only [‚Üê whisker_left_app, nonstrict_extend_whisker_left,
      nonstrict_extend_whisker_left, preadditive.sub_comp, preadditive.comp_sub,
      nat_trans.app_sub, nat_trans.comp_app, category.id_comp, category.comp_id,
      functor.associator_hom_app, functor.associator_inv_app], },
end

lemma nonstrict_extend_map_nsmul (n : ‚Ñï)
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, ((n ‚Ä¢ Œ±).app X).bound_by cŒ≤) :
  nonstrict_extend (n ‚Ä¢ Œ±) cŒ≤ hŒ≤ = n ‚Ä¢ nonstrict_extend Œ± cŒ± hŒ± :=
begin
  refine nonstrict_extend_ext _ _ cŒ≤ (1 + n * cŒ±) _ _ _,
  { intro X, apply nonstrict_extend_bound_by, },
  { intro X,
    simp only [nat_trans.app_nsmul],
    exact ((nonstrict_extend_bound_by _ _ _ _).nsmul _).mono _ le_add_self, },
  { ext S : 2,
    simp only [whisker_left_app, nat_trans.app_nsmul],
    simp only [‚Üê whisker_left_app, nonstrict_extend_whisker_left,
      nonstrict_extend_whisker_left, preadditive.nsmul_comp, preadditive.comp_nsmul,
      nat_trans.app_nsmul, nat_trans.comp_app, category.id_comp, category.comp_id,
      functor.associator_hom_app, functor.associator_inv_app], }
end

lemma nonstrict_extend_comp
  (Œ± : F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
  (Œ≤ : G ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó ‚ü∂ H ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó)
  (hŒ± : ‚àÄ X, (Œ±.app X).bound_by cŒ±) (hŒ≤ : ‚àÄ X, (Œ≤.app X).bound_by cŒ≤)
  (hŒ±Œ≤ : ‚àÄ X, ((Œ± ‚â´ Œ≤).app X).bound_by cŒ±Œ≤) :
  nonstrict_extend (Œ± ‚â´ Œ≤) cŒ±Œ≤ hŒ±Œ≤ = nonstrict_extend Œ± cŒ± hŒ± ‚â´ nonstrict_extend Œ≤ cŒ≤ hŒ≤ :=
begin
  refine nonstrict_extend_ext _ _ cŒ±Œ≤ (cŒ± * cŒ≤) (nonstrict_extend_bound_by _ _ _) _ _,
  { intro X,
    rw mul_comm,
    apply comphaus_filtered_pseudo_normed_group_hom.bound_by.comp,
    { exact nonstrict_extend_bound_by Œ± cŒ± hŒ± X },
    { exact nonstrict_extend_bound_by Œ≤ cŒ≤ hŒ≤ X } },
  { simp only [nonstrict_extend_whisker_left, whisker_left_comp, category.assoc,
      ‚Üê iso_whisker_right_hom, ‚Üê iso_whisker_right_inv,
      iso.hom_inv_id_assoc, iso.inv_hom_id_assoc], }
end

lemma nonstrict_extend_id
  (hŒ± : ‚àÄ X, (nat_trans.app (ùüô (F ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u})) X).bound_by cŒ±) :
  nonstrict_extend (ùüô _) cŒ± hŒ± = ùüô _ :=
begin
  refine nonstrict_extend_ext _ _ cŒ± 1 (nonstrict_extend_bound_by _ _ _) _ _,
  { intro X, exact comphaus_filtered_pseudo_normed_group_hom.mk_of_bound_bound_by _ _ _ },
  { simp only [nonstrict_extend_whisker_left, whisker_left_comp, category.assoc,
      ‚Üê iso_whisker_right_hom, ‚Üê iso_whisker_right_inv, category.id_comp,
      iso.hom_inv_id_assoc, iso.inv_hom_id_assoc, whisker_left_id'],
    refl, }
end

lemma nonstrict_extend_whisker_right_enlarging (Œ± : F ‚ü∂ G) :
  nonstrict_extend (whisker_right Œ± CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó) 1
    (Œª X, (comphaus_filtered_pseudo_normed_group_hom.mk_of_strict_strict _ _).bound_by_one) =
  whisker_right (Profinite.extend_nat_trans Œ±) _ :=
begin
  refine nonstrict_extend_ext _ _ 1 1 (nonstrict_extend_bound_by _ _ _)
    (Œª X, (comphaus_filtered_pseudo_normed_group_hom.mk_of_strict_strict _ _).bound_by_one) _,
  rw [nonstrict_extend_whisker_left, ‚Üê whisker_right_left, Profinite.extend_nat_trans_whisker_left],
  refl
end

end
