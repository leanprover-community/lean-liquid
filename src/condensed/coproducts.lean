import condensed.is_proetale_sheaf
import condensed.top_comparison
import condensed.adjunctions

/-!
We show that passing from a profinite set to a condensed set
preserves (finite) coproducts.
-/

open_locale big_operators classical
open category_theory
open category_theory.limits
open opposite

universe u

namespace Profinite

@[simps]
def to_Condensed_equiv (X : Profinite.{u}) (Y : CondensedSet.{u}) :
  (X.to_Condensed ‚ü∂ Y) ‚âÉ Y.val.obj (op X) :=
{ to_fun := Œª f, f.val.app _ $ ulift.up $ ùüô _,
  inv_fun := Œª f, Sheaf.hom.mk $
  { app := Œª T g, Y.val.map (quiver.hom.op (ulift.down g)) f,
    naturality' := begin
      intros A B ff, ext t,
      obtain ‚ü®t‚ü© := t,
      dsimp [Profinite.to_Condensed, ulift_functor, yoneda] at ‚ä¢ t,
      simp only [functor.map_comp], refl,
    end },
  left_inv := Œª f, begin
    ext T ‚ü®t‚ü©,
    dsimp [yoneda] at ‚ä¢ t,
    change (f.val.app _ ‚â´ Y.val.map _) _ = _,
    rw ‚Üê nat_trans.naturality,
    change f.val.app _ _ = _,
    congr' 1, ext, refl,
  end,
  right_inv := Œª f, by { dsimp, simp } }

end Profinite

namespace CondensedSet

variables {Œ± : Type u} [fintype Œ±] (X : Œ± ‚Üí Profinite.{u})

@[simps]
def sigma_cone : cocone (discrete.functor X ‚ãô Profinite_to_Condensed) :=
{ X := (Profinite.sigma X).to_Condensed,
  Œπ :=
  { app := Œª i, Profinite_to_Condensed.map $ Profinite.sigma.Œπ X i.1,
    naturality' := begin
      rintros ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©, dsimp, simp, dsimp, simp, dsimp, simp,
    end } } .

noncomputable
def val_obj_sigma_equiv (Y : CondensedSet.{u}) :
  Y.val.obj (op $ Profinite.sigma X) ‚âÉ (Œ† (a : Œ±), Y.val.obj (op $ X a)) :=
equiv.of_bijective
(Œª f a, Y.val.map (Profinite.sigma.Œπ X a).op f)
begin
  have := Y.2,
  rw is_sheaf_iff_is_sheaf_of_type at this,
  rw Y.val.is_proetale_sheaf_of_types_tfae.out 0 4 at this,
  have key := this.1,
  exact key ‚ü®Œ±‚ü© X,
end

noncomputable
def _root_.Condensed.val_obj_sigma_add_equiv
  (Y : Condensed.{u} Ab.{u+1}) :
  Y.val.obj (op $ Profinite.sigma X) ‚âÉ+
  (Œ† (a : Œ±), Y.val.obj (op $ X a)) :=
add_equiv.of_bijective
(add_monoid_hom.mk' (Œª f a, Y.val.map (Profinite.sigma.Œπ X a).op f) (by { intros, ext1, simp }))
((Condensed_Ab_to_CondensedSet.obj Y).val_obj_sigma_equiv X).bijective

@[simp]
lemma coe_val_obj_sigma_equiv (Y : Condensed.{u} Ab.{u+1}) :
  ‚áë((Condensed_Ab_to_CondensedSet.obj Y).val_obj_sigma_equiv X) =
  (Y.val_obj_sigma_add_equiv X) := rfl

@[simp]
lemma coe_val_obj_sigma_equiv_symm (Y : Condensed.{u} Ab.{u+1}) :
  ‚áë((Condensed_Ab_to_CondensedSet.obj Y).val_obj_sigma_equiv X).symm =
  (Y.val_obj_sigma_add_equiv X).symm := rfl

@[simp]
lemma _root_.Condensed.val_obj_sigma_add_equiv_apply_apply
  (Y : Condensed.{u} Ab.{u+1}) (t) (a) :
  Y.val_obj_sigma_add_equiv X t a = Y.val.map (Profinite.sigma.Œπ X a).op t := rfl

lemma val_obj_sigma_equiv_symm_apply'
  (Y : CondensedSet.{u})
  (e : Œ† (a : Œ±), Y.val.obj (op $ X a)) (a‚ÇÄ : Œ±) :
  (Y.val.map (Profinite.sigma.Œπ X a‚ÇÄ).op)
  (((val_obj_sigma_equiv X Y).symm) e) = e a‚ÇÄ :=
begin
  let e' := _, change (Y.val.map (Profinite.sigma.Œπ X a‚ÇÄ).op) e' = _,
  have : e a‚ÇÄ = (val_obj_sigma_equiv X Y) e' a‚ÇÄ,
    { revert a‚ÇÄ, rw ‚Üê function.funext_iff, dsimp only [e'], simp },
  rw this, refl,
end

-- TODO reuse the nonadditive variant for this.
lemma _root_.Condensed.val_obj_sigma_add_equiv_symm_apply'
  (Y : Condensed.{u} Ab.{u+1})
  (e : Œ† (a : Œ±), Y.val.obj (op $ X a)) (a‚ÇÄ : Œ±) :
  (Y.val.map (Profinite.sigma.Œπ X a‚ÇÄ).op)
  (((_root_.Condensed.val_obj_sigma_add_equiv X Y).symm) e) = e a‚ÇÄ :=
begin
  let e' := _, change (Y.val.map (Profinite.sigma.Œπ X a‚ÇÄ).op) e' = _,
  have : e a‚ÇÄ = (_root_.Condensed.val_obj_sigma_add_equiv X Y) e' a‚ÇÄ,
    { revert a‚ÇÄ, rw ‚Üê function.funext_iff, dsimp only [e'], simp },
  rw this, refl,
end

lemma val_obj_sigma_equiv_symm_apply
  (Y : CondensedSet.{u})
  (e : Œ† (a : Œ±), Y.val.obj (op $ X a)) (a‚ÇÄ : Œ±) :
    (Profinite_to_Condensed.map (Profinite.sigma.Œπ X a‚ÇÄ)) ‚â´
    (Profinite.to_Condensed_equiv (Profinite.sigma X) Y).symm
    ((Y.val_obj_sigma_equiv X).symm e) =
    (Profinite.to_Condensed_equiv (X a‚ÇÄ) Y).symm (e a‚ÇÄ) :=
begin
  apply_fun ((X a‚ÇÄ).to_Condensed_equiv Y),
  simp only [equiv.apply_symm_apply],
  dsimp [Profinite.to_Condensed_equiv],
  simp only [category.comp_id],
  apply val_obj_sigma_equiv_symm_apply'
end

-- TODO reuse the nonadditive variant for this.
lemma _root_.Condensed.val_obj_sigma_add_equiv_symm_apply
  (Y : Condensed.{u} Ab.{u+1})
  (e : Œ† (a : Œ±), Y.val.obj (op $ X a)) (a‚ÇÄ : Œ±) :
    (Profinite_to_Condensed.map (Profinite.sigma.Œπ X a‚ÇÄ)) ‚â´
    (Profinite.to_Condensed_equiv (Profinite.sigma X)
    (Condensed_Ab_to_CondensedSet.obj Y)).symm
    ((Y.val_obj_sigma_add_equiv X).symm e) =
    (Profinite.to_Condensed_equiv (X a‚ÇÄ)
    (Condensed_Ab_to_CondensedSet.obj Y)).symm (e a‚ÇÄ) :=
begin
  apply_fun ((X a‚ÇÄ).to_Condensed_equiv (Condensed_Ab_to_CondensedSet.obj Y)),
  simp only [equiv.apply_symm_apply],
  dsimp [Profinite.to_Condensed_equiv],
  simp only [category.comp_id],
  apply _root_.Condensed.val_obj_sigma_add_equiv_symm_apply'
end

noncomputable
def is_colimit_sigma_cone : is_colimit (sigma_cone X) :=
{ desc := Œª S, (Profinite.to_Condensed_equiv _ _).symm $
    (S.X.val_obj_sigma_equiv X).symm $ Œª a,
    (Profinite.to_Condensed_equiv _ _) $ S.Œπ.app ‚ü®_‚ü©,
  fac' := begin
    rintros Q ‚ü®T‚ü©,
    dsimp,
    rw val_obj_sigma_equiv_symm_apply,
    ext W ‚ü®(t : _ ‚ü∂ _)‚ü©,
    dsimp [Profinite.to_Condensed_equiv],
    change ((Q.Œπ.app ‚ü®T‚ü©).val.app (op (X T)) ‚â´ Q.X.val.map t.op) _ = _,
    erw ‚Üê (Q.Œπ.app ‚ü®T‚ü©).val.naturality,
    change (Q.Œπ.app ‚ü®T‚ü©).val.app (op (unop W)) _ = _,
    congr' 1,
    dsimp [Profinite.to_Condensed], ext, refl,
  end,
  uniq' := begin
    intros S m hm,
    apply_fun ((Profinite.sigma X).to_Condensed_equiv S.X),
    apply_fun (val_obj_sigma_equiv X S.X),
    simp only [equiv.apply_symm_apply],
    ext a,
    specialize hm ‚ü®a‚ü©,
    dsimp [val_obj_sigma_equiv],
    change (m.val.app (op (Profinite.sigma X)) ‚â´
      S.X.val.map _) _ = _,
    rw ‚Üê m.val.naturality,
    apply_fun (Œª e, e.val.app (op (X a)) ‚ü®ùüô _‚ü©) at hm,
    exact hm,
  end }

end CondensedSet
