import condensed.extr.basic
import condensed.proetale_site
import condensed.basic
import category_theory.sites.induced_topology

import for_mathlib.sheafification_equiv_compatibility
import for_mathlib.presieve


noncomputable theory

open category_theory

universes u v' u'

lemma ExtrDisc.cover_dense :
  cover_dense proetale_topology.{u} ExtrDisc_to_Profinite.{u} :=
  cover_dense.mk $ Œª U,
begin
  change ‚àÉ R, _,
  obtain ‚ü®‚ü®T,hT,œÄ,hœÄ‚ü©‚ü© := enough_projectives.presentation U,
  dsimp at hT hœÄ,
  let R : presieve U := presieve.of_arrows (Œª i : punit, T) (Œª i, œÄ),
  use R,
  split,
  { refine ‚ü®punit, infer_instance, Œª i, T, Œª i, œÄ, Œª x, ‚ü®punit.star, _‚ü©, rfl‚ü©,
    rw Profinite.epi_iff_surjective at hœÄ,
    exact hœÄ x },
  intros Y f hf,
  change nonempty _,
  rcases hf with ‚ü®a,b‚ü©,
  let t : presieve.cover_by_image_structure ExtrDisc_to_Profinite œÄ := _,
  swap,
  { resetI,
    refine ‚ü®‚ü®T‚ü©, ùüô _, œÄ, by simp‚ü© },
  use t,
end

def ExtrDisc.proetale_topology : grothendieck_topology ExtrDisc.{u} :=
  ExtrDisc.cover_dense.induced_topology.{u}

instance ExtrDisc_proetale_topology_filtered (X : ExtrDisc.{u}) :
  is_filtered (ExtrDisc.proetale_topology.{u}.cover X)·µí·µñ := infer_instance

@[derive category]
def ExtrSheaf (C : Type u') [category.{v'} C] := Sheaf ExtrDisc.proetale_topology.{u} C

-- TODO: cover_densed.Sheaf_equiv still has unecessary universe restrictions that can be relaxed.
def Condensed_ExtrSheaf_equiv (C : Type u') [category.{u+1} C] [limits.has_limits C] :
  ExtrSheaf.{u} C ‚âå Condensed.{u} C :=
ExtrDisc.cover_dense.Sheaf_equiv_of_cover_preserving_cover_lifting
  ExtrDisc.cover_dense.locally_cover_dense.induced_topology_cover_preserving
  ExtrDisc.cover_dense.locally_cover_dense.induced_topology_cover_lifting

-- Sanity check
@[simp] lemma Condensed_ExtrSheaf_equiv_inverse_val (C : Type u') [category.{u+1} C]
  [limits.has_limits C] (F : Condensed.{u} C) :
  ((Condensed_ExtrSheaf_equiv C).inverse.obj F).val = ExtrDisc_to_Profinite.op ‚ãô F.val := rfl

def ExtrDisc_sheafification_iso :
  (whiskering_left _ _ _).obj ExtrDisc_to_Profinite.op ‚ãô
  presheaf_to_Sheaf ExtrDisc.proetale_topology Ab.{u+1} ‚âÖ
  presheaf_to_Sheaf proetale_topology _ ‚ãô (Condensed_ExtrSheaf_equiv _).inverse :=
sites.pullback_sheafification_compatibility _ _
ExtrDisc.cover_dense.locally_cover_dense.induced_topology_cover_lifting
_

open opposite

theorem is_ExtrSheaf_of_types_of_is_sheaf_ExtrDisc_proetale_topology
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : presieve.is_sheaf ExtrDisc.proetale_topology F) :
  is_ExtrSheaf_of_types F :=
begin
  introsI B Œπ _ X f hf x hx,
  let S : presieve B := presieve.of_arrows X f,
  specialize H (sieve.generate S) _,
  { dsimp [ExtrDisc.proetale_topology],
    let R : presieve B.val := presieve.of_arrows (Œª i, (X i).val) (Œª i, (f i).val),
    use R,
    split,
    { use [Œπ, infer_instance, (Œª i, (X i).val), (Œª i, (f i).val), hf, rfl] },
    { intros Y f hf,
      rcases hf with ‚ü®i‚ü©,
      use [X i, f i, ùüô _],
      refine ‚ü®_, by simp‚ü©,
      use [X i, ùüô _, (f i), presieve.of_arrows.mk i],
      simp } },
  rw ‚Üê presieve.is_sheaf_for_iff_generate at H,
  let t : S.family_of_elements F := presieve.mk_family_of_elements_of_arrows X f F x,
  have ht : t.compatible := presieve.mk_family_of_elements_of_arrows_compatible X f F x hx,
  specialize H t ht,
  -- now use H.
  obtain ‚ü®tt,htt,htt'‚ü© := H,
  refine ‚ü®tt,_,_‚ü©,
  { dsimp,
    intros i,
    specialize htt (f i) (presieve.of_arrows.mk i),
    rw htt,
    apply presieve.mk_family_of_elements_of_arrows_eval _ _ _ _ hx },
  { intros y hy,
    apply htt',
    intros Z f hf,
    rcases hf with ‚ü®i‚ü©,
    rw hy,
    symmetry,
    apply presieve.mk_family_of_elements_of_arrows_eval _ _ _ _ hx }
end

theorem is_seprated_of_is_ExtrSheaf_of_types
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : is_ExtrSheaf_of_types F) :
  presieve.is_separated ExtrDisc.proetale_topology F :=
begin
  intros B S hS x t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ,
  change proetale_topology _ _ at hS,
  rw ExtrDisc.cover_dense.locally_cover_dense.pushforward_cover_iff_cover_pullback at hS,
  obtain ‚ü®‚ü®T,hT‚ü©,rfl‚ü© := hS,
  obtain ‚ü®R,hR,hRT‚ü© := hT,
  obtain ‚ü®Œπ, _, X, f, surj, rfl‚ü© := hR,
  resetI,
  let XX : Œπ ‚Üí ExtrDisc := Œª i, (X i).pres,
  let ff : Œ† i, (XX i) ‚ü∂ B := Œª i, ‚ü®(X i).pres_œÄ ‚â´ f i‚ü©,
  have surjff : ‚àÄ b : B, ‚àÉ (i : Œπ) (q : XX i), (ff i) q = b,
  { intros b,
    obtain ‚ü®i,y,rfl‚ü© := surj b,
    obtain ‚ü®z,rfl‚ü© := (X i).pres_œÄ_surjective y,
    use [i,z,rfl] },
  have hff : ‚àÄ i, T (ff i).val,
  { intros i,
    dsimp [ff],
    apply sieve.downward_closed,
    apply hRT,
    exact presieve.of_arrows.mk i },
  let xx : Œ† i, F.obj (op (XX i)) := Œª i, x _ _,
  swap, { exact ff i },
  swap, { exact hff i },
  specialize H B Œπ XX ff surjff xx _,
  { intros i j Z g‚ÇÅ g‚ÇÇ h,
    have hxcompat : x.compatible,
    { apply  presieve.is_compatible_of_exists_amalgamation,
      exact ‚ü®t‚ÇÅ, h‚ÇÅ‚ü© },
    dsimp [presieve.family_of_elements.compatible] at hxcompat,
    dsimp [xx],
    specialize hxcompat g‚ÇÅ g‚ÇÇ,
    apply hxcompat,
    exact h },
  obtain ‚ü®t,ht,ht'‚ü© := H,
  have ht‚ÇÅ : t‚ÇÅ = t,
  { apply ht',
    intros i,
    apply h‚ÇÅ },
  have ht‚ÇÇ : t‚ÇÇ = t,
  { apply ht',
    intros i,
    apply h‚ÇÇ },
  rw [ht‚ÇÅ, ht‚ÇÇ]
end

theorem is_sheaf_ExtrDisc_proetale_topology_of_is_ExtrSheaf_of_types
  (F : ExtrDisc·µí·µñ ‚•§ Type u') (H : is_ExtrSheaf_of_types F) :
  presieve.is_sheaf ExtrDisc.proetale_topology F :=
begin
  have hF : presieve.is_separated ExtrDisc.proetale_topology F,
  { apply is_seprated_of_is_ExtrSheaf_of_types,
    assumption },
  intros B S hS,
  rw ‚Üê presieve.is_separated_for_and_exists_is_amalgamation_iff_sheaf_for,
  split, { apply hF _ hS },
  intros x hx,
  change proetale_topology _ _ at hS,
  rw ExtrDisc.cover_dense.locally_cover_dense.pushforward_cover_iff_cover_pullback at hS,
  obtain ‚ü®‚ü®T,hT‚ü©,rfl‚ü© := hS,
  obtain ‚ü®R,hR,hRT‚ü© := hT,
  obtain ‚ü®Œπ, _, X, f, surj, rfl‚ü© := hR,
  resetI,
  let XX : Œπ ‚Üí ExtrDisc := Œª i, (X i).pres,
  let ff : Œ† i, (XX i) ‚ü∂ B := Œª i, ‚ü®(X i).pres_œÄ ‚â´ f i‚ü©,
  have surjff : ‚àÄ b : B, ‚àÉ (i : Œπ) (q : XX i), (ff i) q = b,
  { intros b,
    obtain ‚ü®i,y,rfl‚ü© := surj b,
    obtain ‚ü®z,rfl‚ü© := (X i).pres_œÄ_surjective y,
    use [i,z,rfl] },
  have hff : ‚àÄ i, T (ff i).val,
  { intros i,
    dsimp [ff],
    apply sieve.downward_closed,
    apply hRT,
    exact presieve.of_arrows.mk i },
  let xx : Œ† i, F.obj (op (XX i)) := Œª i, x _ _,
  swap, { exact ff i },
  swap, { exact hff i },
  specialize H B Œπ XX ff surjff xx _,
  { intros i j Z g‚ÇÅ g‚ÇÇ h,
    dsimp [presieve.family_of_elements.compatible] at hx,
    dsimp [xx],
    specialize hx g‚ÇÅ g‚ÇÇ,
    apply hx,
    exact h },
  obtain ‚ü®t,ht,ht'‚ü© := H,
  use t,
  intros Y f hf,
  let PP : Œπ ‚Üí Profinite := Œª i, Profinite.pullback f.val (ff i).val,
  let QQ : Œπ ‚Üí ExtrDisc := Œª i, (PP i).pres,
  let œÄœÄ : Œ† i, (QQ i) ‚ü∂ XX i := Œª i, ‚ü®(PP i).pres_œÄ ‚â´ Profinite.pullback.snd _ _‚ü©,
  let gg : Œ† i, (QQ i) ‚ü∂ Y := Œª i,
    ‚ü®(PP i).pres_œÄ ‚â´ Profinite.pullback.fst _ _‚ü©,
  let W : sieve Y := sieve.generate (presieve.of_arrows QQ gg),
  specialize hF W _,
  { change ‚àÉ _, _,
    use presieve.of_arrows (Œª i, (QQ i).val) (Œª i, (gg i).val),
    split,
    { use [Œπ, infer_instance, (Œª i, (QQ i).val), (Œª i, (gg i).val)],
      refine ‚ü®_,rfl‚ü©,
      intros y,
      obtain ‚ü®i,t,ht‚ü© := surj (f y),
      obtain ‚ü®w,hw‚ü© := (X i).pres_œÄ_surjective t,
      obtain ‚ü®z,hz‚ü© := (PP i).pres_œÄ_surjective ‚ü®‚ü®y,w‚ü©,_‚ü©,
      swap, { dsimp, rw hw, exact ht.symm },
      use [i, z],
      dsimp [gg],
      rw hz, refl },
    { intros Z f hf,
      obtain ‚ü®i‚ü© := hf,
      change ‚àÉ _, _,
      use [(QQ i), gg i, ùüô _],
      split,
      { apply sieve.le_generate,
        apply presieve.of_arrows.mk },
      { ext1, simp } } },
  dsimp [presieve.is_separated_for] at hF,
  have : ‚àÄ (Z : ExtrDisc) (g : Z ‚ü∂ Y) (hg : W g),
    ‚àÉ (i : Œπ) (e : Z ‚ü∂ QQ i), g = e ‚â´ gg i,
  { intros Z g hg,
    obtain ‚ü®QQ',e‚ÇÅ,e‚ÇÇ,h1,h2‚ü© := hg,
    obtain ‚ü®i‚ü© := h1,
    use [i, e‚ÇÅ, h2.symm] },
  choose ii ee hee using this,
  let y : presieve.family_of_elements F W := Œª Z g hg,
    F.map (ee _ _ hg ‚â´ œÄœÄ _).op (xx (ii _ _ hg)),
  have hy : y.compatible,
  { intros T‚ÇÅ T‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ w,
    dsimp [y, xx],
    simp only [‚Üê F.map_comp, ‚Üê op_comp],
    change (F.map _ ‚â´ F.map _) _ = (F.map _ ‚â´ F.map _) _,
    simp only [‚Üê F.map_comp, ‚Üê op_comp],
    apply hx,
    apply_fun (Œª e, e ‚â´ f) at w,
    simp only [category.assoc] at w ‚ä¢,
    convert w using 2,
    { ext1,
      dsimp [œÄœÄ, ff],
      simp only [category.assoc],
      rw [‚Üê Profinite.pullback.condition, ‚Üê category.assoc],
      change ((ee T‚ÇÅ f‚ÇÅ h‚ÇÅ ‚â´ gg _) ‚â´ f).val = (f‚ÇÅ ‚â´ f).val,
      congr' 2,
      symmetry,
      apply hee },
    { ext1,
      dsimp [œÄœÄ, ff],
      simp only [category.assoc],
      rw [‚Üê Profinite.pullback.condition, ‚Üê category.assoc],
      change ((ee T‚ÇÇ f‚ÇÇ h‚ÇÇ ‚â´ gg _) ‚â´ f).val = (f‚ÇÇ ‚â´ f).val,
      congr' 2,
      symmetry,
      apply hee } },
  apply hF y (F.map f.op t) (x f hf),
  { intros L e he,
    dsimp [y],
    have := hee _ _ he,
    conv_lhs { rw this },
    rw ‚Üê ht,
    simp only [‚Üê comp_apply, ‚Üê F.map_comp, ‚Üê op_comp],
    change (F.map _ ‚â´ F.map _) _ = (F.map _ ‚â´ F.map _) _,
    simp_rw [‚Üê F.map_comp, ‚Üê op_comp],
    congr' 2,
    simp only [category.assoc],
    congr' 1,
    ext1,
    dsimp,
    simp [Profinite.pullback.condition] },
  { intros L e he,
    dsimp [y],
    have := hee _ _ he,
    conv_lhs { rw this },
    dsimp only [xx],
    simp only [‚Üê F.map_comp, ‚Üê op_comp],
    apply hx,
    simp only [category.assoc],
    congr' 1,
    ext1,
    dsimp,
    simp [Profinite.pullback.condition] }
end

theorem is_ExtrSheaf_of_types_iff (F : ExtrDisc·µí·µñ ‚•§ Type u') :
  is_ExtrSheaf_of_types F ‚Üî presieve.is_sheaf ExtrDisc.proetale_topology F :=
‚ü®Œª H, is_sheaf_ExtrDisc_proetale_topology_of_is_ExtrSheaf_of_types _ H,
  Œª H, is_ExtrSheaf_of_types_of_is_sheaf_ExtrDisc_proetale_topology _ H‚ü©

theorem is_ExtrSheaf_iff (C : Type u') [category.{v'} C]
  (F : ExtrDisc·µí·µñ ‚•§ C) :
  is_ExtrSheaf F ‚Üî presheaf.is_sheaf ExtrDisc.proetale_topology F :=
begin
  rw is_ExtrSheaf_iff_forall_yoneda,
  apply forall_congr (Œª T, _),
  apply is_ExtrSheaf_of_types_iff,
end

theorem is_sheaf_ExtrDisc_proetale_iff_product_condition
  (C : Type u') [category.{v'} C] [limits.has_finite_products C]
  (F : ExtrDisc·µí·µñ ‚•§ C) :
  presheaf.is_sheaf ExtrDisc.proetale_topology F ‚Üî ExtrDisc.finite_product_condition F :=
begin
  rw ‚Üê is_ExtrSheaf_iff,
  rw is_ExtrSheaf_iff_product_condition,
end

structure ExtrSheafProd (C : Type.{u'}) [category.{v'} C] [limits.has_finite_products C] :=
(val : ExtrDisc.{u}·µí·µñ ‚•§ C)
(cond : ExtrDisc.finite_product_condition val)

namespace ExtrSheafProd

variables (C : Type.{u'}) [category.{v'} C] [limits.has_finite_products C]

@[ext]
structure hom (X Y : ExtrSheafProd C) :=
mk :: (val : X.val ‚ü∂ Y.val)

@[simps]
instance : category (ExtrSheafProd C) :=
{ hom := hom C,
  id := Œª X, ‚ü®ùüô _‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val‚ü© }

end ExtrSheafProd

-- TODO: Break up this structure into individual components... it's too slow as is.
def ExtrSheaf_ExtrSheafProd_equiv (C : Type.{u'}) [category.{v'} C] [limits.has_finite_products C] :
  ExtrSheaf C ‚âå ExtrSheafProd C :=
{ functor :=
  { obj := Œª F, ‚ü®F.val,
      (is_sheaf_ExtrDisc_proetale_iff_product_condition _ _).mp F.2‚ü©,
    map := Œª F G f, ‚ü®f.val‚ü©,
    map_id' := Œª X, by { ext1, refl },
    map_comp' := Œª X Y Z f g, by { ext1, refl } },
  inverse :=
  { obj := Œª F, ‚ü®F.val,
      (is_sheaf_ExtrDisc_proetale_iff_product_condition _ _).mpr F.2‚ü©,
    map := Œª F G f, ‚ü®f.val‚ü©,
    map_id' := Œª X, by { ext1, refl },
    map_comp' := Œª X Y Z f g, by { ext1, refl } },
  unit_iso := nat_iso.of_components
    (Œª X,
    { hom := ‚ü®ùüô _‚ü©,
      inv := ‚ü®ùüô _‚ü©,
      hom_inv_id' := by { ext1, dsimp, simp },
      inv_hom_id' := by { ext1, dsimp, simp } })
    begin
      intros X Y f,
      ext1,
      dsimp,
      simp,
    end,
  counit_iso := nat_iso.of_components
    (Œª X,
    { hom := ‚ü®ùüô _‚ü©,
      inv := ‚ü®ùüô _‚ü©,
      hom_inv_id' := by { ext1, dsimp, simp },
      inv_hom_id' := by { ext1, dsimp, simp } })
    begin
      intros X Y f,
      ext1,
      dsimp,
      simp,
    end,
  functor_unit_iso_comp' := begin
    intros,
    ext1,
    dsimp,
    simp,
  end } .

def Condensed_ExtrSheafProd_equiv (C : Type.{u'}) [category.{u+1} C] [limits.has_limits C] :
  Condensed.{u} C ‚âå ExtrSheafProd.{u} C :=
(Condensed_ExtrSheaf_equiv C).symm.trans (ExtrSheaf_ExtrSheafProd_equiv C)

-- Sanity check
@[simp]
lemma Condensed_ExtrSheafProd_equiv_functor_obj_val
  {C : Type.{u'}} [category.{u+1} C] [limits.has_limits C] (F : Condensed C) :
  ((Condensed_ExtrSheafProd_equiv C).functor.obj F).val = ExtrDisc_to_Profinite.op ‚ãô F.val := rfl

def ExtrSheafProd_to_presheaf (C : Type.{u'}) [category.{v'} C]
  [limits.has_finite_products C] :
  ExtrSheafProd.{u} C ‚•§ ExtrDisc.{u}·µí·µñ ‚•§ C :=
{ obj := Œª F, F.val,
  map := Œª F G f, f.val,
  map_id' := Œª X, rfl,
  map_comp' := Œª X Y Z f g, rfl }

instance (C : Type.{u'}) [category.{v'} C]
  [limits.has_finite_products C] : full (ExtrSheafProd_to_presheaf C) :=
{ preimage := Œª X Y f, ‚ü®f‚ü©,
  witness' := Œª _ _ _, rfl }

instance (C : Type.{u'}) [category.{v'} C]
  [limits.has_finite_products C] : faithful (ExtrSheafProd_to_presheaf C) := {}

open category_theory.limits
--set_option pp.universes true

section

open_locale classical

namespace finite_product_colimit_setup
section

parameters {C : Type u'} [category.{u+1} C] [has_limits C] [has_colimits C]
  [has_zero_morphisms C] [has_finite_biproducts C]

parameters {J : Type (u+1)} [small_category J] (K : J ‚•§ ExtrSheafProd.{u} C)

parameters {Œπ : Type u} [fintype Œπ] (X : Œπ ‚Üí ExtrDisc.{u})

def KC : ExtrDisc.{u}·µí·µñ ‚•§ C := colimit (K ‚ãô ExtrSheafProd_to_presheaf C)

def P‚ÇÄ : C := ‚àè (Œª i,  KC.obj (op (X i)))
def P : C := ‚àè (Œª i : ulift.{u+1} Œπ,  KC.obj (op (X i.down)))
def S : C := ‚®Å (Œª i : ulift.{u+1} Œπ, KC.obj (op (X i.down)))

def prod_iso_P : P‚ÇÄ ‚âÖ P :=
{ hom := pi.lift $ Œª i, pi.œÄ _ _,
  inv := pi.lift $ Œª i, pi.œÄ _ ‚ü®i‚ü© ‚â´ (iso.refl _).hom,
  hom_inv_id' := by { ext ‚ü®j‚ü©, simp },
  inv_hom_id' := by { ext ‚ü®‚ü®j‚ü©‚ü©, simp }, }

def biprod_iso_P : P ‚âÖ S :=
{ hom := biproduct.lift $ Œª b, pi.œÄ _ _,
  inv := pi.lift $ Œª b, biproduct.œÄ _ _,
  hom_inv_id' := by { ext ‚ü®j‚ü©, simp },
  inv_hom_id' := begin
    apply biproduct.hom_ext, -- we need to choose the correct extensionality lemma here...
    intros i,
    simp,
  end }

def Q‚ÇÄ (j : J) : C := ‚àè (Œª i : Œπ, (K.obj j).val.obj (op (X i)))
def Q (j : J) : C := ‚àè (Œª i : ulift.{u+1} Œπ, (K.obj j).val.obj (op (X i.down)))
def T (j : J) : C := ‚®Å (Œª i : ulift.{u+1} Œπ, (K.obj j).val.obj (op (X i.down)))

def prod_iso_Q (j : J) : Q‚ÇÄ j ‚âÖ Q j :=
{ hom := pi.lift $ Œª b, pi.œÄ _ _,
  inv := pi.lift $ Œª b, pi.œÄ _ ‚ü®b‚ü© ‚â´ (iso.refl _).hom,
  hom_inv_id' := by { ext ‚ü®j‚ü©, simp },
  inv_hom_id' := by { ext ‚ü®‚ü®j‚ü©‚ü©, simp }, }

def biprod_iso_Q (j : J) : Q j ‚âÖ T j :=
{ hom := biproduct.lift $ Œª b, pi.œÄ _ _,
  inv := pi.lift $ Œª b, biproduct.œÄ _ _,
  hom_inv_id' := by { ext ‚ü®j‚ü©, simp },
  inv_hom_id' := begin
    apply biproduct.hom_ext, -- we need to choose the correct extensionality lemma here...
    intros i,
    simp,
  end }

def KQ‚ÇÄ (j) : (K.obj j).val.obj (op (ExtrDisc.sigma X)) ‚âÖ Q‚ÇÄ j :=
begin
  -- Lean is being annoying... again...
  let t : (K.obj j).val.obj (op (ExtrDisc.sigma X)) ‚ü∂ Q‚ÇÄ K X j :=
    pi.lift (Œª (i : Œπ), (K.obj j).val.map (ExtrDisc.sigma.Œπ X i).op),
  haveI : is_iso t := (K.obj j).cond Œπ X,
  exact as_iso t,
end

def map_Q‚ÇÄ {i j : J} (f : i ‚ü∂ j) : Q‚ÇÄ i ‚ü∂ Q‚ÇÄ j :=
  pi.lift $ Œª a, pi.œÄ _ a ‚â´ (K.map f).val.app _

def map_Q {i j : J} (f : i ‚ü∂ j) : Q i ‚ü∂ Q j :=
  pi.lift $ Œª a, pi.œÄ _ a ‚â´ (K.map f).val.app _

def map_T {i j : J} (f : i ‚ü∂ j) : T i ‚ü∂ T j :=
  biproduct.map $ Œª a, (K.map f).val.app _
--Œª a, biproduct.œÄ _ a ‚â´ (K.map f).val.app _

def Q‚ÇÄ_functor : J ‚•§ C :=
{ obj := Q‚ÇÄ,
  map := Œª i j f, map_Q‚ÇÄ f,
  map_id' := begin
    intros i,
    dsimp [map_Q‚ÇÄ],
    ext1 ‚ü®j‚ü©,
    simp,
  end,
  map_comp' := begin
    intros i j k f g,
    dsimp [map_Q‚ÇÄ],
    ext1,
    simp,
  end }

def Q_functor : J ‚•§ C :=
{ obj := Q,
  map := Œª i j f, map_Q f,
  map_id' := begin
    intros i, dsimp [map_Q], ext1 ‚ü®j‚ü©, simp,
  end,
  map_comp' := begin
    intros i j k f g, dsimp [map_Q], ext1, simp
  end }

def T_functor : J ‚•§ C :=
{ obj := T,
  map := Œª i j f, map_T f,
  map_id' := by { intros i, dsimp [map_T],
    apply biproduct.hom_ext, intros a, simp, erw category.id_comp },
  map_comp' := begin
    intros i j k f g,
    dsimp [map_T],
    apply biproduct.hom_ext,
    intros a,
    simp
  end }

def KQ‚ÇÄ_nat_iso :
  K ‚ãô ExtrSheafProd_to_presheaf _ ‚ãô (evaluation _ _).obj (op (ExtrDisc.sigma X)) ‚âÖ Q‚ÇÄ_functor :=
nat_iso.of_components (Œª j, KQ‚ÇÄ _)
begin
  intros i j f,
  dsimp [ExtrSheafProd_to_presheaf, Q‚ÇÄ_functor, KQ‚ÇÄ, map_Q‚ÇÄ],
  ext,
  simp,
end

def Q‚ÇÄQ_nat_iso : Q‚ÇÄ_functor ‚âÖ Q_functor :=
nat_iso.of_components (Œª j, prod_iso_Q _)
begin
  intros i j f,
  dsimp [Q‚ÇÄ_functor, prod_iso_Q, map_Q‚ÇÄ, Q_functor, map_Q],
  ext1,
  simp,
end

def QT_nat_iso : Q_functor ‚âÖ T_functor :=
nat_iso.of_components (Œª j, biprod_iso_Q _)
begin
  intros i j f,
  dsimp [Q_functor, biprod_iso_Q, map_T, T_functor, map_Q],
  apply biproduct.hom_ext, intros i,
  simp,
end

def colimit_KQ‚ÇÄ_nat_iso :
  KC ‚âÖ ((K ‚ãô ExtrSheafProd_to_presheaf _).flip ‚ãô colim) :=
colimit_iso_flip_comp_colim (K ‚ãô ExtrSheafProd_to_presheaf C)

def colimit_KQ‚ÇÄ_nat_iso_eval : KC.obj (op (ExtrDisc.sigma X)) ‚âÖ
  colimit (K ‚ãô ExtrSheafProd_to_presheaf _ ‚ãô (evaluation _ _).obj (op (ExtrDisc.sigma X))) :=
colimit_KQ‚ÇÄ_nat_iso.app _

def CT : C := ‚®Å (Œª i : ulift.{u+1} Œπ,
    colimit (K ‚ãô ExtrSheafProd_to_presheaf _ ‚ãô (evaluation _ _).obj (op (X i.down))))

def ct_iso (i : ulift.{u+1} Œπ) :
  (colimit (K ‚ãô ExtrSheafProd_to_presheaf _)).obj (op (X i.down)) ‚âÖ
  colimit (K ‚ãô ExtrSheafProd_to_presheaf _ ‚ãô (evaluation _ _).obj (op (X i.down))) :=
colimit_KQ‚ÇÄ_nat_iso.app _

def CT_iso : CT ‚âÖ S :=
{ hom := biproduct.map $ Œª b, (ct_iso _).inv,
  inv := biproduct.map $ Œª b, (ct_iso _).hom,
  hom_inv_id' := begin
    ext1,
    simp,
    erw category.comp_id,
  end,
  inv_hom_id' := begin
    ext1,
    simp,
    erw category.comp_id,
  end }

-- This is the main point where we prove that colimits commute with biproducts.
-- The rest is glue.
def colimit_T_iso : colimit T_functor ‚âÖ CT :=
{ hom := colimit.desc T_functor ‚ü®CT,
  { app := Œª j, biproduct.map $ Œª i,
      colimit.Œπ (K ‚ãô ExtrSheafProd_to_presheaf C ‚ãô
      (evaluation ExtrDisc·µí·µñ C).obj (op (X i.down))) j,
    naturality' := begin
      intros a b f,
      dsimp [T_functor, map_T],
      apply biproduct.hom_ext',
      intros i,
      simp,
      rw ‚Üê colimit.w _ f,
      simp only [category.assoc],
      refl,
    end }‚ü©,
  inv := biproduct.desc $ Œª b,
    colimit.desc (K ‚ãô ExtrSheafProd_to_presheaf _ ‚ãô
    (evaluation _ _).obj (op (X b.down))) ‚ü®colimit T_functor,
  { app := Œª j, begin
      dsimp [ExtrSheafProd_to_presheaf, T_functor, T],
      apply biproduct.Œπ _ b,
    end ‚â´ colimit.Œπ _ j,
    naturality' := begin
      intros i j f,
      dsimp [ExtrSheafProd_to_presheaf],
      simp,
      rw ‚Üê colimit.w _ f,
      dsimp only [T_functor, map_T],
      simp,
    end }‚ü©,
  hom_inv_id' := begin
    ext1 j,
    dsimp,
    apply biproduct.hom_ext',
    intros b,
    simp,
  end,
  inv_hom_id' := begin
    apply biproduct.hom_ext',
    intros b,
    simp,
    apply colimit.hom_ext,
    intros j,
    simp,
    erw category.comp_id,
  end }

-- We want this to be an isomorphism.
def t : KC.obj (op (ExtrDisc.sigma X)) ‚ü∂ P‚ÇÄ :=
  pi.lift $ Œª i, KC.map (ExtrDisc.sigma.Œπ _ _).op

lemma key_lemma : t =
  colimit_KQ‚ÇÄ_nat_iso_eval.hom ‚â´
  (has_colimit.iso_of_nat_iso KQ‚ÇÄ_nat_iso).hom ‚â´
  (has_colimit.iso_of_nat_iso Q‚ÇÄQ_nat_iso).hom ‚â´
  (has_colimit.iso_of_nat_iso QT_nat_iso).hom ‚â´
  colimit_T_iso.hom ‚â´ CT_iso.hom ‚â´
  biprod_iso_P.inv ‚â´ prod_iso_P.inv :=
begin
  dsimp [prod_iso_P, biprod_iso_P, CT_iso, colimit_T_iso, colimit_KQ‚ÇÄ_nat_iso_eval, t,
    colimit_KQ‚ÇÄ_nat_iso, KC, ct_iso],
  ext : 2,
  simp,
  erw colimit.Œπ_desc_assoc,
  dsimp [cocones.precompose, KQ‚ÇÄ_nat_iso, Q‚ÇÄQ_nat_iso, QT_nat_iso, KQ‚ÇÄ,
    prod_iso_Q, biprod_iso_Q],
  simp,
  erw colimit.Œπ_desc,
  dsimp,
  simp,
end

theorem main : is_iso t :=
begin
  rw key_lemma,
  apply is_iso.comp_is_iso, -- ;-)
end

end
end finite_product_colimit_setup

variables {C : Type u'} [category.{u+1} C] [has_limits C] [has_colimits C]
  [has_zero_morphisms C] [has_finite_biproducts C]

lemma finite_product_condition_holds_for_colimit
  {J : Type (u+1)} [small_category J] (K : J ‚•§ ExtrSheafProd.{u} C) [has_colimits C] :
  ExtrDisc.finite_product_condition (colimit (K ‚ãô ExtrSheafProd_to_presheaf C)) :=
begin
  introsI Œπ _ X,
  dsimp,
  apply finite_product_colimit_setup.main,
end

instance ExtrSheafProd_to_presheaf_creates_colimit
  {J : Type (u+1)} [small_category J] (K : J ‚•§ ExtrSheafProd.{u} C) [has_colimits C] :
  creates_colimit K (ExtrSheafProd_to_presheaf.{u} C) :=
creates_colimit_of_fully_faithful_of_iso
‚ü®colimit (K ‚ãô ExtrSheafProd_to_presheaf _), finite_product_condition_holds_for_colimit _‚ü© $
eq_to_iso rfl

instance ExtrSheafProd_to_presheaf_creates_colimits_of_shape
  {J : Type (u+1)} [small_category J] [has_colimits C] :
  creates_colimits_of_shape J (ExtrSheafProd_to_presheaf.{u} C) :=
‚ü®Œª K,
{ reflects := begin
    intros c hc,
    haveI : has_colimit (K ‚ãô ExtrSheafProd_to_presheaf C) := has_colimit.mk ‚ü®_,hc‚ü©,
    apply is_colimit_of_reflects (ExtrSheafProd_to_presheaf.{u} C),
    assumption,
  end,
  lifts := Œª c hc,
  { lifted_cocone := begin
      haveI : has_colimit (K ‚ãô ExtrSheafProd_to_presheaf C) := has_colimit.mk ‚ü®_,hc‚ü©,
      exact lift_colimit hc,
    end,
    valid_lift := begin
      haveI : has_colimit (K ‚ãô ExtrSheafProd_to_presheaf C) := has_colimit.mk ‚ü®_,hc‚ü©,
      apply lifted_colimit_maps_to_original,
    end } }‚ü©

instance ExtrSheafProd_to_presheaf_creates_colimits [has_colimits C] :
  creates_colimits (ExtrSheafProd_to_presheaf.{u} C) := by constructor

-- Forgetting to presheaves, and restricting to `ExtrDisc` creates colimits.
instance Condensed_to_ExtrDisc_presheaf_creates_colimits [has_colimits C] :
  creates_colimits
  ((Sheaf_to_presheaf _ _ : Condensed C ‚•§ _) ‚ãô
  (whiskering_left _ _ _).obj (ExtrDisc_to_Profinite.op)) :=
begin
  change creates_colimits
    ((Condensed_ExtrSheafProd_equiv C).functor ‚ãô ExtrSheafProd_to_presheaf C),
  apply_with category_theory.comp_creates_colimits { instances := ff}; apply_instance
end

end
