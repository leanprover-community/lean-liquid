import pseudo_normed_group.category
import data.set.intervals
import for_mathlib.Profinite.extend
import condensed.ab

.

open_locale big_operators

universe u
variable (S : Fintype.{u})

@[derive add_comm_group]
def free_pfpng := S ‚Üí ‚Ñ§

noncomputable theory
open_locale classical

instance : has_nnnorm (free_pfpng S) :=
‚ü®Œª f, ‚àë s, ‚à•f s‚à•‚Çä‚ü©

namespace free_pfpng

@[simp] lemma nnnorm_zero : ‚à•(0 : free_pfpng S)‚à•‚Çä = 0 :=
by { change ‚àë _, _ = _, simp }

@[simp] lemma nnnorm_neg (f : free_pfpng S) : ‚à•(-f)‚à•‚Çä = ‚à•f‚à•‚Çä :=
by { change ‚àë _, _ = _, simpa }

lemma nnnorm_add (f‚ÇÅ f‚ÇÇ : free_pfpng S) : ‚à•f‚ÇÅ + f‚ÇÇ‚à•‚Çä ‚â§ ‚à•f‚ÇÅ‚à•‚Çä + ‚à•f‚ÇÇ‚à•‚Çä :=
begin
  change ‚àë _, _ ‚â§ ‚àë _, _ + ‚àë _, _,
  rw ‚Üê finset.sum_add_distrib,
  apply finset.sum_le_sum,
  intros s _,
  apply nnnorm_add_le,
end

instance (c) : topological_space { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c } := ‚ä•
instance (c) : discrete_topology { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c } := ‚ü®rfl‚ü©

lemma norm_eval_le {c : nnreal} {s : S}
  (f : free_pfpng S) (hf : ‚à•f‚à•‚Çä ‚â§ c) : ‚à•f s‚à•‚Çä ‚â§ c :=
le_trans (begin
  apply @finset.single_le_sum S nnreal _ (Œª t, ‚à•f t‚à•‚Çä) finset.univ,
  { intros _ _, apply zero_le },
  { exact finset.mem_univ s }
end) hf

instance (c) : fintype { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c } :=
begin
  let A := { f : free_pfpng S | ‚à•f‚à•‚Çä ‚â§ c },
  have h : ‚àÉ (N : ‚Ñï), c ‚â§ N := ‚ü®nat.ceil c, nat.le_ceil c‚ü©,
  let N := h.some, let hN : c ‚â§ N := h.some_spec,
  let Œπ : A ‚Üí S ‚Üí set.Icc (-(N : ‚Ñ§)) N :=
    Œª a s, ‚ü®a.1 s, _, _‚ü©,
  rotate,
  { -- I'm sure there is a more efficient way to do this...
    have : - ‚à•a.val s‚à• ‚â§ a.val s := neg_abs_le_self ‚Üë(a.val s),
    replace this : - (c : ‚Ñù) ‚â§ a.val s := le_trans _ this,
    swap,
    { simp only [subtype.val_eq_coe, neg_le_neg_iff],
      exact_mod_cast (norm_eval_le S a.val a.2) },
    replace this : -(N : ‚Ñù) ‚â§ _ := le_trans _ this,
    swap,
    { rw [neg_le_neg_iff], exact_mod_cast hN },
    exact_mod_cast this },
  { have : ‚Üë(a.val s) ‚â§ ‚à•a.val s‚à• := le_max_left _ _,
    replace this : ‚Üë(a.val s) ‚â§ (c : ‚Ñù) := le_trans this _,
    swap, { exact_mod_cast (norm_eval_le S a.val a.2) },
    replace this := le_trans this hN,
    push_cast at this,
    exact_mod_cast this },
  have : function.injective Œπ,
  { rintros ‚ü®f,hf‚ü© ‚ü®g,hg‚ü© h,
    ext s,
    apply_fun (Œª e, (e s).1) at h,
    assumption },
  apply fintype.of_injective Œπ this,
end

instance : profinitely_filtered_pseudo_normed_group (free_pfpng S) :=
{ filtration := Œª c, { f | ‚à• f ‚à•‚Çä ‚â§ c },
  filtration_mono := Œª c‚ÇÅ c‚ÇÇ h f hf, le_trans hf h,
  zero_mem_filtration := Œª c, by simp,
  neg_mem_filtration := Œª c f hf, by simpa,
  add_mem_filtration := Œª c‚ÇÅ c‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ,
    le_trans (nnnorm_add _ _ _) (add_le_add h‚ÇÅ h‚ÇÇ),
  continuous_add' := Œª c‚ÇÅ c‚ÇÇ,
    continuous_of_discrete_topology,
  continuous_neg' := Œª c, continuous_of_discrete_topology,
  continuous_cast_le := Œª _ _ _, continuous_of_discrete_topology,
  ..(infer_instance : add_comm_group (free_pfpng S)) }

def map {S‚ÇÅ S‚ÇÇ : Fintype.{u}} (g : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  strict_comphaus_filtered_pseudo_normed_group_hom
  (free_pfpng S‚ÇÅ) (free_pfpng S‚ÇÇ) :=
{ to_fun := Œª f s, ‚àë t in finset.univ.filter (Œª w, g w = s), f t,
  map_zero' := by simpa,
  map_add' := Œª f g, by simpa [finset.sum_add_distrib],
  strict' := begin
    intros c f hf,
    refine le_trans _ hf,
    change ‚àë s‚ÇÇ, ‚à•(‚àë t in finset.univ.filter (Œª w, g w = s‚ÇÇ), f t)‚à•‚Çä ‚â§
      ‚àë s‚ÇÅ, _,
    have : ‚àë s‚ÇÇ, ‚à•(‚àë t in finset.univ.filter (Œª w, g w = s‚ÇÇ), f t)‚à•‚Çä ‚â§
      ‚àë s‚ÇÇ : S‚ÇÇ, ‚àë t in finset.univ.filter (Œª w, g w = s‚ÇÇ), ‚à•f t‚à•‚Çä,
    { apply finset.sum_le_sum,
      intros i _,
      apply nnnorm_sum_le },
    refine le_trans this _,
    rw ‚Üê finset.sum_bUnion,
    apply le_of_eq,
    apply finset.sum_congr,
    { rw finset.eq_univ_iff_forall,
      intros x,
      rw finset.mem_bUnion,
      use [g x, by simp] },
    { intros s‚ÇÅ _, refl },
    { intros x _ y _ h,
      rintros a hh,
      apply h,
      simp only [finset.inf_eq_inter, finset.mem_inter, finset.mem_filter,
        finset.mem_univ, true_and] at hh,
      rw [‚Üê hh.1, ‚Üê hh.2] }
  end,
  continuous' := Œª c, continuous_of_discrete_topology }

@[simp]
lemma map_id : map (ùüô S) =
  strict_comphaus_filtered_pseudo_normed_group_hom.id :=
begin
  ext s,
  dsimp [map],
  simp [finset.filter_congr_decidable, finset.sum_filter],
end

@[simp]
lemma map_comp {S‚ÇÅ S‚ÇÇ S‚ÇÉ : Fintype.{u}}
  (g‚ÇÅ : S‚ÇÅ ‚ü∂ S‚ÇÇ) (g‚ÇÇ : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  map (g‚ÇÅ ‚â´ g‚ÇÇ) =
  (map g‚ÇÇ).comp (map g‚ÇÅ) :=
begin
  ext s‚ÇÉ,
  dsimp [map],
  erw ‚Üê finset.sum_bUnion,
  apply finset.sum_congr,
  { ext s,
    split,
    { intro h, simp only [finset.mem_filter, finset.mem_univ, true_and] at h,
      rw finset.mem_bUnion,
      use [g‚ÇÅ s, by simpa] },
    { intro h, simp only [finset.mem_bUnion, finset.mem_filter,
      finset.mem_univ, true_and, exists_prop, exists_eq_right'] at h,
      simpa, } },
  { intros s‚ÇÅ h,
    rw finset.mem_bUnion at h },
  { intros x hx y hy,
    simp only [finset.coe_filter, finset.coe_univ, set.sep_univ,
      set.mem_set_of_eq] at hx hy,
    intros h a ha,
    simp only [finset.inf_eq_inter, finset.mem_inter, finset.mem_filter,
      finset.mem_univ, true_and] at ha,
    apply h, rw [‚Üê ha.1, ‚Üê ha.2] }
end

end free_pfpng

@[simps]
def free_pfpng_functor : Fintype ‚•§ ProFiltPseuNormGrp‚ÇÅ :=
{ obj := Œª S,
  { M := free_pfpng S,
    exhaustive' := Œª f, ‚ü®‚à•f‚à•‚Çä, le_refl _‚ü© },
  map := Œª S‚ÇÅ S‚ÇÇ f, free_pfpng.map f,
  map_id' := free_pfpng.map_id,
  map_comp' := Œª _ _ _ g‚ÇÅ g‚ÇÇ, free_pfpng.map_comp g‚ÇÅ g‚ÇÇ }

def Fintype.free_pfpng (T : Fintype) : ProFiltPseuNormGrp‚ÇÅ :=
free_pfpng_functor.obj T

def Fintype.free_pfpng_unit :
  Fintype.to_Profinite ‚ü∂ free_pfpng_functor ‚ãô ProFiltPseuNormGrp‚ÇÅ.level.obj 1 :=
{ app := Œª S,
  { to_fun := Œª s,
    { val := Œª t, if s = t then 1 else 0,
      property := begin
        show finset.sum _ _ ‚â§ _,
        rw finset.sum_eq_single_of_mem,
        swap 4, { exact s }, swap 2, { apply finset.mem_univ },
        { dsimp, rw [if_pos rfl, nnnorm_one], },
        rintro t - ht, dsimp, rw [if_neg ht.symm, nnnorm_zero],
      end },
    continuous_to_fun := continuous_bot },
  naturality' := Œª S T f, begin
    ext s t,
    delta ProFiltPseuNormGrp‚ÇÅ.level,
    simp only [Fintype.to_Profinite_map_apply, Profinite.coe_comp, continuous_map.coe_mk,
      function.comp_app, subtype.coe_mk, category_theory.functor.comp_map, free_pfpng_functor_map,
      pseudo_normed_group.level_coe, subtype.coe_mk, free_pfpng.map, finset.mem_filter, true_and,
      finset.mem_univ, strict_comphaus_filtered_pseudo_normed_group_hom.coe_mk, finset.sum_ite_eq],
  end }

def Profinite.free_pfpng (S : Profinite) : ProFiltPseuNormGrp‚ÇÅ :=
(Profinite.extend free_pfpng_functor).obj S

open category_theory
open category_theory.limits

def Profinite.free_pfpng_level_iso (S : Profinite.{u}) (r) :
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).obj S.free_pfpng ‚âÖ
  limits.limit (S.fintype_diagram ‚ãô free_pfpng_functor ‚ãô ProFiltPseuNormGrp‚ÇÅ.level.obj r) :=
(is_limit_of_preserves (ProFiltPseuNormGrp‚ÇÅ.level.obj r)
  (limit.is_limit _)).cone_point_unique_up_to_iso $ limit.is_limit _

def Profinite.to_free_pfpng (S : Profinite.{u}) :
  S ‚ü∂ (ProFiltPseuNormGrp‚ÇÅ.level.obj 1).obj S.free_pfpng :=
(limit.is_limit _).map S.as_limit_cone (whisker_left _ $ Fintype.free_pfpng_unit.{u u}) ‚â´
(S.free_pfpng_level_iso 1).inv

--(limits.is_limit_of_preserves (ProFiltPseuNormGrp‚ÇÅ.level.obj 1) (limits.limit.is_limit _)).map
--  S.as_limit_cone $ whisker_left _ (Fintype.free_pfpng_unit) ‚â´ (functor.associator _ _ _).inv

def Profinite.free_pfpng_œÄ (S : Profinite) (T : discrete_quotient S) :
  S.free_pfpng ‚ü∂ (Fintype.of T).free_pfpng :=
category_theory.limits.limit.œÄ _ _

lemma Profinite.free_pfpng_œÄ_w (S : Profinite) {T‚ÇÅ T‚ÇÇ : discrete_quotient S} (f : T‚ÇÅ ‚ü∂ T‚ÇÇ) :
  Profinite.free_pfpng_œÄ S T‚ÇÅ ‚â´ (S.fintype_diagram ‚ãô free_pfpng_functor).map f =
  Profinite.free_pfpng_œÄ S T‚ÇÇ :=
category_theory.limits.limit.w (S.fintype_diagram ‚ãô free_pfpng_functor) _
