import category_theory.sites.sheaf

open category_theory opposite

universes w v u v' u'

variables {C : Type u} [category.{v} C]

namespace category_theory.presieve

lemma mem_of_arrows_iff {Œπ} {B Y} (X : Œπ ‚Üí C) (f : Œ† i, X i ‚ü∂ B) (g : Y ‚ü∂ B) :
  of_arrows X f g ‚Üî ‚àÉ (i : Œπ) (hi : Y = X i), g = eq_to_hom hi ‚â´ f i :=
begin
  split,
  { rintros ‚ü®i‚ü©,
    use [i, rfl],
    simp },
  { rintros ‚ü®i,rfl,rfl‚ü©,
    simp [of_arrows.mk i] }
end

noncomputable theory

def index_of_arrows {Œπ} {B Y} {X : Œπ ‚Üí C} {f : Œ† i, X i ‚ü∂ B} {g : Y ‚ü∂ B}
  (h : of_arrows X f g) : Œπ :=
((mem_of_arrows_iff X f g).mp h).some

lemma eq_obj_of_arrows {Œπ} {B Y} {X : Œπ ‚Üí C} {f : Œ† i, X i ‚ü∂ B} {g : Y ‚ü∂ B}
  (h : of_arrows X f g) : Y = X (index_of_arrows h) :=
((mem_of_arrows_iff X f g).mp h).some_spec.some

@[simp]
lemma eq_hom_of_arrows {Œπ} {B Y} {X : Œπ ‚Üí C} {f : Œ† i, X i ‚ü∂ B} {g : Y ‚ü∂ B}
  (h : of_arrows X f g) : eq_to_hom (eq_obj_of_arrows h) ‚â´ f _ = g :=
((mem_of_arrows_iff X f g).mp h).some_spec.some_spec.symm

def mk_family_of_elements_of_arrows {Œπ} {B} (X : Œπ ‚Üí C) (f : Œ† i, X i ‚ü∂ B)
  (F : C·µí·µñ ‚•§ Type w) (x : Œ† i, F.obj (op (X i))) :
  (of_arrows X f).family_of_elements F := Œª Y f hf,
F.map (eq_to_hom $ eq_obj_of_arrows hf).op (x $ index_of_arrows hf)

lemma mk_family_of_elements_of_arrows_compatible
  {Œπ} {B} (X : Œπ ‚Üí C) (f : Œ† i, X i ‚ü∂ B)
  (F : C·µí·µñ ‚•§ Type w) (x : Œ† i, F.obj (op (X i)))
  (hx : ‚àÄ (i j : Œπ) Z (g‚ÇÅ : Z ‚ü∂ X i) (g‚ÇÇ : Z ‚ü∂ X j),
    g‚ÇÅ ‚â´ f _ = g‚ÇÇ ‚â´ f _ ‚Üí F.map g‚ÇÅ.op (x _) = F.map g‚ÇÇ.op (x _)) :
  (mk_family_of_elements_of_arrows X f F x).compatible :=
begin
  intros X Y Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ h,
  dsimp [mk_family_of_elements_of_arrows],
  specialize hx (index_of_arrows h‚ÇÅ) (index_of_arrows h‚ÇÇ) Z
    (g‚ÇÅ ‚â´ eq_to_hom (eq_obj_of_arrows h‚ÇÅ))
    (g‚ÇÇ ‚â´ eq_to_hom (eq_obj_of_arrows h‚ÇÇ)) (by simpa),
  convert hx using 1; simp,
end

lemma mk_family_of_elements_of_arrows_eval
  {Œπ} {B} (X : Œπ ‚Üí C) (f : Œ† i, X i ‚ü∂ B)
  (F : C·µí·µñ ‚•§ Type w) (x : Œ† i, F.obj (op (X i)))
  (hx : ‚àÄ (i j : Œπ) Z (g‚ÇÅ : Z ‚ü∂ X i) (g‚ÇÇ : Z ‚ü∂ X j),
    g‚ÇÅ ‚â´ f _ = g‚ÇÇ ‚â´ f _ ‚Üí F.map g‚ÇÅ.op (x _) = F.map g‚ÇÇ.op (x _)) (i : Œπ) :
  (mk_family_of_elements_of_arrows X f F x) (f i) (presieve.of_arrows.mk i) = x i :=
begin
  have : X i = X (index_of_arrows (presieve.of_arrows.mk i)),
  { fapply eq_obj_of_arrows },
  rotate 2, exact f,
  dsimp [mk_family_of_elements_of_arrows],
  specialize hx i (index_of_arrows (presieve.of_arrows.mk i)),
  rotate 3, exact X, exact f,
  specialize hx (X i) (ùüô _) (eq_to_hom this) (by simp),
  simp at hx,
  simpa using hx.symm,
end

end category_theory.presieve
