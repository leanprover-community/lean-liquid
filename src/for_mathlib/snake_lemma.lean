import category_theory.preadditive
import category_theory.abelian.projective
import data.matrix.notation
import tactic.interval_cases
import category_theory.abelian.pseudoelements

import for_mathlib.short_exact_sequence
import for_mathlib.abelian_category
import for_mathlib.fin_functor
import for_mathlib.exact_seq

noncomputable theory

open category_theory
open category_theory.limits
open_locale pseudoelement

universe variables v u

namespace eq

variables {X : Type*} {x y : X} (h : x = y)

@[nolint unused_arguments]
abbreviation lhs (h : x = y) := x

@[nolint unused_arguments]
abbreviation rhs (h : x = y) := y

@[simp] lemma lhs_def : h.lhs = x := rfl
@[simp] lemma rhs_def : h.rhs = y := rfl

end eq

namespace category_theory

/-- The base diagram for the snake lemma. The object are indexed by `fin 4 √ó fin 3`:

(0,0) --> (0,1) --> (0,2)              | the kernels
  |         |         |
  v         v         v
(1,0) --> (1,1) --> (1,2)              | the first exact row
  |         |         |
  v         v         v
(2,0) --> (2,1) --> (2,2)              | the second exact row
  |         |         |
  v         v         v
(3,0) --> (3,1) --> (3,2)              | the cokernels

-/
@[derive [preorder, decidable_eq]]
def snake_diagram := fin 4 √ó fin 3

namespace snake_diagram

@[simps]
def o (i : fin 4) (j : fin 3) : snake_diagram := (i,j)

@[simp] lemma o_le_o (i j : fin 4) (k l : fin 3) :
  o i k ‚â§ o j l ‚Üî i ‚â§ j ‚àß k ‚â§ l := iff.rfl

meta def hom_tac : tactic unit :=
`[simp only [category_theory.snake_diagram.o_le_o,
      category_theory.snake_diagram.o_fst, category_theory.snake_diagram.o_snd,
      prod.le_def, and_true, true_and, le_refl],
  dec_trivial! ]

def hom (i j : snake_diagram) (hij : i ‚â§ j . hom_tac) : i ‚ü∂ j := hom_of_le hij

lemma hom_ext {i j : snake_diagram} (f g : i ‚ü∂ j) : f = g := by ext

section

meta def map_tac : tactic unit :=
`[dsimp only [mk_functor, mk_functor.map', eq_to_hom_refl, hom_of_le_refl, true_and, le_refl],
  simp only [category.id_comp, category.comp_id, functor.map_id],
  refl]

parameters {C : Type u} [category.{v} C]

parameters (F : fin 4 ‚Üí fin 3 ‚Üí C)
parameters (f0 : F 0 0 ‚ü∂ F 0 1) (g0 : F 0 1 ‚ü∂ F 0 2)
parameters (a0 : F 0 0 ‚ü∂ F 1 0) (b0 : F 0 1 ‚ü∂ F 1 1) (c0 : F 0 2 ‚ü∂ F 1 2)
parameters (f1 : F 1 0 ‚ü∂ F 1 1) (g1 : F 1 1 ‚ü∂ F 1 2)
parameters (a1 : F 1 0 ‚ü∂ F 2 0) (b1 : F 1 1 ‚ü∂ F 2 1) (c1 : F 1 2 ‚ü∂ F 2 2)
parameters (f2 : F 2 0 ‚ü∂ F 2 1) (g2 : F 2 1 ‚ü∂ F 2 2)
parameters (a2 : F 2 0 ‚ü∂ F 3 0) (b2 : F 2 1 ‚ü∂ F 3 1) (c2 : F 2 2 ‚ü∂ F 3 2)
parameters (f3 : F 3 0 ‚ü∂ F 3 1) (g3 : F 3 1 ‚ü∂ F 3 2)
parameters (sq00 : a0 ‚â´ f1 = f0 ‚â´ b0) (sq01 : b0 ‚â´ g1 = g0 ‚â´ c0)
parameters (sq10 : a1 ‚â´ f2 = f1 ‚â´ b1) (sq11 : b1 ‚â´ g2 = g1 ‚â´ c1)
parameters (sq20 : a2 ‚â´ f3 = f2 ‚â´ b2) (sq21 : b2 ‚â´ g3 = g2 ‚â´ c2)

namespace mk_functor

def col : Œ† (j : fin 3), fin 4 ‚•§ C
| ‚ü®0,h‚ü© := fin4_functor_mk (flip F 0) a0 a1 a2
| ‚ü®1,h‚ü© := fin4_functor_mk (flip F 1) b0 b1 b2
| ‚ü®2,h‚ü© := fin4_functor_mk (flip F 2) c0 c1 c2
| ‚ü®j+3,h‚ü© := by { exfalso, revert h, dec_trivial }

def row : Œ† (i : fin 4), fin 3 ‚•§ C
| ‚ü®0,h‚ü© := fin3_functor_mk (F 0) f0 g0
| ‚ü®1,h‚ü© := fin3_functor_mk (F 1) f1 g1
| ‚ü®2,h‚ü© := fin3_functor_mk (F 2) f2 g2
| ‚ü®3,h‚ü© := fin3_functor_mk (F 3) f3 g3
| ‚ü®j+4,h‚ü© := by { exfalso, revert h, dec_trivial }

lemma col_obj (i : fin 4) (j : fin 3) : (col j).obj i = F i j :=
by fin_cases i; fin_cases j; refl.

lemma row_obj (i : fin 4) (j : fin 3) : (row i).obj j = F i j :=
by fin_cases i; fin_cases j; refl.

lemma row_eq_col_obj (i : fin 4) (j : fin 3) : (row i).obj j = (col j).obj i :=
(row_obj i j).trans (col_obj i j).symm

def map'  (x y : snake_diagram) (h : x ‚â§ y) : F x.1 x.2 ‚ü∂ F y.1 y.2 :=
eq_to_hom (by rw [row_obj]) ‚â´
(row x.1).map h.2.hom ‚â´ eq_to_hom (by rw [row_obj, col_obj]) ‚â´
(col y.2).map h.1.hom ‚â´ eq_to_hom (by rw [col_obj])

lemma map'_id (x : snake_diagram) : map' x x le_rfl = ùüô _ :=
by simp only [map', hom_of_le_refl, functor.map_id,
  eq_to_hom_trans, category.id_comp, eq_to_hom_refl]

def square_commutes (i j : fin 4) (k l : fin 3) (hij : i ‚â§ j) (hkl : k ‚â§ l) : Prop :=
(col k).map hij.hom ‚â´ eq_to_hom (by rw [row_obj, col_obj]) ‚â´
(row j).map hkl.hom =
eq_to_hom (by rw [col_obj]; refl) ‚â´
map' (o i k) (o j l) ‚ü®hij, hkl‚ü© ‚â´ eq_to_hom (by rw [row_obj]; refl)

include sq00 sq01 sq10 sq11 sq20 sq21

lemma square_commutes_row (i : fin 4) (k l : fin 3) (hkl : k ‚â§ l) :
  square_commutes i i k l le_rfl hkl :=
begin
  dsimp [square_commutes, map'],
  simp only [map', hom_of_le_refl, functor.map_id, eq_to_hom_trans, eq_to_hom_trans_assoc,
    category.id_comp, category.comp_id, category.assoc],
  erw [hom_of_le_refl],
  simp only [map', hom_of_le_refl, functor.map_id, eq_to_hom_trans, eq_to_hom_trans_assoc,
    category.id_comp, category.comp_id, category.assoc],
  rw [‚Üê category.assoc, eq_comm],
  convert category.comp_id _,
end

lemma square_commutes_col (i j : fin 4) (k : fin 3) (hij : i ‚â§ j) :
  square_commutes i j k k hij le_rfl :=
begin
  dsimp [square_commutes, map'],
  simp only [map', hom_of_le_refl, functor.map_id, eq_to_hom_trans, eq_to_hom_trans_assoc,
    category.id_comp, category.comp_id, category.assoc],
  erw [hom_of_le_refl],
  simp only [map', hom_of_le_refl, functor.map_id, eq_to_hom_trans, eq_to_hom_trans_assoc,
    category.id_comp, category.comp_id, category.assoc],
  rw [eq_comm],
  convert category.id_comp _,
end

lemma square_commutes_one (i : fin 4) (j : fin 3) (hi : i < 3) (hj : j < 2) :
  square_commutes i (i+1) j (j+1) (by dec_trivial!) (by dec_trivial!) :=
begin
  fin_cases i, swap 4, { exfalso, revert hi, dec_trivial },
  all_goals { fin_cases j, swap 3, { exfalso, revert hj, dec_trivial },
    all_goals {
      simp only [square_commutes, map', eq_to_hom_refl, category.comp_id, category.id_comp],
      assumption }, },
end
.

lemma square_commutes_comp_row (i j k : fin 4) (l m : fin 3)
  (hij : i ‚â§ j) (hjk : j ‚â§ k) (hlm : l ‚â§ m)
  (h1 : square_commutes i j l m hij hlm) (h2 : square_commutes j k l m hjk hlm) :
  square_commutes i k l m (hij.trans hjk) hlm :=
begin
  dsimp [square_commutes, map'] at h1 h2 ‚ä¢,
  simp only [map', hom_of_le_refl, functor.map_id, eq_to_hom_trans, eq_to_hom_trans_assoc,
    category.id_comp, category.comp_id, category.assoc] at h1 h2 ‚ä¢,
  let œÜ : _ := _, let œà : _ := _,
  calc _ = œÜ ‚â´ h2.lhs : _
     ... = œÜ ‚â´ h2.rhs : by { congr' 1, }
     ... = h1.lhs ‚â´ œà : _
     ... = h1.rhs ‚â´ œà : by { congr' 1, }
     ... = _ : _,
  swap 5, { exact functor.map _ hij.hom },
  swap 4, { refine (eq_to_hom _ ‚â´ _ ‚â´ eq_to_hom _),
    swap 2, { apply row_eq_col_obj; assumption },
    swap 3, { symmetry, apply row_eq_col_obj; assumption },
    exact functor.map _ hjk.hom },
  all_goals { dsimp [œÜ, œà, eq.lhs_def, eq.rhs_def] },
  { simp only [‚Üê functor.map_comp_assoc], refl },
  { simp only [category.assoc], refl },
  { simp only [eq_to_hom_trans, eq_to_hom_trans_assoc, category.assoc],
    dsimp,
    simp only [hom_of_le_refl, eq_to_hom_trans, eq_to_hom_trans_assoc,
      category.id_comp, category.comp_id, category.assoc, ‚Üê functor.map_comp_assoc],
    refl, },
end

lemma square_commutes_comp_col (i j : fin 4) (l m n : fin 3)
  (hij : i ‚â§ j) (hlm : l ‚â§ m) (hmn : m ‚â§ n)
  (h1 : square_commutes i j l m hij hlm) (h2 : square_commutes i j m n hij hmn) :
  square_commutes i j l n hij (hlm.trans hmn) :=
begin
  dsimp [square_commutes, map'] at h1 h2 ‚ä¢,
  simp only [map', hom_of_le_refl, functor.map_id, eq_to_hom_trans, eq_to_hom_trans_assoc,
    category.id_comp, category.comp_id, category.assoc] at h1 h2 ‚ä¢,
  let œÜ : _ := _, let œà : _ := _,
  calc _ = h1.lhs ‚â´ œÜ : _
     ... = h1.rhs ‚â´ œÜ : by { congr' 1, }
     ... = œà ‚â´ h2.lhs : _
     ... = œà ‚â´ h2.rhs : by { congr' 1, }
     ... = _ : _,
  swap 5, { exact functor.map _ hmn.hom },
  swap 4, { refine (eq_to_hom _ ‚â´ _ ‚â´ eq_to_hom _),
    swap 2, { symmetry, apply row_eq_col_obj; assumption },
    swap 3, { apply row_eq_col_obj; assumption },
    exact functor.map _ hlm.hom },
  all_goals { dsimp [œÜ, œà, eq.lhs_def, eq.rhs_def] },
  { simp only [category.assoc, ‚Üê functor.map_comp], refl },
  { simp only [category.assoc], refl },
  { simp only [eq_to_hom_trans, eq_to_hom_trans_assoc, category.assoc],
    dsimp,
    simp only [hom_of_le_refl, eq_to_hom_trans, eq_to_hom_trans_assoc,
      category.id_comp, category.comp_id, category.assoc, ‚Üê functor.map_comp_assoc],
    refl, },
end

lemma col_comp_row (i j : fin 4) (k l : fin 3) (hij : i ‚â§ j) (hkl : k ‚â§ l) :
  (col k).map hij.hom ‚â´ eq_to_hom (by rw [row_obj, col_obj]) ‚â´
  (row j).map hkl.hom =
  eq_to_hom (by rw [col_obj]; refl) ‚â´
  map' (o i k) (o j l) ‚ü®hij, hkl‚ü© ‚â´ eq_to_hom (by rw [row_obj]; refl) :=
begin
  cases i with i hi, cases j with j hj, cases k with k hk, cases l with l hl,
  have hkl' := hkl,
  rw [‚Üê fin.coe_fin_le, fin.coe_mk, fin.coe_mk] at hij hkl,
  obtain ‚ü®j, rfl‚ü© := nat.exists_eq_add_of_le hij,
  obtain ‚ü®l, rfl‚ü© := nat.exists_eq_add_of_le hkl,
  clear hij,
  induction j with j IHj,
  { apply square_commutes_row; assumption },
  refine square_commutes_comp_row F f0 g0 a0 b0 c0 f1 g1 a1 b1 c1 f2 g2 a2 b2 c2 f3 g3
    sq00 sq01 sq10 sq11 sq20 sq21 ‚ü®i, hi‚ü© ‚ü®i+j, _‚ü© _ _ _ _ _ hkl' _ _,
  { refine lt_trans _ hj, exact lt_add_one (i+j) },
  { simp only [‚Üê fin.coe_fin_le, fin.coe_mk], exact le_self_add },
  { simp only [‚Üê fin.coe_fin_le, fin.coe_mk], exact (lt_add_one (i+j)).le },
  { refine IHj _ _, },
  clear IHj hkl,
  induction l with l IHl,
  { apply square_commutes_col; assumption },
  refine square_commutes_comp_col F f0 g0 a0 b0 c0 f1 g1 a1 b1 c1 f2 g2 a2 b2 c2 f3 g3
    sq00 sq01 sq10 sq11 sq20 sq21 _ _ ‚ü®k, hk‚ü© ‚ü®k+l, _‚ü© _ _ _ _ _ _,
  { refine lt_trans _ hl, exact lt_add_one (k+l) },
  { simp only [‚Üê fin.coe_fin_le, fin.coe_mk], exact le_self_add },
  { simp only [‚Üê fin.coe_fin_le, fin.coe_mk], exact (lt_add_one (k+l)).le },
  { refine IHl _ _ _, simp only [‚Üê fin.coe_fin_le, fin.coe_mk], exact le_self_add },
  clear IHl,
  convert square_commutes_one F f0 g0 a0 b0 c0 f1 g1 a1 b1 c1 f2 g2 a2 b2 c2 f3 g3
    sq00 sq01 sq10 sq11 sq20 sq21 _ _ _ _ using 2,
  { rw [nat.one_mod, add_assoc, nat.mod_eq_of_lt hj] },
  { rw [nat.one_mod, add_assoc, nat.mod_eq_of_lt hl] },
  { rw [‚Üê fin.coe_fin_lt, fin.coe_mk], refine nat.lt_of_succ_lt_succ hj, },
  { rw [‚Üê fin.coe_fin_lt, fin.coe_mk], refine nat.lt_of_succ_lt_succ hl, },
end

lemma map'_comp (x y z : snake_diagram) (hxy : x ‚â§ y) (hyz : y ‚â§ z) :
  map' x y hxy ‚â´ map' y z hyz = map' x z (hxy.trans hyz) :=
begin
  delta map',
  slice_lhs 4 7 { rw [eq_to_hom_trans_assoc] },
  rw [col_comp_row],
  { dsimp [map'],
    simp only [map', eq_to_hom_trans_assoc, category.assoc, eq_to_hom_refl,
      category.comp_id, category.id_comp, ‚Üê functor.map_comp_assoc],
    refl },
  all_goals { assumption },
end

end mk_functor

include sq00 sq01 sq10 sq11 sq20 sq21

def mk_functor : snake_diagram ‚•§ C :=
{ obj := function.uncurry F,
  map := Œª x y h, mk_functor.map' F f0 g0 a0 b0 c0 f1 g1 a1 b1 c1 f2 g2 a2 b2 c2 f3 g3 x y h.le,
  map_id' := Œª x, mk_functor.map'_id F f0 g0 a0 b0 c0 f1 g1 a1 b1 c1 f2 g2 a2 b2 c2 f3 g3 x,
  map_comp' := Œª x y z hxy hyz, by { rw mk_functor.map'_comp; assumption } }

@[simp] lemma mk_functor_map_f0 : mk_functor.map (hom (0,0) (0,1)) = f0 := by map_tac
@[simp] lemma mk_functor_map_g0 : mk_functor.map (hom (0,1) (0,2)) = g0 := by map_tac
@[simp] lemma mk_functor_map_a0 : mk_functor.map (hom (0,0) (1,0)) = a0 := by map_tac
@[simp] lemma mk_functor_map_b0 : mk_functor.map (hom (0,1) (1,1)) = b0 := by map_tac
@[simp] lemma mk_functor_map_c0 : mk_functor.map (hom (0,2) (1,2)) = c0 := by map_tac
@[simp] lemma mk_functor_map_f1 : mk_functor.map (hom (1,0) (1,1)) = f1 := by map_tac
@[simp] lemma mk_functor_map_g1 : mk_functor.map (hom (1,1) (1,2)) = g1 := by map_tac
@[simp] lemma mk_functor_map_a1 : mk_functor.map (hom (1,0) (2,0)) = a1 := by map_tac
@[simp] lemma mk_functor_map_b1 : mk_functor.map (hom (1,1) (2,1)) = b1 := by map_tac
@[simp] lemma mk_functor_map_c1 : mk_functor.map (hom (1,2) (2,2)) = c1 := by map_tac
@[simp] lemma mk_functor_map_f2 : mk_functor.map (hom (2,0) (2,1)) = f2 := by map_tac
@[simp] lemma mk_functor_map_g2 : mk_functor.map (hom (2,1) (2,2)) = g2 := by map_tac
@[simp] lemma mk_functor_map_a2 : mk_functor.map (hom (2,0) (3,0)) = a2 := by map_tac
@[simp] lemma mk_functor_map_b2 : mk_functor.map (hom (2,1) (3,1)) = b2 := by map_tac
@[simp] lemma mk_functor_map_c2 : mk_functor.map (hom (2,2) (3,2)) = c2 := by map_tac
@[simp] lemma mk_functor_map_f3 : mk_functor.map (hom (3,0) (3,1)) = f3 := by map_tac
@[simp] lemma mk_functor_map_g3 : mk_functor.map (hom (3,1) (3,2)) = g3 := by map_tac

end

section

variables {ùíú ‚Ñ¨ : Type*} [category ùíú] [category ‚Ñ¨]
variables (A : fin 3 ‚Üí ùíú) (F : fin 4 ‚Üí ùíú ‚•§ ‚Ñ¨)
variables (f : A 0 ‚ü∂ A 1) (g : A 1 ‚ü∂ A 2) (Œ± : F 0 ‚ü∂ F 1) (Œ≤ : F 1 ‚ü∂ F 2) (Œ≥ : F 2 ‚ü∂ F 3)

def mk_functor' : snake_diagram ‚•§ ‚Ñ¨ :=
mk_functor (Œª i, (F i).obj ‚àò A)
  /- FA‚ÇÄ‚ÇÄ -/  ((F 0).map f)  /- FA‚ÇÄ‚ÇÅ -/  ((F 0).map g)  /- FA‚ÇÄ‚ÇÇ -/
  (Œ±.app _)                  (Œ±.app _)                  (Œ±.app _)
  /- FA‚ÇÅ‚ÇÄ -/  ((F 1).map f)  /- FA‚ÇÅ‚ÇÅ -/  ((F 1).map g)  /- FA‚ÇÅ‚ÇÇ -/
  (Œ≤.app _)                  (Œ≤.app _)                  (Œ≤.app _)
  /- FA‚ÇÇ‚ÇÄ -/  ((F 2).map f)  /- FA‚ÇÇ‚ÇÅ -/  ((F 2).map g)  /- FA‚ÇÇ‚ÇÇ -/
  (Œ≥.app _)                  (Œ≥.app _)                  (Œ≥.app _)
  /- FA‚ÇÉ‚ÇÄ -/  ((F 3).map f)  /- FA‚ÇÉ‚ÇÅ -/  ((F 3).map g)  /- FA‚ÇÉ‚ÇÇ -/
(Œ±.naturality _).symm (Œ±.naturality _).symm
(Œ≤.naturality _).symm (Œ≤.naturality _).symm
(Œ≥.naturality _).symm (Œ≥.naturality _).symm

end

section

variables {ùíú ‚Ñ¨ ùíû : Type*} [category ùíú] [category ‚Ñ¨] [category ùíû]
variables (A : fin 3 ‚Üí ùíú ‚•§ ‚Ñ¨) (F : fin 4 ‚Üí ‚Ñ¨ ‚•§ ùíû)
variables (f : A 0 ‚ü∂ A 1) (g : A 1 ‚ü∂ A 2) (Œ± : F 0 ‚ü∂ F 1) (Œ≤ : F 1 ‚ü∂ F 2) (Œ≥ : F 2 ‚ü∂ F 3)

def mk_functor'' : ùíú ‚Üí snake_diagram ‚•§ ùíû :=
Œª x, mk_functor' ![(A 0).obj x, (A 1).obj x, (A 2).obj x] F (f.app x) (g.app x) Œ± Œ≤ Œ≥

end

section

variables {ùíú : Type*} [category ùíú] [abelian ùíú]

-- move (ang generalize) this
lemma exact_kernel_Œπ_self {A B : ùíú} (f : A ‚ü∂ B) : exact (kernel.Œπ f) f :=
by { rw abelian.exact_iff, tidy } -- why do we not have abelian.exact_kernel?

-- move this
lemma exact_self_cokernel_œÄ {A B : ùíú} (f : A ‚ü∂ B) : exact f (cokernel.œÄ f) :=
abelian.exact_cokernel _

local notation `kernel_map`   := kernel.map _ _ _ _
local notation `cokernel_map` := cokernel.map _ _ _ _

def mk_of_short_exact_sequence_hom (A B : short_exact_sequence ùíú) (f : A ‚ü∂ B) :
  snake_diagram ‚•§ ùíú :=
mk_functor
/- == Passing in the matrix of objects first, to make Lean happy == -/
![![kernel f.1, kernel f.2, kernel f.3],
  ![A.1, A.2, A.3],
  ![B.1, B.2, B.3],
  ![cokernel f.1, cokernel f.2, cokernel f.3]]
/- == All the morphisms in the diagram == -/
  /- ker f.1 -/   (kernel_map f.sq1)   /- ker f.2 -/   (kernel_map f.sq2)   /- ker f.3 -/
  (kernel.Œπ _)                         (kernel.Œπ _)                         (kernel.Œπ _)
  /-   A.1   -/          A.f           /-   A.2   -/          A.g           /-   A.3   -/
       f.1                                  f.2                                  f.3
  /-   B.1   -/          B.f           /-   B.2   -/          B.g           /-   B.3   -/
  (cokernel.œÄ _)                       (cokernel.œÄ _)                       (cokernel.œÄ _)
  /- coker f.1 -/ (cokernel_map f.sq1) /- coker f.2 -/ (cokernel_map f.sq2) /- coker f.3 -/
/- == Prove that the squares commute == -/
(by { delta kernel.map, rw [kernel.lift_Œπ] }) (by { delta kernel.map, rw [kernel.lift_Œπ] })
f.sq1 f.sq2
(by { delta cokernel.map, rw [cokernel.œÄ_desc] }) (by { delta cokernel.map, rw [cokernel.œÄ_desc] })
.

end

end snake_diagram

open snake_diagram (o hom)

example (i : fin 4) : o i 0 ‚ü∂ o i 1 := hom (i,0) (i,1)

local notation x `‚ü∂[`D`]` y := D.map (hom x y)

section definitions

variables (ùíú : Type u) [category.{v} ùíú] [has_images ùíú] [has_zero_morphisms ùíú] [has_kernels ùíú]

variables {ùíú}

structure is_snake_input (D : snake_diagram ‚•§ ùíú) : Prop :=
(row_exact‚ÇÅ : exact ((1,0) ‚ü∂[D] (1,1)) ((1,1) ‚ü∂[D] (1,2)))
(row_exact‚ÇÇ : exact ((2,0) ‚ü∂[D] (2,1)) ((2,1) ‚ü∂[D] (2,2)))
(col_exact‚ÇÅ : ‚àÄ j, exact ((0,j) ‚ü∂[D] (1,j)) ((1,j) ‚ü∂[D] (2,j)))
(col_exact‚ÇÇ : ‚àÄ j, exact ((1,j) ‚ü∂[D] (2,j)) ((2,j) ‚ü∂[D] (3,j)))
(col_mono : ‚àÄ j, mono ((0,j) ‚ü∂[D] (1,j)))
(col_epi  : ‚àÄ j, epi ((2,j) ‚ü∂[D] (3,j)))
(row_mono : mono ((2,0) ‚ü∂[D] (2,1)))
(row_epi  : epi ((1,1) ‚ü∂[D] (1,2)))

namespace is_snake_input

variables {D : snake_diagram ‚•§ ùíú}

@[nolint unused_arguments]
lemma map_eq (hD : is_snake_input D) {x y : snake_diagram} (f g : x ‚ü∂ y) : D.map f = D.map g :=
congr_arg _ (snake_diagram.hom_ext _ _)

@[nolint unused_arguments]
lemma map_eq_id (hD : is_snake_input D) {x : snake_diagram} (f : x ‚ü∂ x) : D.map f = ùüô _ :=
by rw [snake_diagram.hom_ext f (ùüô x), D.map_id]

lemma hom_eq_zero‚ÇÅ (hD : is_snake_input D) {x y : snake_diagram} (f : x ‚ü∂ y)
  (h : x.1 < 2 ‚àß x.1 + 1 < y.1 . snake_diagram.hom_tac) : D.map f = 0 :=
begin
  cases x with i j, cases y with k l, cases h with h‚ÇÄ h‚ÇÅ, rcases f with ‚ü®‚ü®‚ü®hik, hjl‚ü©‚ü©‚ü©,
  dsimp at h‚ÇÄ h‚ÇÅ hik hjl,
  let f‚ÇÅ := hom (i,j) (i+1,j),
  let f‚ÇÇ := hom (i+1,j) (i+2,j),
  let f‚ÇÉ := hom (i+2,j) (k,l),
  calc D.map _
      = D.map ((f‚ÇÅ ‚â´ f‚ÇÇ) ‚â´ f‚ÇÉ)             : hD.map_eq _ _
  ... = ((D.map f‚ÇÅ) ‚â´ D.map f‚ÇÇ) ‚â´ D.map f‚ÇÉ : by simp only [D.map_comp]
  ... = 0 ‚â´ D.map f‚ÇÉ                        : _
  ... = 0                                   : zero_comp,
  congr' 1,
  obtain (rfl|rfl) : i = 0 ‚à® i = 1, { dec_trivial! },
  { exact (hD.col_exact‚ÇÅ j).w },
  { exact (hD.col_exact‚ÇÇ j).w },
end
.

open snake_diagram

meta def aux_simp : tactic unit :=
`[dsimp only [snake_diagram.mk_of_short_exact_sequence_hom],
  simp only [mk_functor_map_f0, mk_functor_map_g0, mk_functor_map_a0, mk_functor_map_b0,
    mk_functor_map_c0, mk_functor_map_f1, mk_functor_map_g1, mk_functor_map_a1,
    mk_functor_map_b1, mk_functor_map_c1, mk_functor_map_f2, mk_functor_map_g2,
    mk_functor_map_a2, mk_functor_map_b2, mk_functor_map_c2, mk_functor_map_f3, mk_functor_map_g3]]

lemma mk_of_short_exact_sequence_hom {ùíú : Type*} [category ùíú] [abelian ùíú]
  (A B : short_exact_sequence ùíú) (f : A ‚ü∂ B) :
  is_snake_input (snake_diagram.mk_of_short_exact_sequence_hom A B f) :=
{ row_exact‚ÇÅ := by { aux_simp, exact A.exact' },
  row_exact‚ÇÇ := by { aux_simp, exact B.exact' },
  col_exact‚ÇÅ := Œª j, by { fin_cases j; aux_simp, all_goals { apply exact_kernel_Œπ_self, } },
  col_exact‚ÇÇ := Œª j, by { fin_cases j; aux_simp, all_goals { apply exact_self_cokernel_œÄ } },
  col_mono := Œª j, by { fin_cases j; aux_simp, all_goals { apply_instance } },
  col_epi := Œª j, by { fin_cases j; aux_simp, all_goals { apply_instance } },
  row_mono := by { aux_simp, exact B.mono' },
  row_epi := by { aux_simp, exact A.epi' }, }

end is_snake_input

end definitions

section

open abelian.pseudoelement

variables {ùíú : Type u} [category.{v} ùíú] [abelian ùíú]
variables {D : snake_diagram ‚•§ ùíú}

namespace is_snake_input

local attribute [instance] abelian.pseudoelement.over_to_sort
  abelian.pseudoelement.hom_to_fun
  abelian.pseudoelement.has_zero

section move_me

local attribute [instance] abelian.pseudoelement.over_to_sort
  abelian.pseudoelement.hom_to_fun

lemma injective_iff_mono {P Q : ùíú} (f : P ‚ü∂ Q) : function.injective f ‚Üî mono f :=
‚ü®Œª h, mono_of_zero_of_map_zero _ (zero_of_map_zero _ h),
  by introsI h; apply pseudo_injective_of_mono‚ü©

lemma surjective_iff_epi {P Q : ùíú} (f : P ‚ü∂ Q) : function.surjective f ‚Üî epi f :=
‚ü®epi_of_pseudo_surjective _, by introI h; apply pseudo_surjective_of_epi‚ü©

lemma exists_of_exact {P Q R : ùíú} {f : P ‚ü∂ Q} {g : Q ‚ü∂ R} (e : exact f g) (q) (hq : g q = 0) :
  ‚àÉ p, f p = q :=
(pseudo_exact_of_exact e).2 _ hq

lemma eq_zero_of_exact {P Q R : ùíú} {f : P ‚ü∂ Q} {g : Q ‚ü∂ R} (e : exact f g) (p) : g (f p) = 0 :=
(pseudo_exact_of_exact e).1 _

@[simp]
lemma kernel_Œπ_apply {P Q : ùíú} (f : P ‚ü∂ Q) (a) : f (kernel.Œπ f a) = 0 :=
begin
  rw ‚Üê abelian.pseudoelement.comp_apply,
  simp,
end

-- (AT) I don't know if we actually want this lemma, but it came in handy below.
lemma eq_zero_iff_kernel_Œπ_eq_zero {P Q : ùíú} (f : P ‚ü∂ Q) (q) : kernel.Œπ f q = 0 ‚Üî q = 0 :=
begin
  split,
  { intro h,
    apply_fun kernel.Œπ f,
    simp [h],
    rw injective_iff_mono,
    apply_instance },
  { intro h,
    simp [h] },
end

@[simp]
lemma cokernel_œÄ_apply {P Q : ùíú} (f : P ‚ü∂ Q) (a) : cokernel.œÄ f (f a) = 0 :=
begin
  rw ‚Üê abelian.pseudoelement.comp_apply,
  simp,
end

lemma exists_of_cokernel_œÄ_eq_zero {P Q : ùíú} (f : P ‚ü∂ Q) (a) :
  cokernel.œÄ f a = 0 ‚Üí ‚àÉ b, f b = a :=
begin
  intro h,
  apply exists_of_exact _ _ h,
  apply snake_diagram.exact_self_cokernel_œÄ,
end

lemma cokernel_œÄ_surjective {P Q : ùíú} (f : P ‚ü∂ Q) : function.surjective (cokernel.œÄ f) :=
begin
  rw surjective_iff_epi,
  apply_instance,
end

--move
lemma exact_is_iso_iff {P Q Q' R : ùíú} (f : P ‚ü∂ Q) (g : Q' ‚ü∂ R) (e : Q ‚ü∂ Q') [is_iso e] :
  exact f (e ‚â´ g) ‚Üî exact (f ‚â´ e) g :=
begin
  let E := as_iso e,
  change exact f (E.hom ‚â´ g) ‚Üî exact (f ‚â´ E.hom) g,
  conv_rhs { rw (show g = E.inv ‚â´ E.hom ‚â´ g, by simp) },
  rw exact_comp_hom_inv_comp_iff
end

--lemma exact_comp_is_iso {P Q R R' : ùíú} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) (e : R ‚ü∂ R') [is_iso e] :
--  exact f (g ‚â´ e) ‚Üî exact f g := exact_comp_iso

end move_me

lemma row_exact‚ÇÄ (hD : is_snake_input D) : exact ((0,0) ‚ü∂[D] (0,1)) ((0,1) ‚ü∂[D] (0,2)) :=
begin
  refine exact_of_pseudo_exact _ _ ‚ü®Œª a, _, _‚ü©,
  { apply_fun ((0,2) ‚ü∂[D] (1,2)),
    swap, { rw injective_iff_mono, exact hD.col_mono _ },
    simp_rw [‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, abelian.pseudoelement.apply_zero],
    change D.map (hom (0,0) (1,0) ‚â´ hom (1,0) (1,1) ‚â´ hom (1,1) (1,2)) a = 0,
    simp [abelian.pseudoelement.comp_apply, eq_zero_of_exact hD.row_exact‚ÇÅ] },
  { intros b hb,
    apply_fun ((0,2) ‚ü∂[D] (1,2)) at hb,
    simp_rw [‚Üê abelian.pseudoelement.comp_apply,
      ‚Üê D.map_comp, abelian.pseudoelement.apply_zero] at hb,
    change D.map (hom (0,1) (1,1) ‚â´ hom (1,1) (1,2)) b = 0 at hb,
    simp_rw [D.map_comp, abelian.pseudoelement.comp_apply] at hb,
    let b' := ((0,1) ‚ü∂[D] (1,1)) b,
    change ((1,1) ‚ü∂[D] (1,2)) b' = 0 at hb,
    obtain ‚ü®c,hc‚ü© := exists_of_exact hD.row_exact‚ÇÅ b' hb,
    have hcz : ((1,0) ‚ü∂[D] (2,0)) c = 0,
    { apply_fun ((2,0) ‚ü∂[D] (2,1)),
      swap, { rw injective_iff_mono, apply hD.row_mono },
      simp_rw [‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, abelian.pseudoelement.apply_zero],
      change D.map (hom (1,0) (1,1) ‚â´ hom (1,1) (2,1)) c = 0,
      simp_rw [D.map_comp, abelian.pseudoelement.comp_apply, hc],
      dsimp [b'],
      apply eq_zero_of_exact,
      apply hD.col_exact‚ÇÅ },
    obtain ‚ü®d,hd‚ü© := exists_of_exact (hD.col_exact‚ÇÅ _) c hcz,
    use d,
    apply_fun ((0,1) ‚ü∂[D] (1,1)),
    swap, { rw injective_iff_mono, exact hD.col_mono _ },
    dsimp [b'] at hc,
    rw [‚Üê hc, ‚Üê hd],
    simp_rw [‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp],
    refl }
end

lemma row_exact‚ÇÉ (hD : is_snake_input D) : exact ((3,0) ‚ü∂[D] (3,1)) ((3,1) ‚ü∂[D] (3,2)) :=
begin
  refine exact_of_pseudo_exact _ _ ‚ü®Œª a, _,Œª b hb, _‚ü©,
  { obtain ‚ü®b, hb‚ü© := (surjective_iff_epi ((2,0) ‚ü∂[D] (3,0))).2 (hD.col_epi 0) a,
    rw [‚Üê hb, ‚Üê abelian.pseudoelement.comp_apply, ‚Üê abelian.pseudoelement.comp_apply,
      ‚Üê D.map_comp, ‚Üê D.map_comp, map_eq hD ((hom (2, 0) (3, 0)) ‚â´ (hom _ (3, 1)) ‚â´
      (hom _ (3, 2))) ((hom (2, 0) (2, 1)) ‚â´ (hom _ (2, 2)) ‚â´ (hom _ _)), ‚Üê category.assoc,
      D.map_comp _ (hom (2, 2) (3, 2)), D.map_comp, hD.row_exact‚ÇÇ.w, zero_comp, zero_apply] },
  { set f‚ÇÅ := hom (2, 1) (2, 2),
    set f‚ÇÇ := hom (2, 2) (3, 2),
    set f‚ÇÉ := hom (1, 1) (2, 1),
    set f‚ÇÑ := hom (2, 0) (3, 0),
    set f‚ÇÖ := hom (3, 0) (3, 1),
    obtain ‚ü®c, hc‚ü© := (surjective_iff_epi ((2,1) ‚ü∂[D] (3,1))).2 (hD.col_epi 1) b,
    let d := D.map f‚ÇÅ c,
    have hd : D.map f‚ÇÇ d = 0,
    { rw [‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, map_eq hD ((hom (2, 1) (2, 2)) ‚â´
      (hom _ (3, 2))) ((hom (2, 1) (3, 1)) ‚â´ (hom _ (3, 2))), D.map_comp,
      abelian.pseudoelement.comp_apply, hc, hb] },
    obtain ‚ü®e, he‚ü© := exists_of_exact (hD.col_exact‚ÇÇ 2) d hd,
    obtain ‚ü®f, hf‚ü© := (surjective_iff_epi ((1,1) ‚ü∂[D] (1,2))).2 hD.row_epi e,
    have hfzero : ((2,1) ‚ü∂[D] (3,1)) ((D.map f‚ÇÉ) f) = 0,
    { rw [‚Üê abelian.pseudoelement.comp_apply, (hD.col_exact‚ÇÇ 1).w, zero_apply] },
    have hdiff : D.map f‚ÇÅ c = D.map f‚ÇÅ (D.map f‚ÇÉ f),
    { rw [‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, map_eq hD ((hom (1, 1) (2, 1)) ‚â´
      (hom _ (2, 2))) ((hom (1, 1) (1, 2)) ‚â´ (hom _ (2, 2))), D.map_comp,
      abelian.pseudoelement.comp_apply, hf, he] },
    obtain ‚ü®g, ‚ü®hg‚ÇÅ, hg‚ÇÇ‚ü©‚ü© := sub_of_eq_image _ _ _ hdiff,
    obtain ‚ü®h, hh‚ü© := exists_of_exact hD.row_exact‚ÇÇ g hg‚ÇÅ,
    use D.map f‚ÇÑ h,
    rw [‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, map_eq hD
      ((hom (2, 0) (3, 0)) ‚â´ (hom _ (3, 1))) ((hom _ (2, 1)) ‚â´ (hom _ _)), D.map_comp,
      abelian.pseudoelement.comp_apply, hh, hg‚ÇÇ _ ((2,1) ‚ü∂[D] (3,1)) hfzero, hc] }
end

lemma row_exact (hD : is_snake_input D) (i : fin 4) :
  exact ((i,0) ‚ü∂[D] (i,1)) ((i,1) ‚ü∂[D] (i,2)) :=
by { fin_cases i, exacts [hD.row_exact‚ÇÄ, hD.row_exact‚ÇÅ, hD.row_exact‚ÇÇ, hD.row_exact‚ÇÉ] }

lemma hom_eq_zero‚ÇÇ (hD : is_snake_input D) {x y : snake_diagram} (f : x ‚ü∂ y)
  (h : x.2 = 0 ‚àß y.2 = 2 . snake_diagram.hom_tac) : D.map f = 0 :=
begin
  cases x with i j, cases y with k l, rcases f with ‚ü®‚ü®‚ü®hik, hjl‚ü©‚ü©‚ü©,
  dsimp at h hik hjl, rcases h with ‚ü®rfl, rfl‚ü©,
  let f‚ÇÅ := hom (i,0) (i,1),
  let f‚ÇÇ := hom (i,1) (i,2),
  let f‚ÇÉ := hom (i,2) (k,2),
  calc D.map _
      = D.map ((f‚ÇÅ ‚â´ f‚ÇÇ) ‚â´ f‚ÇÉ)             : hD.map_eq _ _
  ... = ((D.map f‚ÇÅ) ‚â´ D.map f‚ÇÇ) ‚â´ D.map f‚ÇÉ : by simp only [D.map_comp]
  ... = 0                                    : by rw [(hD.row_exact i).w, zero_comp]
end

section long_snake

lemma ker_row‚ÇÅ_to_row‚ÇÇ (hD : is_snake_input D) :
  (kernel.Œπ ((1,0) ‚ü∂[D] (1,1))) ‚â´ ((1,0) ‚ü∂[D] (2,0)) = 0 :=
begin
  refine zero_morphism_ext _ (Œª a, (injective_iff_mono ((2,0) ‚ü∂[D] (2,1))).2 hD.row_mono _),
  rw [apply_zero, ‚Üê abelian.pseudoelement.comp_apply, category.assoc,
    abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, map_eq hD
    ((hom (1, 0) (2, 0)) ‚â´ (hom _ (2, 1))) ((hom _ (1, 1)) ‚â´ (hom _ _)), D.map_comp,
    abelian.pseudoelement.comp_apply, kernel_Œπ_apply, apply_zero]
end

def ker_row‚ÇÅ_to_top_left (hD : is_snake_input D) : kernel ((1,0) ‚ü∂[D] (1,1)) ‚ü∂ D.obj (0, 0) :=
by { letI := hD.col_mono 0, exact (limits.kernel.lift _ _ (ker_row‚ÇÅ_to_row‚ÇÇ hD)) ‚â´
    (limits.kernel.lift _ _ (((abelian.exact_iff _ _).1 (hD.col_exact‚ÇÅ 0)).2)) ‚â´
    inv (abelian.factor_thru_image ((0,0) ‚ü∂[D] (1,0))) }

lemma ker_row‚ÇÅ_to_top_left_mono (hD : is_snake_input D) : mono (ker_row‚ÇÅ_to_top_left hD) :=
begin
  suffices : mono ((limits.kernel.lift _ _ (ker_row‚ÇÅ_to_row‚ÇÇ hD)) ‚â´
    (limits.kernel.lift _ _ (((abelian.exact_iff _ _).1 (hD.col_exact‚ÇÅ 0)).2))),
  { letI := this, exact mono_comp _ _, },
  exact mono_comp _ _
end

lemma ker_row‚ÇÅ_to_top_left_comp_eq_Œπ (hD : is_snake_input D) : ker_row‚ÇÅ_to_top_left hD ‚â´
  ((0,0) ‚ü∂[D] (1,0)) = kernel.Œπ ((1,0) ‚ü∂[D] (1,1)) :=
begin
  letI := hD.col_mono 0,
  have : inv (abelian.factor_thru_image ((0,0) ‚ü∂[D] (1,0))) ‚â´ ((0,0) ‚ü∂[D] (1,0)) =
    category_theory.abelian.image.Œπ _ := by simp,
  rw [ker_row‚ÇÅ_to_top_left, category.assoc, category.assoc, this],
  simp
end

lemma long_row‚ÇÄ_exact (hD : is_snake_input D) :
  exact (ker_row‚ÇÅ_to_top_left hD) ((0,0) ‚ü∂[D] (0,1)) :=
begin
  refine abelian.pseudoelement.exact_of_pseudo_exact _ _ ‚ü®Œª a, _, Œª a ha, _‚ü©,
  { refine (injective_iff_mono _).2 (hD.col_mono _) _,
    rw [apply_zero, ‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, map_eq hD
      ((hom (0, 0) (0, 1)) ‚â´ (hom _ (1, 1))) ((hom _ (1, 0)) ‚â´ (hom _ _)), D.map_comp,
      ‚Üê abelian.pseudoelement.comp_apply, ‚Üê category.assoc, ker_row‚ÇÅ_to_top_left_comp_eq_Œπ hD,
      abelian.pseudoelement.comp_apply, kernel_Œπ_apply] },
  { let b := ((0,0) ‚ü∂[D] (1,0)) a,
    have hb : ((1,0) ‚ü∂[D] (1,1)) b = 0,
    { rw [‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, map_eq hD
        ((hom (0, 0) (1, 0)) ‚â´ (hom _ (1, 1))) ((hom _ (0, 1)) ‚â´ (hom _ _)), D.map_comp,
        abelian.pseudoelement.comp_apply, ha, apply_zero] },
    obtain ‚ü®c, hc‚ü© := exists_of_exact category_theory.exact_kernel_Œπ _ hb,
    refine ‚ü®c, (injective_iff_mono _).2 (hD.col_mono _) _‚ü©,
    rw [‚Üê abelian.pseudoelement.comp_apply, ker_row‚ÇÅ_to_top_left_comp_eq_Œπ hD, hc] }
end

lemma row‚ÇÅ_middle_to_coker_row‚ÇÇ_eq_zero (hD : is_snake_input D) :
   ((1,1) ‚ü∂[D] (1,2)) ‚â´ ((1,2) ‚ü∂[D] (2,2)) ‚â´ (limits.cokernel.œÄ ((2,1) ‚ü∂[D] (2,2))) = 0 :=
begin
  refine zero_morphism_ext _ (Œª a, _),
  rw [‚Üê category.assoc, abelian.pseudoelement.comp_apply, ‚Üê D.map_comp, map_eq hD
    ((hom (1, 1) (1, 2)) ‚â´ (hom _ (2, 2))) ((hom _ (2, 1)) ‚â´ (hom _ _)), D.map_comp,
    ‚Üê abelian.pseudoelement.comp_apply],
  simp,
end

lemma row‚ÇÅ_to_coker_row‚ÇÇ_eq_zero (hD : is_snake_input D) :
  ((1,2) ‚ü∂[D] (2,2)) ‚â´ (limits.cokernel.œÄ ((2,1) ‚ü∂[D] (2,2))) = 0 :=
begin
  letI := hD.row_epi,
  have := row‚ÇÅ_middle_to_coker_row‚ÇÇ_eq_zero hD,
  rw [‚Üê limits.comp_zero] at this,
  exact (cancel_epi _).1 this
end

lemma ker_col‚ÇÇ_to_coker_row‚ÇÇ_eq_zero (hD : is_snake_input D) :
  kernel.Œπ ((2,2) ‚ü∂[D] (3,2)) ‚â´ (limits.cokernel.œÄ ((1,2) ‚ü∂[D] (2,2))) = 0 :=
begin
  refine zero_morphism_ext _ (Œª a, _),
  obtain ‚ü®c, hc‚ü© := exists_of_exact (hD.col_exact‚ÇÇ 2) (kernel.Œπ (_ ‚ü∂[D] _) a) (kernel_Œπ_apply _ _),
  rw [abelian.pseudoelement.comp_apply, ‚Üê hc, cokernel_œÄ_apply]
end

def bottom_right_to_coker_row‚ÇÇ (hD : is_snake_input D) :
  D.obj (3, 2) ‚ü∂ cokernel ((2,1) ‚ü∂[D] (2,2)) :=
by { letI := hD.col_epi 2, exact
  (inv (abelian.factor_thru_coimage ((2,2) ‚ü∂[D] (3,2)))) ‚â´
  (limits.cokernel.desc _ _ (ker_col‚ÇÇ_to_coker_row‚ÇÇ_eq_zero hD)) ‚â´
  (limits.cokernel.desc _ _ (row‚ÇÅ_to_coker_row‚ÇÇ_eq_zero hD)) }

lemma bottom_right_to_coker_row‚ÇÇ_epi (hD : is_snake_input D) : epi (bottom_right_to_coker_row‚ÇÇ hD) :=
begin
  suffices : epi ((limits.cokernel.desc _ _ (ker_col‚ÇÇ_to_coker_row‚ÇÇ_eq_zero hD)) ‚â´
    (limits.cokernel.desc _ _ (row‚ÇÅ_to_coker_row‚ÇÇ_eq_zero hD))),
  { letI := this, exact epi_comp _ _ },
  exact epi_comp _ _,
end

lemma bottom_right_to_coker_row‚ÇÇ_comp_eq_œÄ (hD : is_snake_input D) : ((2,2) ‚ü∂[D] (3,2))  ‚â´
  bottom_right_to_coker_row‚ÇÇ hD = cokernel.œÄ ((2,1) ‚ü∂[D] (2,2)) :=
begin
  letI := hD.col_epi 2,
  have : ((2,2) ‚ü∂[D] (3,2)) ‚â´ inv (abelian.factor_thru_coimage ((2,2) ‚ü∂[D] (3,2))) =
    category_theory.abelian.coimage.œÄ _ := by simp,
  rw [bottom_right_to_coker_row‚ÇÇ, ‚Üê category.assoc, ‚Üê category.assoc, this],
  simp
end

lemma long_row‚ÇÉ_exact (hD : is_snake_input D) :
  exact ((3,1) ‚ü∂[D] (3,2)) (bottom_right_to_coker_row‚ÇÇ hD) :=
begin
  refine abelian.pseudoelement.exact_of_pseudo_exact _ _ ‚ü®Œª a, _, Œª a ha, _‚ü©,
  { letI := hD.col_epi 1,
    obtain ‚ü®b, hb‚ü© := abelian.pseudoelement.pseudo_surjective_of_epi ((2,1) ‚ü∂[D] (3,1)) a,
    rw [‚Üê hb, ‚Üê abelian.pseudoelement.comp_apply, ‚Üê abelian.pseudoelement.comp_apply,
      ‚Üê category.assoc, ‚Üê D.map_comp, map_eq hD ((hom (2, 1) (3, 1)) ‚â´ (hom _ (3, 2)))
      ((hom _ (2, 2)) ‚â´ (hom _ _)), D.map_comp, category.assoc,
      bottom_right_to_coker_row‚ÇÇ_comp_eq_œÄ hD, (snake_diagram.exact_self_cokernel_œÄ _).w,
      zero_apply], },
  { letI := hD.col_epi 2,
    obtain ‚ü®b, hb‚ü© := abelian.pseudoelement.pseudo_surjective_of_epi ((2,2) ‚ü∂[D] (3,2)) a,
    rw [‚Üê hb, ‚Üê abelian.pseudoelement.comp_apply, bottom_right_to_coker_row‚ÇÇ_comp_eq_œÄ hD] at ha,
    obtain ‚ü®c, hc‚ü© := exists_of_exact (abelian.exact_cokernel _) _ ha,
    refine ‚ü®((2,1) ‚ü∂[D] (3,1)) c, _‚ü©,
    rw [‚Üê hb, ‚Üê hc, ‚Üê abelian.pseudoelement.comp_apply, ‚Üê abelian.pseudoelement.comp_apply,
      ‚Üê D.map_comp, map_eq hD ((hom (2, 1) (3, 1)) ‚â´ (hom _ (3, 2))) ((hom _ (2, 2)) ‚â´ (hom _ _)),
      D.map_comp] }
end

end long_snake

example (hD : is_snake_input D) (f : (o 1 0) ‚ü∂ (o 2 2)) : D.map f = 0 := hD.hom_eq_zero‚ÇÇ f

section delta

variable (hD : is_snake_input D)
include hD

def to_top_right_kernel : D.obj (1,0) ‚ü∂ kernel ((1,1) ‚ü∂[D] (2,2)) :=
kernel.lift _ (_ ‚ü∂[D] _)
begin
  rw ‚Üê D.map_comp,
  change D.map (hom (1,0) (2,0) ‚â´ hom (2,0) (2,1) ‚â´ hom (2,1) (2,2)) = 0,
  simp [hD.row_exact‚ÇÇ.1],
end

def cokernel_to_top_right_kernel_to_right_kernel :
  cokernel hD.to_top_right_kernel ‚ü∂ kernel ((1,2) ‚ü∂[D] (2,2)) :=
cokernel.desc _ (kernel.lift _ (kernel.Œπ _ ‚â´ (_ ‚ü∂[D] _)) begin
  rw [category.assoc, ‚Üê D.map_comp],
  have : hom (1,1) (1,2) ‚â´ hom (1,2) (2,2) = hom (1,1) (2,2) := rfl,
  rw this, clear this,
  simp [abelian.pseudoelement.comp_apply],
end) begin
  dsimp [to_top_right_kernel],
  ext a,
  apply_fun kernel.Œπ (D.map (hom (1, 2) (2, 2))),
  swap, { rw injective_iff_mono, apply_instance },
  simp [‚Üê abelian.pseudoelement.comp_apply, hD.row_exact‚ÇÅ.1],
end

instance : mono hD.cokernel_to_top_right_kernel_to_right_kernel :=
begin
  apply mono_of_zero_of_map_zero,
  intros a h,
  obtain ‚ü®b,rfl‚ü© := cokernel_œÄ_surjective _ a,
  rw ‚Üê eq_zero_iff_kernel_Œπ_eq_zero at h,
  simp [‚Üê abelian.pseudoelement.comp_apply, cokernel_to_top_right_kernel_to_right_kernel] at h,
  simp [ abelian.pseudoelement.comp_apply] at h,
  have : ‚àÉ c, ((1,0) ‚ü∂[D] (1,1)) c = kernel.Œπ ((1,1) ‚ü∂[D] (2,2)) b,
  { apply exists_of_exact _ _ h,
    exact hD.row_exact‚ÇÅ },
  obtain ‚ü®c,hc‚ü© := this,
  let f : cokernel hD.to_top_right_kernel ‚ü∂ cokernel ((1,0) ‚ü∂[D] (1,1)) :=
    cokernel.desc _ _ _,
  swap, { refine kernel.Œπ _ ‚â´ cokernel.œÄ _ },
  swap, { simp [to_top_right_kernel] },
  apply_fun f,
  swap, {
    rw injective_iff_mono,
    apply mono_of_zero_of_map_zero,
    intros a ha,
    dsimp [f] at ha,
    obtain ‚ü®a,rfl‚ü© := cokernel_œÄ_surjective _ a,
    simp [‚Üê abelian.pseudoelement.comp_apply] at ha,
    simp [abelian.pseudoelement.comp_apply] at ha,
    have : ‚àÉ c, ((1,0) ‚ü∂[D] (1,1)) c = kernel.Œπ ((1,1) ‚ü∂[D] (2,2)) a,
    { apply exists_of_exact _ _ ha,
      apply snake_diagram.exact_self_cokernel_œÄ, },
    obtain ‚ü®c,hc‚ü© := this,
    have : hD.to_top_right_kernel c = a,
    { apply_fun kernel.Œπ ((1,1) ‚ü∂[D] (2,2)),
      swap, { rw injective_iff_mono, apply_instance },
      dsimp [to_top_right_kernel],
      simp [‚Üê abelian.pseudoelement.comp_apply],
      erw kernel.lift_Œπ,
      exact hc },
    simp [‚Üê this] },
  dsimp [f],
  simp [‚Üê abelian.pseudoelement.comp_apply, to_top_right_kernel],
  simp [abelian.pseudoelement.comp_apply, ‚Üê hc],
end .

instance : epi hD.cokernel_to_top_right_kernel_to_right_kernel :=
begin
  apply epi_of_pseudo_surjective,
  intros a,
  let a' := kernel.Œπ ((1,2) ‚ü∂[D] (2,2)) a,
  obtain ‚ü®b,hb‚ü© : ‚àÉ b, ((1,1) ‚ü∂[D] (1,2)) b = a',
  { suffices : function.surjective ((1,1) ‚ü∂[D] (1,2)), by apply this,
    rw surjective_iff_epi,
    apply hD.row_epi },
  obtain ‚ü®c,hc‚ü© : ‚àÉ c, kernel.Œπ ((1,1) ‚ü∂[D] (2,2)) c = b,
  { have : exact (kernel.Œπ ((1,1) ‚ü∂[D] (2,2))) ((1,1) ‚ü∂[D] (2,2)) := exact_kernel_Œπ,
    apply exists_of_exact this,
    rw [(show hom (1,1) (2,2) = hom (1,1) (1,2) ‚â´ hom (1,2) (2,2), by refl),
      D.map_comp, abelian.pseudoelement.comp_apply, hb],
    dsimp [a'],
    simp },
  use cokernel.œÄ hD.to_top_right_kernel c,
  apply_fun kernel.Œπ ((1,2) ‚ü∂[D] (2,2)),
  swap, { rw injective_iff_mono, apply_instance },
  dsimp [to_top_right_kernel, cokernel_to_top_right_kernel_to_right_kernel],
  simp [‚Üê abelian.pseudoelement.comp_apply],
  change _ = a',
  rw ‚Üê hb,
  simp [‚Üê hb, abelian.pseudoelement.comp_apply, ‚Üê hc],
end .

instance : is_iso hD.cokernel_to_top_right_kernel_to_right_kernel :=
is_iso_of_mono_of_epi _

def bottom_left_cokernel_to : cokernel ((1,0) ‚ü∂[D] (2,1)) ‚ü∂ D.obj (2,2) :=
cokernel.desc _ (_ ‚ü∂[D] _)
begin
  rw ‚Üê D.map_comp,
  change D.map (hom (1,0) (2,0) ‚â´ hom (2,0) (2,1) ‚â´ hom (2,1) (2,2)) = 0,
  simp_rw D.map_comp,
  simp [hD.row_exact‚ÇÇ.1],
end

def left_cokernel_to_kernel_bottom_left_cokernel_to :
  cokernel ((1,0) ‚ü∂[D] (2,0)) ‚ü∂ kernel hD.bottom_left_cokernel_to :=
kernel.lift _ (cokernel.desc _ ((_ ‚ü∂[D] _) ‚â´ cokernel.œÄ _) begin
  rw [‚Üê category.assoc, ‚Üê D.map_comp],
  have : hom (1,0) (2,0) ‚â´ hom (2,0) (2,1) = hom _ _ := rfl,
  rw this, clear this,
  simp [abelian.pseudoelement.comp_apply],
end) begin
  dsimp [bottom_left_cokernel_to],
  ext a,
  obtain ‚ü®b,rfl‚ü© : ‚àÉ b, cokernel.œÄ ((1,0) ‚ü∂[D] (2,0)) b = a,
  { have : function.surjective (cokernel.œÄ ((1,0) ‚ü∂[D] (2,0))),
    by { rw surjective_iff_epi, apply_instance },
    apply this },
  simp [‚Üê abelian.pseudoelement.comp_apply, hD.row_exact‚ÇÇ.1],
end

instance : mono hD.left_cokernel_to_kernel_bottom_left_cokernel_to :=
begin
  apply mono_of_zero_of_map_zero,
  intros a ha,
  obtain ‚ü®a,rfl‚ü© := cokernel_œÄ_surjective _ a,
  dsimp [left_cokernel_to_kernel_bottom_left_cokernel_to] at ha,
  rw ‚Üê eq_zero_iff_kernel_Œπ_eq_zero at ha,
  simp [‚Üê abelian.pseudoelement.comp_apply] at ha,
  simp [abelian.pseudoelement.comp_apply] at ha,
  obtain ‚ü®c,hc‚ü© : ‚àÉ c, ((1,0) ‚ü∂[D] (2,1)) c = ((2,0) ‚ü∂[D] (2,1)) a,
  { apply exists_of_exact _ _ ha,
    apply abelian.exact_cokernel, },
  have : ((1,0) ‚ü∂[D] (2,0)) c = a,
  { apply_fun ((2,0) ‚ü∂[D] (2,1)),
    swap, { rw injective_iff_mono, apply hD.row_mono },
    simpa only [‚Üê hc, ‚Üê abelian.pseudoelement.comp_apply, ‚Üê D.map_comp] },
  simp [‚Üê this],
end .

instance : epi hD.left_cokernel_to_kernel_bottom_left_cokernel_to :=
begin
  apply epi_of_pseudo_surjective,
  intros a,
  let a' := kernel.Œπ hD.bottom_left_cokernel_to a,
  obtain ‚ü®b,hb‚ü© := cokernel_œÄ_surjective _ a',
  have : ((2,1) ‚ü∂[D] (2,2)) b = 0,
  { apply_fun hD.bottom_left_cokernel_to at hb,
    dsimp [a', bottom_left_cokernel_to] at hb,
    simpa [‚Üê abelian.pseudoelement.comp_apply] using hb },
  obtain ‚ü®c,hc‚ü© : ‚àÉ c, ((2,0) ‚ü∂[D] (2,1)) c = b,
  { apply exists_of_exact _ _ this,
    exact hD.row_exact‚ÇÇ },
  use cokernel.œÄ ((1,0) ‚ü∂[D] (2,0)) c,
  apply_fun kernel.Œπ hD.bottom_left_cokernel_to,
  swap, { rw injective_iff_mono, apply_instance },
  change _ = a',
  simp [‚Üê abelian.pseudoelement.comp_apply, ‚Üê hb,
    left_cokernel_to_kernel_bottom_left_cokernel_to],
  simp [abelian.pseudoelement.comp_apply, hc],
end

instance : is_iso hD.left_cokernel_to_kernel_bottom_left_cokernel_to :=
is_iso_of_mono_of_epi _

def Œ¥_aux : cokernel hD.to_top_right_kernel ‚ü∂ kernel hD.bottom_left_cokernel_to :=
cokernel.desc _ (kernel.lift _ (kernel.Œπ _ ‚â´ (_ ‚ü∂[D] _) ‚â´ cokernel.œÄ _) begin
  dsimp [bottom_left_cokernel_to],
  simp,
  rw ‚Üê D.map_comp,
  have : hom (1,1) (2,1) ‚â´ hom (2,1) (2,2) = hom _ _ := rfl,
  rw this,
  simp [abelian.pseudoelement.comp_apply],
end)
begin
  dsimp [to_top_right_kernel],
  simp,
  ext,
  apply_fun kernel.Œπ hD.bottom_left_cokernel_to,
  swap, { rw injective_iff_mono, apply_instance },
  simp [‚Üê abelian.pseudoelement.comp_apply],
  rw [‚Üê category.assoc, ‚Üê D.map_comp],
  have : hom (1,0) (1,1) ‚â´ hom (1,1) (2,1) = hom _ _, refl, rw this, clear this,
  simp [abelian.pseudoelement.comp_apply],
end

def to_kernel : D.obj (0,2) ‚ü∂ kernel ((1,2) ‚ü∂[D] (2,2)) :=
kernel.lift _ (_ ‚ü∂[D] _) (hD.col_exact‚ÇÅ _).1

instance : mono hD.to_kernel :=
begin
  dsimp [to_kernel],
  haveI : mono ((0,2) ‚ü∂[D] (1,2)) := hD.col_mono _,
  apply_instance,
end

instance : epi hD.to_kernel :=
begin
  dsimp [to_kernel],
  have : exact ((0,2) ‚ü∂[D] (1,2)) ((1,2) ‚ü∂[D] (2,2)) := hD.col_exact‚ÇÅ _,
  apply_instance,
end

instance : is_iso hD.to_kernel :=
is_iso_of_mono_of_epi _

def cokernel_to : cokernel ((1,0) ‚ü∂[D] (2,0)) ‚ü∂ D.obj (3,0) :=
cokernel.desc _ (_ ‚ü∂[D] _) (hD.col_exact‚ÇÇ _).1

instance : mono hD.cokernel_to :=
begin
  dsimp [cokernel_to],
  have : exact ((1,0) ‚ü∂[D] (2,0)) ((2,0) ‚ü∂[D] (3,0)) := hD.col_exact‚ÇÇ _,
  apply_instance,
end

instance : epi hD.cokernel_to :=
begin
  dsimp [cokernel_to],
  have : epi ((2,0) ‚ü∂[D] (3,0)) := hD.col_epi _,
  apply_instance,
end

instance : is_iso hD.cokernel_to :=
is_iso_of_mono_of_epi _

def Œ¥ : D.obj (0,2) ‚ü∂ D.obj (3,0) :=
  hD.to_kernel ‚â´ inv hD.cokernel_to_top_right_kernel_to_right_kernel ‚â´  -- <-- this is an iso
  hD.Œ¥_aux ‚â´ -- <- this is the key
  inv hD.left_cokernel_to_kernel_bottom_left_cokernel_to ‚â´ hD.cokernel_to -- <-- this is an iso

def to_Œ¥_aux : D.obj (0,1) ‚ü∂ cokernel hD.to_top_right_kernel :=
kernel.lift _ ((0,1) ‚ü∂[D] (1,1)) begin
  rw [(show (hom (1,1) (2,2) = hom (1,1) (2,1) ‚â´ hom _ _), by refl), D.map_comp,
    ‚Üê category.assoc, (hD.col_exact‚ÇÅ _).1],
  simp,
end ‚â´ cokernel.œÄ _

def from_Œ¥_aux : kernel hD.bottom_left_cokernel_to ‚ü∂ D.obj (3,1) :=
kernel.Œπ _ ‚â´ cokernel.desc _ ((2,1) ‚ü∂[D] (3,1)) begin
  rw [(show hom (1,0) (2,1) = hom (1,0) (1,1) ‚â´ hom (1,1) (2,1), by refl),
    D.map_comp, category.assoc, (hD.col_exact‚ÇÇ _).w],
  simp,
end

theorem exact_to_Œ¥_aux : exact hD.to_Œ¥_aux hD.Œ¥_aux :=
begin
  apply exact_of_pseudo_exact,
  split,
  { intros a,
    dsimp [Œ¥_aux, to_Œ¥_aux],
    rw ‚Üê eq_zero_iff_kernel_Œπ_eq_zero,
    simp only [‚Üêabelian.pseudoelement.comp_apply, cokernel.œÄ_desc,
      kernel.lift_Œπ_assoc, category.assoc, kernel.lift_Œπ],
    simp [abelian.pseudoelement.comp_apply, eq_zero_of_exact (hD.col_exact‚ÇÅ _)] },
  { intros b hb,
    obtain ‚ü®b,rfl‚ü© := cokernel_œÄ_surjective _ b,
    dsimp [Œ¥_aux] at hb,
    rw ‚Üê eq_zero_iff_kernel_Œπ_eq_zero at hb,
    simp only [‚Üêabelian.pseudoelement.comp_apply, cokernel.œÄ_desc, kernel.lift_Œπ] at hb,
    simp only [abelian.pseudoelement.comp_apply] at hb,
    let b' := kernel.Œπ ((1,1) ‚ü∂[D] (2,2)) b,
    obtain ‚ü®c,hc‚ü© := exists_of_cokernel_œÄ_eq_zero _ _ hb, clear hb,
    change _ = ((1,1) ‚ü∂[D] (2,1)) b' at hc,
    rw [(show hom (1,0) (2,1) = hom (1,0) (1,1) ‚â´ hom _ _, by refl), D.map_comp,
      abelian.pseudoelement.comp_apply] at hc,
    obtain ‚ü®z,h1,h2‚ü© := sub_of_eq_image _ _ _ hc.symm, clear hc,
    specialize h2 _ ((1,1) ‚ü∂[D] (1,2)) (eq_zero_of_exact hD.row_exact‚ÇÅ _),
    obtain ‚ü®w,hw‚ü© : ‚àÉ w, ((0,1) ‚ü∂[D] (1,1)) w = z := exists_of_exact (hD.col_exact‚ÇÅ _) _ h1,
    clear h1,
    use w,
    dsimp [b'] at h2,
    dsimp [to_Œ¥_aux],
    simp only [abelian.pseudoelement.comp_apply],
    apply_fun hD.cokernel_to_top_right_kernel_to_right_kernel,
    swap, { rw injective_iff_mono, apply_instance },
    dsimp [cokernel_to_top_right_kernel_to_right_kernel],
    simp only [‚Üêabelian.pseudoelement.comp_apply, cokernel.œÄ_desc, category.assoc],
    simp only [abelian.pseudoelement.comp_apply],
    apply_fun kernel.Œπ ((1,2) ‚ü∂[D] (2,2)),
    swap, { rw injective_iff_mono, apply_instance },
    simp only [‚Üêabelian.pseudoelement.comp_apply, kernel.lift_Œπ_assoc,
      category.assoc, kernel.lift_Œπ],
    simp only [abelian.pseudoelement.comp_apply],
    rw [hw, h2] }
end

theorem exact_from_Œ¥_aux : exact hD.Œ¥_aux hD.from_Œ¥_aux :=
begin
  apply exact_of_pseudo_exact,
  split,
  { intros a,
    dsimp [Œ¥_aux, from_Œ¥_aux],
    obtain ‚ü®a,rfl‚ü© := cokernel_œÄ_surjective _ a,
    simp only [‚Üêabelian.pseudoelement.comp_apply,
      cokernel.œÄ_desc, kernel.lift_Œπ_assoc, category.assoc],
    simp [abelian.pseudoelement.comp_apply, eq_zero_of_exact (hD.col_exact‚ÇÇ _)] },
  { intros b hb,
    let b' := kernel.Œπ hD.bottom_left_cokernel_to b,
    obtain ‚ü®c,hc‚ü© := cokernel_œÄ_surjective _ b',
    simp only [from_Œ¥_aux, abelian.pseudoelement.comp_apply] at hb,
    change cokernel.desc ((1,0) ‚ü∂[D] (2,1)) _ _ b' = 0 at hb,
    rw ‚Üê hc at hb,
    simp only [‚Üêabelian.pseudoelement.comp_apply, cokernel.œÄ_desc] at hb,
    obtain ‚ü®d,hd‚ü© : ‚àÉ d, ((1,1) ‚ü∂[D] (2,1)) d = c := exists_of_exact (hD.col_exact‚ÇÇ _) _ hb,
    obtain ‚ü®e,he‚ü© : ‚àÉ e, kernel.Œπ ((1,1) ‚ü∂[D] (2,2)) e = d,
    { apply exists_of_exact _ _ (_ : ((1,1) ‚ü∂[D] (2,2)) d = 0),
      { apply exact_kernel_Œπ },
      dsimp [b'] at hc,
      apply_fun hD.bottom_left_cokernel_to at hc,
      simp only [bottom_left_cokernel_to, ‚Üêabelian.pseudoelement.comp_apply, cokernel.œÄ_desc] at hc,
      rw [(show hom (1,1) (2,2) = hom (1,1) (2,1) ‚â´ hom (2,1) (2,2), by refl), D.map_comp,
        abelian.pseudoelement.comp_apply, hd, hc],
      simp only [abelian.pseudoelement.comp_apply],
      change hD.bottom_left_cokernel_to (kernel.Œπ hD.bottom_left_cokernel_to b) = 0,
      apply kernel_Œπ_apply },
    use cokernel.œÄ hD.to_top_right_kernel e,
    apply_fun kernel.Œπ hD.bottom_left_cokernel_to,
    swap, { rw injective_iff_mono, apply_instance },
    change _ = b',
    dsimp [Œ¥_aux],
    simp only [‚Üêabelian.pseudoelement.comp_apply, cokernel.œÄ_desc, kernel.lift_Œπ],
    simp only [abelian.pseudoelement.comp_apply],
    rw [he, hd, hc] }
end

theorem exact_to_Œ¥ : exact ((0,1) ‚ü∂[D] (0,2)) hD.Œ¥ :=
begin
  dsimp [Œ¥],
  rw [exact_is_iso_iff, exact_is_iso_iff, exact_comp_iso],
  convert hD.exact_to_Œ¥_aux using 1,
  rw is_iso.comp_inv_eq,
  dsimp [to_kernel, to_Œ¥_aux, cokernel_to_top_right_kernel_to_right_kernel],
  ext,
  simp only [cokernel.œÄ_desc, kernel.lift_Œπ_assoc, category.assoc, kernel.lift_Œπ],
  simpa only [‚Üê D.map_comp],
end

theorem exact_from_Œ¥ : exact hD.Œ¥ ((3,0) ‚ü∂[D] (3,1)) :=
begin
  dsimp [Œ¥],
  rw [‚Üê category.assoc, ‚Üê category.assoc, ‚Üê exact_is_iso_iff, exact_iso_comp],
  convert hD.exact_from_Œ¥_aux using 1,
  rw [category.assoc, is_iso.inv_comp_eq],
  dsimp [cokernel_to, left_cokernel_to_kernel_bottom_left_cokernel_to, from_Œ¥_aux],
  ext,
  simp only [cokernel.œÄ_desc, kernel.lift_Œπ_assoc, cokernel.œÄ_desc_assoc, category.assoc],
  simpa only [‚Üê D.map_comp],
end

end delta

local attribute [instance] limits.has_zero_object.has_zero

lemma exact_zero_to_ker_row‚ÇÅ_to_top_left (hD : is_snake_input D) :
  exact (0 : 0 ‚ü∂ kernel ((1,0) ‚ü∂[D] (1,1))) hD.ker_row‚ÇÅ_to_top_left :=
begin
  haveI : mono hD.ker_row‚ÇÅ_to_top_left := ker_row‚ÇÅ_to_top_left_mono hD,
  apply exact_zero_left_of_mono,
end

lemma exact_bottom_right_to_coker_row‚ÇÇ_to_zero (hD : is_snake_input D) :
  exact hD.bottom_right_to_coker_row‚ÇÇ (0 : cokernel ((2,1) ‚ü∂[D] (2,2)) ‚ü∂ 0) :=
begin
  rw ‚Üê epi_iff_exact_zero_right,
  apply bottom_right_to_coker_row‚ÇÇ_epi hD,
end

lemma ten_term_exact_seq (hD : is_snake_input D) :
  exact_seq ùíú [
    (0 : 0 ‚ü∂ kernel ((1,0) ‚ü∂[D] (1,1))),
    hD.ker_row‚ÇÅ_to_top_left, (0,0) ‚ü∂[D] (0,1), (0,1) ‚ü∂[D] (0,2),
    hD.Œ¥,
    (3,0) ‚ü∂[D] (3,1), (3,1) ‚ü∂[D] (3,2), hD.bottom_right_to_coker_row‚ÇÇ,
    (0 : cokernel ((2,1) ‚ü∂[D] (2,2)) ‚ü∂ 0)] :=
begin
  refine exact_seq.cons _ _ hD.exact_zero_to_ker_row‚ÇÅ_to_top_left _ _,
  refine exact_seq.cons _ _ hD.long_row‚ÇÄ_exact _ _,
  refine exact_seq.cons _ _ hD.row_exact‚ÇÄ _ _,
  refine exact_seq.cons _ _ hD.exact_to_Œ¥ _ _,
  refine exact_seq.cons _ _ hD.exact_from_Œ¥ _ _,
  refine exact_seq.cons _ _ hD.row_exact‚ÇÉ _ _,
  refine exact_seq.cons _ _ hD.long_row‚ÇÉ_exact _ _,
  refine exact_seq.cons _ _ hD.exact_bottom_right_to_coker_row‚ÇÇ_to_zero _ _,
  refine exact_seq.single _,
end

lemma eight_term_exact_seq (hD : is_snake_input D) :
  exact_seq ùíú [hD.ker_row‚ÇÅ_to_top_left, (0,0) ‚ü∂[D] (0,1), (0,1) ‚ü∂[D] (0,2),
    hD.Œ¥,
    (3,0) ‚ü∂[D] (3,1), (3,1) ‚ü∂[D] (3,2), hD.bottom_right_to_coker_row‚ÇÇ] :=
exact_seq.extract hD.ten_term_exact_seq 1 7

lemma six_term_exact_seq (hD : is_snake_input D) :
  exact_seq ùíú [(0,0) ‚ü∂[D] (0,1), (0,1) ‚ü∂[D] (0,2), hD.Œ¥, (3,0) ‚ü∂[D] (3,1), (3,1) ‚ü∂[D] (3,2)] :=
exact_seq.extract hD.eight_term_exact_seq 1 5

end is_snake_input

variables (ùíú)

structure snake_input extends snake_diagram ‚•§ ùíú :=
(is_snake_input : is_snake_input to_functor)

namespace snake_input

instance : category (snake_input ùíú) := induced_category.category to_functor

@[simps] def proj (x : snake_diagram) : snake_input ùíú ‚•§ ùíú :=
induced_functor _ ‚ãô (evaluation _ _).obj x

def mk_of_short_exact_sequence_hom (A B : short_exact_sequence ùíú) (f : A ‚ü∂ B) :
  snake_input ùíú :=
‚ü®snake_diagram.mk_of_short_exact_sequence_hom A B f,
is_snake_input.mk_of_short_exact_sequence_hom A B f‚ü©

def kernel_sequence (D : snake_input ùíú)
  (h1 : mono ((1,0) ‚ü∂[D] (1,1))) (h2 : is_zero (D.obj (3,0))) :
  short_exact_sequence ùíú :=
{ fst := D.obj (0,0),
  snd := D.obj (0,1),
  trd := D.obj (0,2),
  f := (0,0) ‚ü∂[D] (0,1),
  g := (0,1) ‚ü∂[D] (0,2),
  mono' :=
  begin
    letI := h1,
    refine abelian.pseudoelement.mono_of_zero_of_map_zero _ (Œª a ha, _),
    obtain ‚ü®b, hb‚ü© := is_snake_input.exists_of_exact
      (is_snake_input.long_row‚ÇÄ_exact D.is_snake_input) a ha,
    rw [‚Üê hb],
    simp [is_snake_input.ker_row‚ÇÅ_to_top_left, limits.kernel.Œπ_of_mono ((1,0) ‚ü∂[D] (1,1))]
  end,
  epi' :=
  begin
    rw (abelian.tfae_epi (D.obj (3,0)) ((0,1) ‚ü∂[D] (0,2))).out 0 2,
    convert D.2.exact_to_Œ¥,
    apply h2.eq_of_tgt,
  end,
  exact' := D.2.row_exact _ }

end snake_input

class has_snake_lemma :=
(Œ¥ : snake_input.proj ùíú (0,2) ‚ü∂ snake_input.proj ùíú (3,0))
(exact_Œ¥ : ‚àÄ (D : snake_input ùíú), exact ((0,1) ‚ü∂[D] (0,2)) (Œ¥.app D))
(Œ¥_exact : ‚àÄ (D : snake_input ùíú), exact (Œ¥.app D) ((3,0) ‚ü∂[D.1] (3,1))) -- why can't I write `‚ü∂[D]`

namespace snake_lemma

variables [has_snake_lemma ùíú]

variables {ùíú}

def Œ¥ (D : snake_input ùíú) : D.obj (0,2) ‚ü∂ D.obj (3,0) := has_snake_lemma.Œ¥.app D

lemma exact_Œ¥ (D : snake_input ùíú) : exact ((0,1) ‚ü∂[D] (0,2)) (Œ¥ D) :=
has_snake_lemma.exact_Œ¥ D

lemma Œ¥_exact (D : snake_input ùíú) : exact (Œ¥ D) ((3,0) ‚ü∂[D] (3,1)) :=
has_snake_lemma.Œ¥_exact D

end snake_lemma

end

end category_theory
