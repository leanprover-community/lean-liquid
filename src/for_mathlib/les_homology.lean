import data.matrix.notation

import for_mathlib.snake_lemma2
import for_mathlib.short_exact_sequence

noncomputable theory

open category_theory
open category_theory.limits

universes v u

lemma preadditive.exact_of_iso_of_exact' {D : Type*} [category D] [abelian D]
  {A‚ÇÅ B‚ÇÅ C‚ÇÅ A‚ÇÇ B‚ÇÇ C‚ÇÇ : D}
  (f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ) (g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ) (f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ) (g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ)
  (Œ± : A‚ÇÅ ‚âÖ A‚ÇÇ) (Œ≤ : B‚ÇÅ ‚âÖ B‚ÇÇ) (Œ≥ : C‚ÇÅ ‚âÖ C‚ÇÇ) (hsq‚ÇÅ : Œ±.hom ‚â´ f‚ÇÇ = f‚ÇÅ ‚â´ Œ≤.hom)
  (hsq‚ÇÇ : Œ≤.hom ‚â´ g‚ÇÇ = g‚ÇÅ ‚â´ Œ≥.hom)
  (h : exact f‚ÇÅ g‚ÇÅ) :
  exact f‚ÇÇ g‚ÇÇ :=
preadditive.exact_of_iso_of_exact f‚ÇÅ g‚ÇÅ f‚ÇÇ g‚ÇÇ (arrow.iso_mk Œ± Œ≤ hsq‚ÇÅ) (arrow.iso_mk Œ≤ Œ≥ hsq‚ÇÇ) rfl h

namespace homological_complex

variables {C : Type u} [category.{v} C] [abelian C]
variables {Œπ : Type*} {c : complex_shape Œπ}

def mod_boundaries (A : homological_complex C c) (j : Œπ) : C :=
cokernel ((A.boundaries j).arrow)

def mod_boundaries_map {A B : homological_complex C c} (f : A ‚ü∂ B) (j : Œπ) :
  A.mod_boundaries j ‚ü∂ B.mod_boundaries j :=
cokernel.map _ _ (boundaries_map f j) (f.f j) $ by { rw image_subobject_map_arrow, refl }

@[simps]
def mod_boundaries_functor (j : Œπ) : homological_complex C c ‚•§ C :=
{ obj := Œª A, A.mod_boundaries j,
  map := Œª A B f, mod_boundaries_map f j,
  map_id' := Œª A,
  begin
    delta mod_boundaries mod_boundaries_map cokernel.map, ext,
    show cokernel.œÄ (A.boundaries j).arrow ‚â´ _ = cokernel.œÄ (A.boundaries j).arrow ‚â´ _,
    simp only [cokernel.œÄ_desc, category.id_comp, id_f, category.comp_id],
  end,
  map_comp' := Œª X Y Z f g,
  begin
    delta mod_boundaries mod_boundaries_map cokernel.map, ext,
    show cokernel.œÄ (X.boundaries j).arrow ‚â´ _ = cokernel.œÄ (X.boundaries j).arrow ‚â´ _,
    simp only [cokernel.œÄ_desc, cokernel.œÄ_desc_assoc, comp_f, category.assoc],
  end }
.

-- generalize to chain complexes over other shapes
@[simps]
def homology_to_mod_boundaries (i : Œπ) :
  homology_functor C c i ‚ü∂ mod_boundaries_functor i :=
{ app := Œª A, cokernel.map _ _ (ùüô _) ((A.cycles i).arrow)
    (by simp only [boundaries_to_cycles_arrow, category.id_comp]),
  naturality' := Œª A B f,
  begin
    ext,
    simp only [homology_functor_map, mod_boundaries_functor_map, homology.œÄ_map_assoc],
    delta mod_boundaries_map homology.œÄ cokernel.map cycles,
    simp only [cokernel.œÄ_desc, cokernel.œÄ_desc_assoc, comp_f, category.assoc,
      kernel_subobject_map_arrow_assoc, hom.sq_from_left],
  end }
.

variables (A : homological_complex C c) (i j : Œπ) (hij : c.rel i j)

def delta_to_boundaries : A.X i ‚ü∂ (A.boundaries j) :=
(X_prev_iso A hij).inv ‚â´ factor_thru_image_subobject _

instance delta_to_boundaries_epi : epi (delta_to_boundaries A i j hij) :=
epi_comp _ _

@[ext] lemma boundaries.ext' {X : C} (f g : (boundaries A j : C) ‚ü∂ X)
  (h : factor_thru_image_subobject _ ‚â´ f = factor_thru_image_subobject _ ‚â´ g) : f = g :=
by rwa cancel_epi (factor_thru_image_subobject (A.d_to j)) at h

@[simp, reassoc] lemma delta_to_boundaries_comp_arrow :
  (delta_to_boundaries A i j hij) ‚â´ (boundaries A j).arrow = A.d i j :=
by rw [delta_to_boundaries, category.assoc, image_subobject_arrow_comp, X_prev_iso_comp_d_to]

@[simp, reassoc] lemma boundaries_arrow_comp_delta_to_boundaries :
  (boundaries _ i).arrow ‚â´ delta_to_boundaries A i j hij = 0 :=
begin
  ext,
  simp only [image_subobject_arrow_comp_assoc, category.assoc,
    delta_to_boundaries_comp_arrow, comp_zero, zero_comp,
    ‚Üê d_from_comp_X_next_iso A hij, reassoc_of (d_to_comp_d_from A)],
end

def delta_to_cycles : A.X i ‚ü∂ (A.cycles j) :=
delta_to_boundaries _ i j hij ‚â´ boundaries_to_cycles _ _

@[simp, reassoc] lemma delta_to_cycles_comp_arrow :
  (delta_to_cycles A i j hij) ‚â´ (cycles A j).arrow = A.d i j :=
by rw [delta_to_cycles, category.assoc, boundaries_to_cycles_arrow, delta_to_boundaries_comp_arrow]

@[simp, reassoc] lemma boundaries_arrow_comp_delta_to_cycles :
  (boundaries _ _).arrow ‚â´ delta_to_cycles A i j hij = 0 :=
by rw [delta_to_cycles, ‚Üê category.assoc, boundaries_arrow_comp_delta_to_boundaries, zero_comp]

@[simps]
def mod_boundaries_to_cycles : mod_boundaries_functor i ‚ü∂ cycles_functor C c j :=
{ app := Œª A, cokernel.desc _ (delta_to_cycles _ i j hij)
   (boundaries_arrow_comp_delta_to_cycles _ i j hij),
  naturality' := Œª A B f,
  begin
    ext, show cokernel.œÄ _ ‚â´ _ = cokernel.œÄ _ ‚â´ _,
    simp only [homology_functor_map, mod_boundaries_functor_map, homology.œÄ_map_assoc],
    delta mod_boundaries_map homology.œÄ cokernel.map,
    simp only [category.assoc, cycles_functor_map, cycles_map_arrow, hom.comm,
      cokernel.œÄ_desc_assoc, delta_to_cycles_comp_arrow_assoc, delta_to_cycles_comp_arrow]
  end }
.

@[simps]
def cycles_to_homology : cycles_functor C c i ‚ü∂ homology_functor C c i :=
{ app := Œª A, cokernel.œÄ _,
  naturality' := Œª A B f,
  begin
    simp only [cycles_functor_map, homology_functor_map],
    delta homology.map,
    rw cokernel.œÄ_desc, refl,
  end }

open_locale zero_object

lemma _root_.option.eq_none_or_eq_some {Œ± : Type*} : ‚àÄ (o : option Œ±), o = none ‚à® ‚àÉ a, o = some a
| option.none     := or.inl rfl
| (option.some a) := or.inr ‚ü®a, rfl‚ü©

lemma X_next_is_zero (A : homological_complex C c) (i : Œπ) (hi : c.next i = none) :
  is_zero (A.X_next i) :=
begin
  apply is_zero_of_iso_of_zero (is_zero_zero _),
  apply (X_next_iso_zero A hi).symm,
end

lemma X_prev_is_zero (A : homological_complex C c) (i : Œπ) (hi : c.prev i = none) :
  is_zero (A.X_prev i) :=
begin
  apply is_zero_of_iso_of_zero (is_zero_zero _),
  apply (X_prev_iso_zero A hi).symm,
end

lemma next_eq_zero {A‚ÇÅ A‚ÇÇ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (i : Œπ) (hi : c.next i = none) :
  f.next i = 0 :=
(X_next_is_zero _ _ hi).eq_zero_of_src _

lemma prev_eq_zero {A‚ÇÅ A‚ÇÇ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (i : Œπ) (hi : c.prev i = none) :
  f.prev i = 0 :=
(X_prev_is_zero _ _ hi).eq_zero_of_src _

lemma exact_next {A‚ÇÅ A‚ÇÇ A‚ÇÉ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ)
  (i j : Œπ) (hij : c.rel i j) (h : exact (f.f j) (g.f j)) :
  exact (f.next i) (g.next i) :=
begin
  refine preadditive.exact_of_iso_of_exact' (f.f j) (g.f j) _ _
    (X_next_iso A‚ÇÅ hij).symm (X_next_iso A‚ÇÇ hij).symm (X_next_iso A‚ÇÉ hij).symm _ _ h;
  simp only [hom.next_eq _ hij, iso.symm_hom, iso.inv_hom_id_assoc],
end

lemma exact_next' {A‚ÇÅ A‚ÇÇ A‚ÇÉ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ) (i : Œπ)
  (h : ‚àÄ n, exact (f.f n) (g.f n)) : exact (f.next i) (g.next i) :=
begin
  rcases (c.next i).eq_none_or_eq_some with (hi | ‚ü®‚ü®j, hij‚ü©, hi‚ü©),
  { rw [next_eq_zero _ _ hi],
    apply_with exact_zero_left_of_mono { instances := ff },
    { apply_instance },
    { refine ‚ü®Œª Z a b H, _‚ü©, apply (X_next_is_zero _ _ hi).eq_of_tgt } },
  exact exact_next f g i j hij (h j)
end

lemma exact_prev {A‚ÇÅ A‚ÇÇ A‚ÇÉ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ)
  (i j : Œπ) (hij : c.rel i j) (h : exact (f.f i) (g.f i)) :
  exact (f.prev j) (g.prev j) :=
begin
  refine preadditive.exact_of_iso_of_exact' (f.f i) (g.f i) _ _
    (X_prev_iso A‚ÇÅ hij).symm (X_prev_iso A‚ÇÇ hij).symm (X_prev_iso A‚ÇÉ hij).symm _ _ h;
  simp only [hom.prev_eq _ hij, iso.symm_hom, iso.inv_hom_id_assoc],
end

lemma exact_prev' {A‚ÇÅ A‚ÇÇ A‚ÇÉ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ) (j : Œπ)
  (h : ‚àÄ n, exact (f.f n) (g.f n)) : exact (f.prev j) (g.prev j) :=
begin
  rcases (c.prev j).eq_none_or_eq_some with (hj | ‚ü®‚ü®i, hij‚ü©, hj‚ü©),
  { rw [prev_eq_zero _ _ hj],
    apply_with exact_zero_left_of_mono { instances := ff },
    { apply_instance },
    { refine ‚ü®Œª Z a b H, _‚ü©, apply (X_prev_is_zero _ _ hj).eq_of_tgt } },
  exact exact_prev f g i j hij (h i)
end

lemma mono_next {A‚ÇÅ A‚ÇÇ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ)
  (i j : Œπ) (hij : c.rel i j) [mono (f.f j)] :
  mono (f.next i) :=
begin
  rw hom.next_eq _ hij,
  apply_with mono_comp { instances := ff },
  { apply_instance },
  { apply mono_comp }
end

instance mono_next' {A‚ÇÅ A‚ÇÇ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ)
  (i : Œπ) [‚àÄ n, mono (f.f n)] :
  mono (f.next i) :=
begin
  rcases (c.next i).eq_none_or_eq_some with (hi | ‚ü®‚ü®j, hij‚ü©, hi‚ü©),
  { refine ‚ü®Œª Z a b H, _‚ü©, apply (X_next_is_zero _ _ hi).eq_of_tgt },
  exact mono_next f i j hij
end

lemma epi_prev {A‚ÇÅ A‚ÇÇ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ)
  (i j : Œπ) (hij : c.rel i j) [epi (f.f i)] :
  epi (f.prev j) :=
begin
  rw hom.prev_eq _ hij,
  apply_with epi_comp { instances := ff },
  { apply_instance },
  { apply epi_comp }
end

instance epi_prev' {A‚ÇÅ A‚ÇÇ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ)
  (j : Œπ) [‚àÄ n, epi (f.f n)] :
  epi (f.prev j) :=
begin
  rcases (c.prev j).eq_none_or_eq_some with (hj | ‚ü®‚ü®i, hij‚ü©, hj‚ü©),
  { refine ‚ü®Œª Z a b H, _‚ü©, apply (X_prev_is_zero _ _ hj).eq_of_src },
  exact epi_prev f i j hij
end

instance {A B : homological_complex C c} (f : A ‚ü∂ B) [‚àÄ n, epi (f.f n)] (i : Œπ) :
  epi (boundaries_map f i) :=
begin
  let sq := hom.sq_to f i,
  haveI : epi sq.left := by { dsimp, apply_instance, },
  apply_with (epi_of_epi (factor_thru_image_subobject _)) { instances := ff },
  suffices : factor_thru_image_subobject (A.d_to i) ‚â´
      boundaries_map f i =
    sq.left ‚â´ factor_thru_image_subobject (B.d_to i),
  { rw this, apply epi_comp, },
  ext,
  simp only [category.assoc, image_subobject_map_arrow, hom.sq_to_right,
    image_subobject_arrow_comp_assoc, hom.sq_to_left, image_subobject_arrow_comp, hom.comm_to],
end

lemma exact_kernel_subobject_arrow (A B : C) (f : A ‚ü∂ B) : exact (kernel_subobject f).arrow f :=
by { rw [‚Üê kernel_subobject_arrow, exact_iso_comp], exact exact_kernel_Œπ }

lemma exact_cycles_arrow (A : homological_complex C c) (i : Œπ) :
  exact (cycles A i).arrow (d_from A i) :=
exact_kernel_subobject_arrow _ _ _

lemma exact_cycles_map {A‚ÇÅ A‚ÇÇ A‚ÇÉ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ)
  (hfg : ‚àÄ n, short_exact (f.f n) (g.f n)) (j : Œπ) :
  exact (cycles_map f j) (cycles_map g j) :=
begin
  have sq‚ÇÅ :  d_from A‚ÇÅ j ‚â´ f.next j = f.f j ‚â´ d_from A‚ÇÇ j := (hom.comm_from _ _).symm,
  have sq‚ÇÇ :  d_from A‚ÇÇ j ‚â´ g.next j = g.f j ‚â´ d_from A‚ÇÉ j := (hom.comm_from _ _).symm,
  suffices S : snake
    ‚Üë(cycles A‚ÇÅ j) ‚Üë(cycles A‚ÇÇ j) ‚Üë(cycles A‚ÇÉ j)
    (A‚ÇÅ.X j) (A‚ÇÇ.X j) (A‚ÇÉ.X j)
    _ _ _
    _ _ _
    (cycles_map f j) (cycles_map g j)
    (cycles _ j).arrow (cycles _ j).arrow (cycles _ j).arrow
    (f.f j) (g.f j)
    (A‚ÇÅ.d_from j) (A‚ÇÇ.d_from j) (A‚ÇÉ.d_from j)
    (f.next j) (g.next j)
    (cokernel.œÄ $ A‚ÇÅ.d_from j) (cokernel.œÄ $ A‚ÇÇ.d_from j) (cokernel.œÄ $ A‚ÇÉ.d_from j)
    (cokernel.map _ _ _ _ sq‚ÇÅ) (cokernel.map _ _ _ _ sq‚ÇÇ),
  { exact S.six_term_exact_seq.pair },
  have hfg_epi := Œª j, (hfg j).epi,
  have hfg_mono := Œª j, (hfg j).mono,
  resetI,
  fsplit,
  { exact (hfg j).exact },
  { exact exact_next' _ _ _ (Œª i, (hfg i).exact), },
  { refine (exact_cycles_arrow _ _).cons (abelian.exact_cokernel _).exact_seq, },
  { refine (exact_cycles_arrow _ _).cons (abelian.exact_cokernel _).exact_seq, },
  { refine (exact_cycles_arrow _ _).cons (abelian.exact_cokernel _).exact_seq, },
  { rw cycles_map_arrow, },
  { rw cycles_map_arrow, },
  { exact sq‚ÇÅ },
  { exact sq‚ÇÇ },
  { apply cokernel.œÄ_desc, },
  { apply cokernel.œÄ_desc, },
end

variables {A‚ÇÅ A‚ÇÇ A‚ÇÉ : homological_complex C c} (f : A‚ÇÅ ‚ü∂ A‚ÇÇ) (g : A‚ÇÇ ‚ü∂ A‚ÇÉ)
variables (hfg : ‚àÄ n, short_exact (f.f n) (g.f n))

lemma mono_cycles_map (hfg : ‚àÄ n, short_exact (f.f n) (g.f n)) (i : Œπ) :
  mono (cycles_map f i) :=
begin
  apply_with (mono_of_mono _ (subobject.arrow _)) { instances := ff },
  rw cycles_map_arrow,
  haveI : mono (f.f i) := (hfg i).mono,
  apply mono_comp,
end

@[simp] lemma image_subobject_arrow {X : C} (S : subobject X) :
  image_subobject (S.arrow) = S :=
begin
  delta image_subobject,
  ext,
  swap,
  { exact limits.image_mono_iso_source _ },
  { simp }
end

@[simp] lemma kernel_subobject_cokernel.œÄ {X : C} (S : subobject X) :
  kernel_subobject (cokernel.œÄ S.arrow) = S :=
begin
  delta kernel_subobject,
  ext,
  swap,
  { exact (abelian.image_iso_image _).trans (limits.image_mono_iso_source _) },
  { simp }
end

lemma exact.congr {X‚ÇÅ X‚ÇÇ Y Z‚ÇÅ Z‚ÇÇ : C} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y) (g‚ÇÅ : Y ‚ü∂ Z‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y) (g‚ÇÇ : Y ‚ü∂ Z‚ÇÇ)
  (h : exact f‚ÇÅ g‚ÇÅ) (him : image_subobject f‚ÇÅ = image_subobject f‚ÇÇ)
  (hker : kernel_subobject g‚ÇÅ = kernel_subobject g‚ÇÇ) :
  exact f‚ÇÇ g‚ÇÇ :=
by rwa [abelian.exact_iff_image_eq_kernel, ‚Üê him, ‚Üê hker, ‚Üê abelian.exact_iff_image_eq_kernel]

lemma exact_column :
exact_seq C [(kernel.Œπ (A.d_to j)), (A.d_to j), (cokernel.œÄ (A.boundaries j).arrow)] :=
exact_kernel_Œπ.cons $
(exact.congr (boundaries A j).arrow _ _ _ (abelian.exact_cokernel _) (image_subobject_arrow _) rfl).exact_seq

lemma exact_mod_boundaries_map (hfg : ‚àÄ n, short_exact (f.f n) (g.f n)) (j : Œπ) :
  exact (mod_boundaries_map f j) (mod_boundaries_map g j) :=
begin
  have sq1 : A‚ÇÅ.d_to j ‚â´ f.f j = f.prev j ‚â´ A‚ÇÇ.d_to j := (f.comm_to _).symm,
  have sq2 : A‚ÇÇ.d_to j ‚â´ g.f j = g.prev j ‚â´ A‚ÇÉ.d_to j := (g.comm_to _).symm,
  suffices S : snake
    -- the objects
         (kernel _)           (kernel _)           (kernel _)
        (A‚ÇÅ.X_prev j)         (A‚ÇÇ.X_prev j)         (A‚ÇÉ.X_prev j)
          (A‚ÇÅ.X j)             (A‚ÇÇ.X j)             (A‚ÇÉ.X j)
    (mod_boundaries _ j) (mod_boundaries _ j) (mod_boundaries _ j)
    -- the morphisms
    (kernel.map _ _ _ _ sq1) (kernel.map _ _ _ _ sq2)
    (kernel.Œπ $ A‚ÇÅ.d_to j) (kernel.Œπ $ A‚ÇÇ.d_to j) (kernel.Œπ $ A‚ÇÉ.d_to j)
    (f.prev j) (g.prev j)
    (A‚ÇÅ.d_to j) (A‚ÇÇ.d_to j) (A‚ÇÉ.d_to j)
    (f.f j) (g.f j)
    (cokernel.œÄ _) (cokernel.œÄ _) (cokernel.œÄ _)
    (mod_boundaries_map f j) (mod_boundaries_map g j),
  { exact (S.six_term_exact_seq.drop 3).pair },
  have hfg_epi := Œª n, (hfg n).epi,
  have hfg_mono := Œª n, (hfg n).mono,
  resetI,
  fsplit,
  { exact exact_prev' _ _ _ (Œª n, (hfg n).exact) },
  { exact (hfg j).exact },
  { apply exact_column },
  { apply exact_column },
  { apply exact_column },
  { simp },
  { simp },
  { exact sq1 },
  { exact sq2 },
  { simp [mod_boundaries_map] },
  { simp [mod_boundaries_map] }
end

lemma epi_mod_boundaries_map (hfg : ‚àÄ n, short_exact (f.f n) (g.f n)) (i : Œπ) :
  epi (mod_boundaries_map g i) :=
begin
  apply_with (epi_of_epi (cokernel.œÄ _)) { instances := ff },
  haveI : epi (g.f i) := (hfg i).epi,
  have : cokernel.œÄ _ ‚â´ mod_boundaries_map g i = g.f i ‚â´ cokernel.œÄ _ := cokernel.œÄ_desc _ _ _,
  rw this,
  apply epi_comp,
end

lemma mono_homology_to_mod_boundaries :
  mono ((homology_to_mod_boundaries i).app A) :=
cokernel.map_mono_of_epi_of_mono
  (boundaries A i) (cycles A i)
  (boundaries A i) (A.X i)
  _ _ _ _ _

variables {C}

@[simp] lemma image_subobject_comp_eq_of_epi {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [epi f] :
  image_subobject (f ‚â´ g) = image_subobject g :=
begin
  delta image_subobject,
  haveI : is_iso (image.pre_comp f g) := is_iso_of_mono_of_epi _,
  ext, swap,
  { exact as_iso (image.pre_comp f g) },
  { simp only [as_iso_hom, image.pre_comp_Œπ], },
end

@[simp] lemma kernel_subobject_comp_eq_of_mono {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [mono g] :
  kernel_subobject (f ‚â´ g) = kernel_subobject f :=
begin
  delta kernel_subobject,
  ext, swap,
  { exact kernel_comp_mono f g },
  { simp only [kernel_comp_mono_hom, kernel.lift_Œπ] },
end

lemma exact_cycles_arrow_delta_to_cycles :
  exact (A.cycles i).arrow (delta_to_cycles A i j hij) :=
begin
  rw [category_theory.abelian.exact_iff_image_eq_kernel],
  dsimp [delta_to_cycles, delta_to_boundaries],
  simp only [image_subobject_arrow, kernel_subobject_comp_eq_of_mono],
  delta cycles,
  let g : ‚Üë(A.boundaries j) ‚ü∂ X_next A i := (A.boundaries j).arrow ‚â´ (X_next_iso _ hij).inv,
  haveI : mono g := mono_comp _ _,
  suffices aux : delta_to_boundaries _ i j hij ‚â´ g = d_from A i,
  { simp_rw [‚Üê aux, kernel_subobject_comp_eq_of_mono], refl, },
  simp only [delta_to_boundaries_comp_arrow_assoc, iso.comp_inv_eq, d_from_comp_X_next_iso],
end

lemma exact_homology_to_mod_boundaries_to_cycles :
  exact ((homology_to_mod_boundaries i).app A) ((mod_boundaries_to_cycles i j hij).app A) :=
begin
  let œÜ : homology A i ‚ü∂ mod_boundaries A i :=
    limits.cokernel.desc _ ((kernel_subobject _).arrow ‚â´ (cokernel.œÄ _)) (by simp),
  suffices S : snake
    (0:C) 0 0
    (A.boundaries i) (boundaries A i) 0
    (A.cycles i) (A.X i) (A.cycles j)
    (homology A i) (mod_boundaries A i) (A.cycles j)
    0 0
    0 0 0
    (ùüô _) 0
    (boundaries_to_cycles _ _) (A.boundaries i).arrow 0
    (A.cycles i).arrow (delta_to_cycles _ i j hij)
    (homology.œÄ _ _ _) (cokernel.œÄ _) (ùüô _)
    œÜ ((mod_boundaries_to_cycles i j hij).app A),
  { exact (S.six_term_exact_seq.drop 3).pair },
  letI : exact (cycles A i).arrow (delta_to_cycles A i j hij) :=
    exact_cycles_arrow_delta_to_cycles _ i j hij,
  letI : epi (homology.œÄ (d_to A i) (d_from A i) (A.d_to_comp_d_from i)) := coequalizer.œÄ_epi,
  fsplit,
  { rw ‚Üê epi_iff_exact_zero_right, apply_instance },
  { apply exact_cycles_arrow_delta_to_cycles },
  { exact (category_theory.exact_zero_mono _).cons (abelian.exact_cokernel _).exact_seq, },
  { exact (category_theory.exact_zero_mono _).cons (abelian.exact_cokernel _).exact_seq, },
  { exact (category_theory.exact_zero_mono _).cons (exact_zero_left_of_mono _).exact_seq, },
  { simp only [zero_comp] },
  { simp only [zero_comp] },
  { simp only [boundaries_to_cycles_arrow, category.id_comp] },
  { simp only [boundaries_arrow_comp_delta_to_cycles, zero_comp], },
  { dsimp [homology.œÄ, cycles], simp only [cokernel.œÄ_desc] },
  { simp only [mod_boundaries_to_cycles_app, cokernel.œÄ_desc, category.comp_id] },
end

lemma exact_mod_boundaries_to_cycles_to_homology :
  exact ((mod_boundaries_to_cycles i j hij).app A) ((cycles_to_homology j).app A)  :=
begin
  refine exact.congr (boundaries_to_cycles _ _) _ _ _ _ _ rfl,
  { exact abelian.exact_cokernel _, },
  { simp only [mod_boundaries_to_cycles_app],
    delta delta_to_cycles,
    rw [‚Üê image_subobject_comp_eq_of_epi (cokernel.œÄ _)],
    simp only [cokernel.œÄ_desc, image_subobject_comp_eq_of_epi], }
end

lemma epi_cycles_to_homology : epi ((cycles_to_homology j).app A) :=
coequalizer.œÄ_epi

lemma exact_seq_column :
  exact_seq C
    [((homology_to_mod_boundaries i).app A‚ÇÅ),
     ((mod_boundaries_to_cycles i j hij).app A‚ÇÅ),
     ((cycles_to_homology j).app A‚ÇÅ)] :=
(exact_homology_to_mod_boundaries_to_cycles _ _ _ _).cons
  (exact_mod_boundaries_to_cycles_to_homology _ _ _ _).exact_seq

lemma snake (hfg : ‚àÄ n, short_exact (f.f n) (g.f n)) (i j : Œπ) (hij : c.rel i j) :
  snake
  -- the objects
     (A‚ÇÅ.homology i)       (A‚ÇÇ.homology i)       (A‚ÇÉ.homology i)
  (A‚ÇÅ.mod_boundaries i) (A‚ÇÇ.mod_boundaries i) (A‚ÇÉ.mod_boundaries i)
      (A‚ÇÅ.cycles j)         (A‚ÇÇ.cycles j)         (A‚ÇÉ.cycles j)
     (A‚ÇÅ.homology j)       (A‚ÇÇ.homology j)       (A‚ÇÉ.homology j)
  -- the morphisms
  ((homology_functor _ _ i).map f) ((homology_functor _ _ i).map g)
  ((homology_to_mod_boundaries i).app A‚ÇÅ)
  ((homology_to_mod_boundaries i).app A‚ÇÇ)
  ((homology_to_mod_boundaries i).app A‚ÇÉ)
  (mod_boundaries_map f i) (mod_boundaries_map g i)
  ((mod_boundaries_to_cycles i j hij).app A‚ÇÅ)
  ((mod_boundaries_to_cycles i j hij).app A‚ÇÇ)
  ((mod_boundaries_to_cycles i j hij).app A‚ÇÉ)
  (cycles_map f j) (cycles_map g j)
  ((cycles_to_homology j).app A‚ÇÅ)
  ((cycles_to_homology j).app A‚ÇÇ)
  ((cycles_to_homology j).app A‚ÇÉ)
  ((homology_functor _ _ j).map f) ((homology_functor _ _ j).map g) :=
{ row_exact‚ÇÅ := exact_mod_boundaries_map f g hfg _,
  row_exact‚ÇÇ := exact_cycles_map f g hfg _,
  row_epi := epi_mod_boundaries_map f g hfg _,
  row_mono := mono_cycles_map f g hfg _,
  col_exact_a := exact_seq_column _ _ _,
  col_exact_b := exact_seq_column _ _ _,
  col_exact_c := exact_seq_column _ _ _,
  col_mono_a := mono_homology_to_mod_boundaries _ _,
  col_mono_b := mono_homology_to_mod_boundaries _ _,
  col_mono_c := mono_homology_to_mod_boundaries _ _,
  col_epi_a := epi_cycles_to_homology _ _,
  col_epi_b := epi_cycles_to_homology _ _,
  col_epi_c := epi_cycles_to_homology _ _,
  sq_a‚ÇÄ := ((homology_to_mod_boundaries _).naturality _).symm,
  sq_b‚ÇÄ := ((homology_to_mod_boundaries _).naturality _).symm,
  sq_a‚ÇÅ := ((mod_boundaries_to_cycles _ _ _).naturality _).symm,
  sq_b‚ÇÅ := ((mod_boundaries_to_cycles _ _ _).naturality _).symm,
  sq_a‚ÇÇ := ((cycles_to_homology _).naturality _).symm,
  sq_b‚ÇÇ := ((cycles_to_homology _).naturality _).symm }

def Œ¥ (hfg : ‚àÄ n, short_exact (f.f n) (g.f n)) (i j : Œπ) (hij : c.rel i j) :
  homology A‚ÇÉ i ‚ü∂ homology A‚ÇÅ j :=
(snake f g hfg i j hij).Œ¥

lemma six_term_exact_seq (hfg : ‚àÄ n, short_exact (f.f n) (g.f n)) (i j : Œπ) (hij : c.rel i j) :
  exact_seq C [
    (homology_functor _ _ i).map f, -- H‚Å±(A‚ÇÅ) ‚ü∂ H‚Å±(A‚ÇÇ)
    (homology_functor _ _ i).map g, -- H‚Å±(A‚ÇÇ) ‚ü∂ H‚Å±(A‚ÇÉ)
    Œ¥ f g hfg i j hij,              -- H‚Å±(A‚ÇÉ) ‚ü∂ H ≤(A‚ÇÅ)
    (homology_functor _ _ j).map f, -- H ≤(A‚ÇÅ) ‚ü∂ H ≤(A‚ÇÇ)
    (homology_functor _ _ j).map g  -- H ≤(A‚ÇÅ) ‚ü∂ H ≤(A‚ÇÉ)
  ] :=
(snake f g hfg i j hij).six_term_exact_seq

end homological_complex
