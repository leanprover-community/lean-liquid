import analysis.normed_space.normed_group_hom
import analysis.specific_limits

noncomputable theory

open_locale filter topological_space big_operators
open set normed_group_hom uniform_space filter finset

def normed_group_hom.surjective_on_with {G H : Type*} [semi_normed_group G] [semi_normed_group H]
  (f : normed_group_hom G H) (K : add_subgroup H) (C : ‚Ñù) : Prop :=
 ‚àÄ h ‚àà K, ‚àÉ g, f g = h ‚àß ‚à•g‚à• ‚â§ C*‚à•h‚à•

variables {G : Type*} [semi_normed_group G]
variables {H : Type*} [normed_group H]

lemma controlled_closure_of_complete [complete_space G] {f : normed_group_hom G H} {K : add_subgroup H}
  {C Œµ : ‚Ñù} (hC : 0 < C) (hŒµ : 0 < Œµ) (hyp : f.surjective_on_with K C) :
  f.surjective_on_with K.topological_closure (C + Œµ) :=
begin
  intros h h_in,
  by_cases hyp_h : h = 0,
  { rw hyp_h,
    use 0,
    simp },
  set b : ‚Ñï ‚Üí ‚Ñù := Œª i, (1/2)^i*(Œµ*‚à•h‚à•/2)/C,
  have b_pos : ‚àÄ i, 0 < b i,
  { intro i,
    field_simp [b, hC],
    exact div_pos (mul_pos hŒµ (norm_pos_iff.mpr hyp_h)) (mul_pos (by norm_num : (0 : ‚Ñù) < 2^i*2) hC) },
  obtain ‚ü®v : ‚Ñï ‚Üí H, lim_v : tendsto (Œª (n : ‚Ñï), ‚àë k in range (n + 1), v k) at_top (ùìù h),
    v_in : ‚àÄ n, v n ‚àà K, hv‚ÇÄ : ‚à•v 0 - h‚à• < b 0, hv : ‚àÄ n > 0, ‚à•v n‚à• < b n‚ü© :=
    controlled_sum_of_mem_closure h_in b_pos,
  have : ‚àÄ n, ‚àÉ m' : G, f m' = v n ‚àß ‚à•m'‚à• ‚â§ C * ‚à•v n‚à•,
  exact Œª (n : ‚Ñï), hyp (v n) (v_in n),
  choose u hu hnorm_u using this,
  set s : ‚Ñï ‚Üí G := Œª n, ‚àë k in range (n+1), u k,
  have : cauchy_seq s,
  { apply normed_group.cauchy_series_of_le_geometric'' (by norm_num) one_half_lt_one,
    rintro n (hn : n ‚â• 1),
    calc ‚à•u n‚à• ‚â§ C*‚à•v n‚à• : hnorm_u n
    ... ‚â§ C * b n : mul_le_mul_of_nonneg_left (hv _ $ nat.succ_le_iff.mp hn).le hC.le
    ... = (1/2)^n * (Œµ * ‚à•h‚à•/2) : by simp [b, mul_div_cancel' _ hC.ne.symm]
    ... = (Œµ * ‚à•h‚à•/2) * (1/2)^n : mul_comm _ _ },
  obtain ‚ü®g : G, hg‚ü© := cauchy_seq_tendsto_of_complete this,
  refine ‚ü®g, _, _‚ü©,
  { apply tendsto_nhds_unique _ lim_v,
    convert (f.continuous.tendsto g).comp hg,
    ext n,
    simp [f.map_sum, hu] },
  { suffices : ‚àÄ n, ‚à•s n‚à• ‚â§ (C + Œµ) * ‚à•h‚à•,
      from le_of_tendsto' (continuous_norm.continuous_at.tendsto.comp hg) this,
    intros n,
    have hnorm‚ÇÄ : ‚à•u 0‚à• ‚â§ C*b 0 + C*‚à•h‚à•,
    { have := calc
      ‚à•v 0‚à• ‚â§ ‚à•h‚à• + ‚à•v 0 - h‚à• : norm_le_insert' _ _
      ... ‚â§ ‚à•h‚à• + b 0 : by apply add_le_add_left hv‚ÇÄ.le,
      calc ‚à•u 0‚à• ‚â§ C*‚à•v 0‚à• : hnorm_u 0
      ... ‚â§ C*(‚à•h‚à• + b 0) : mul_le_mul_of_nonneg_left this hC.le
      ... = C * b 0 + C * ‚à•h‚à• : by rw [add_comm, mul_add] },
    have : ‚àë k in range (n + 1), C * b k ‚â§ Œµ * ‚à•h‚à•,
    { calc ‚àë k in range (n + 1), C * b k = (‚àë k in range (n + 1), (1 / 2) ^ k) * (Œµ * ‚à•h‚à• / 2) : by simp only [b, mul_div_cancel' _ hC.ne.symm, ‚Üê sum_mul]
      ... ‚â§  2 * (Œµ * ‚à•h‚à• / 2) : mul_le_mul_of_nonneg_right (sum_geometric_two_le _) (by nlinarith [hŒµ, norm_nonneg h])
      ... = Œµ * ‚à•h‚à• : mul_div_cancel' _ two_ne_zero },
    calc ‚à•s n‚à• ‚â§ ‚àë k in range (n+1), ‚à•u k‚à• : norm_sum_le _ _
    ... = ‚àë k in range n, ‚à•u (k + 1)‚à• + ‚à•u 0‚à• : sum_range_succ' _ _

    ... ‚â§ ‚àë k in range n, C*‚à•v (k + 1)‚à• + ‚à•u 0‚à• : add_le_add_right (sum_le_sum (Œª _ _, hnorm_u _)) _
    ... ‚â§ ‚àë k in range n, C*b (k+1) + (C*b 0 + C*‚à•h‚à•) :  add_le_add (sum_le_sum (Œª k _, _)) hnorm‚ÇÄ
    ... = ‚àë k in range (n+1), C*b k + C*‚à•h‚à• :  _
    ... ‚â§ (C+Œµ)*‚à•h‚à• : _,
    { exact mul_le_mul_of_nonneg_left (hv _ k.succ_pos).le hC.le },
    { rw [‚Üê add_assoc, sum_range_succ'] },
    { rw [add_comm, add_mul],
      apply add_le_add_left this } }
end

lemma controlled_closure_range_of_complete [complete_space G] {f : normed_group_hom G H}
  {K : Type*} [semi_normed_group K] {j : normed_group_hom K H} (hj : ‚àÄ x, ‚à•j x‚à• = ‚à•x‚à•)
  {C Œµ : ‚Ñù} (hC : 0 < C) (hŒµ : 0 < Œµ) (hyp : ‚àÄ k, ‚àÉ g, f g = j k ‚àß ‚à•g‚à• ‚â§ C*‚à•k‚à•) :
  ‚àÄ {h}, h ‚àà j.range.topological_closure ‚Üí ‚àÉ g, f g = h ‚àß ‚à•g‚à• ‚â§ (C + Œµ)*‚à•h‚à• :=
begin
  replace hyp : ‚àÄ h ‚àà j.range, ‚àÉ g, f g = h ‚àß ‚à•g‚à• ‚â§ C*‚à•h‚à•,
  { intros h h_in,
    rcases (j.mem_range _).mp h_in with ‚ü®k, rfl‚ü©,
    rw hj,
    exact hyp k },
  exact controlled_closure_of_complete hC hŒµ hyp
end

#lint
