import algebra.category.Group.biproducts
import algebra.category.Group.abelian
import algebra.direct_sum.basic
import category_theory.preadditive.yoneda
import for_mathlib.AddCommGroup.epi

open category_theory
open category_theory.limits

def dfinsupp.add_equiv_pi_on_fintype {Œ± : Type*} [fintype Œ±] (X : Œ± ‚Üí Type*)
  [‚àÄ i, add_comm_group (X i)] :
  (Œ†‚ÇÄ i, X i) ‚âÉ+ (Œ† i, X i) :=
{ map_add' := Œª x y, by { ext, simp, },
  ..dfinsupp.equiv_fun_on_fintype }

namespace AddCommGroup

universes v u

def pi_œÄ {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u}) (i) :
  AddCommGroup.of (Œ† i, X i) ‚ü∂ X i :=
pi.eval_add_monoid_hom _ _

def pi_fan {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u}) : fan X :=
fan.mk (AddCommGroup.of $ Œ† i, X i)
(Œª b, pi_œÄ _ _)

def pi_lift {Œ± : Type v} {Y : AddCommGroup.{max v u}} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f : Œ† a, Y ‚ü∂ X a) : Y ‚ü∂ AddCommGroup.of (Œ† i, X i) :=
{ to_fun := Œª y i, f _ y,
  map_zero' := by { ext, simp },
  map_add' := Œª x y, by { ext, simp } }

@[simp, reassoc]
lemma pi_lift_œÄ {Œ± : Type v} {Y : AddCommGroup.{max v u}} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f : Œ† a, Y ‚ü∂ X a) (i) :
  pi_lift X f ‚â´ pi_œÄ _ i = f _ := by { ext, refl }

lemma pi_hom_ext {Œ± : Type v} {Y : AddCommGroup.{max v u}} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f g : Y ‚ü∂ AddCommGroup.of (Œ† i, X i))
  (h : ‚àÄ i, f ‚â´ pi_œÄ _ i = g ‚â´ pi_œÄ _ i) : f = g :=
by { ext y a, specialize h a, apply_fun (Œª e, e y) at h, exact h }

def is_limit_pi_fan {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u}) :
  is_limit (pi_fan X) :=
{ lift := Œª S, pi_lift _ $ Œª a, S.œÄ.app ‚ü®_‚ü©,
  fac' := begin
    rintros S ‚ü®j‚ü©,
    apply pi_lift_œÄ,
  end,
  uniq' := begin
    intros S m hm,
    apply pi_hom_ext,
    intros i,
    erw [hm ‚ü®i‚ü©, pi_lift_œÄ],
  end }

noncomputable
def hom_product_comparison
  {Œ± : Type v}
  (A : AddCommGroup.{max v u})
  (X : Œ± ‚Üí AddCommGroup.{max v u}) :
  AddCommGroup.of (A ‚ü∂ ‚àè X) ‚ü∂ ‚àè (Œª i, AddCommGroup.of (A ‚ü∂ (X i))) :=
limits.pi.lift $ Œª a, (preadditive_yoneda.flip.obj (opposite.op A)).map (limits.pi.œÄ _ _)

instance is_iso_hom_product_comparison
  {Œ± : Type v}
  (A : AddCommGroup.{max v u})
  (X : Œ± ‚Üí AddCommGroup.{max v u}) :
  is_iso (hom_product_comparison A X) :=
begin
  --haveI : balanced Ab.{max v u} := AddcommGroup.abelian
  let t : (‚àè Œª (i : Œ±), AddCommGroup.of (A ‚ü∂ X i)) ‚âÖ AddCommGroup.of
    (Œ† i, AddCommGroup.of (A ‚ü∂ X i)) :=
    (limits.limit.is_limit _).cone_point_unique_up_to_iso
    (is_limit_pi_fan (Œª i, of (A ‚ü∂ X i))),
  suffices : is_iso (A.hom_product_comparison X ‚â´ t.hom),
  { apply is_iso.of_is_iso_comp_right _ t.hom, exact this },
  have ht : A.hom_product_comparison X ‚â´ t.hom =
    (is_limit_pi_fan (Œª i, of (A ‚ü∂ X i))).lift
    ‚ü®_, discrete.nat_trans $ Œª i, (preadditive_yoneda.flip.obj (opposite.op A)).map
      (limits.pi.œÄ _ _)‚ü©,
  { apply (is_limit_pi_fan _).hom_ext, intros j,
    simp [hom_product_comparison] },
  rw ht, clear ht,
  apply_with is_iso_of_mono_of_epi { instances := ff },
  apply_instance,
  { rw mono_iff_injective,
    intros f g h,
    ext1 ‚ü®j‚ü©,
    apply_fun (Œª e, e j) at h,
    exact h },
  { rw epi_iff_surjective,
    intros f,
    use limits.pi.lift (Œª i, f i),
    dsimp [is_limit_pi_fan, pi_lift],
    simp [pi_lift_œÄ] }
end

def direct_sum_œÄ {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u}) (i) :
  AddCommGroup.of (direct_sum Œ± (Œª i, X i)) ‚ü∂ X i :=
{ to_fun := Œª f, let e : Œ†‚ÇÄ (i : Œ±), (X i) := f in e i,
  map_zero' := by simp,
  map_add' := Œª x y, by { dsimp, simp } }

def direct_sum_fan {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u}) : fan X :=
fan.mk (AddCommGroup.of (direct_sum Œ± (Œª i, X i)))
(Œª b, direct_sum_œÄ _ _)

open_locale classical

def direct_sum_lift {Œ± : Type v} [fintype Œ±]
  {Y : AddCommGroup.{max v u}} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f : Œ† a, Y ‚ü∂ X a) :
  Y ‚ü∂ AddCommGroup.of (direct_sum Œ± (Œª i, X i)) :=
{ to_fun := Œª y, (dfinsupp.add_equiv_pi_on_fintype _).symm $ Œª i, f i y,
  map_zero' := begin
    simp_rw map_zero,
    change ((dfinsupp.add_equiv_pi_on_fintype (Œª (i : Œ±), ‚Ü•(X i))).symm) 0 = _,
    simp,
  end,
  map_add' := begin
    intros x y,
    simp_rw map_add,
    change ((dfinsupp.add_equiv_pi_on_fintype (Œª (i : Œ±), ‚Ü•(X i))).symm)
      ((Œª (i : Œ±), (f i) x) + (Œª (i : Œ±), (f i) y)) = _,
    simp,
  end }

@[simp, reassoc]
lemma direct_sum_lift_œÄ {Œ± : Type v} [fintype Œ±]
  {Y : AddCommGroup.{max v u}} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f : Œ† a, Y ‚ü∂ X a) (i) :
  direct_sum_lift X f ‚â´ direct_sum_œÄ _ i = f i :=
by { ext, refl }

lemma direct_sum_hom_ext {Œ± : Type v} [fintype Œ±]
  {Y : AddCommGroup.{max v u}} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f g : Y ‚ü∂ AddCommGroup.of (direct_sum Œ± (Œª i, X i)))
  (h : ‚àÄ i, f ‚â´ direct_sum_œÄ _ i = g ‚â´ direct_sum_œÄ _ i) :
  f = g :=
begin
  ext,
  specialize h i,
  apply_fun (Œª e, e x) at h, exact h
end

def is_limit_direct_sum_fan {Œ± : Type v} [fintype Œ±]
  (X : Œ± ‚Üí AddCommGroup.{max v u}) : is_limit (direct_sum_fan X) :=
{ lift := Œª S, direct_sum_lift _ $ Œª a, S.œÄ.app ‚ü®a‚ü©, -- S.œÄ.app,
  fac' := begin
    rintros S ‚ü®j‚ü©,
    apply direct_sum_lift_œÄ,
  end,
  uniq' := begin
    intros S m hm,
    apply direct_sum_hom_ext,
    intros i,
    specialize hm ‚ü®i‚ü©,
    erw [hm, direct_sum_lift_œÄ],
  end }

noncomputable theory

def to_direct_sum {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (i : Œ±) : X i ‚ü∂ AddCommGroup.of (direct_sum Œ± (Œª i, X i)) :=
direct_sum.of (Œª i, X i) i

def direct_sum_punit_iso (A : AddCommGroup.{max v u}) :
  AddCommGroup.of (direct_sum _ (Œª i : punit.{v+1}, A)) ‚âÖ A :=
{ hom := direct_sum_œÄ _ punit.star,
  inv := to_direct_sum (Œª i, A) punit.star,
  hom_inv_id' := begin
    ext ‚ü®‚ü© ‚ü®‚ü©,
    ext t ‚ü®‚ü©, -- WAT?
    dsimp [direct_sum_œÄ, to_direct_sum],
    simp,
  end,
  inv_hom_id' := begin
    ext a,
    dsimp [direct_sum_œÄ, to_direct_sum],
    simp,
  end }

def direct_sum_Œπ {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (i : Œ±) : X i ‚ü∂ AddCommGroup.of (direct_sum Œ± (Œª i, X i)) :=
direct_sum.of _ i

def direct_sum_desc {Œ± : Type v} {Y : AddCommGroup.{max v u}} (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f : Œ† i, X i ‚ü∂ Y) :
  AddCommGroup.of (direct_sum Œ± (Œª i, X i)) ‚ü∂ Y :=
direct_sum.to_add_monoid f

@[simp, reassoc]
lemma direct_sum_Œπ_desc {Œ± : Type v} {Y : AddCommGroup.{max v u}}
  (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f : Œ† i, X i ‚ü∂ Y) (i) :
  direct_sum_Œπ X i ‚â´ direct_sum_desc X f = f _ :=
by { ext, dsimp [direct_sum_Œπ, direct_sum_desc], simp }

lemma direct_sum_hom_ext' {Œ± : Type v} {Y : AddCommGroup.{max v u}}
  (X : Œ± ‚Üí AddCommGroup.{max v u})
  (f g : AddCommGroup.of (direct_sum Œ± (Œª i, X i)) ‚ü∂ Y)
  (h : ‚àÄ i, direct_sum_Œπ X i ‚â´ f = direct_sum_Œπ X i ‚â´ g) :
  f = g :=
begin
  have hf : f = direct_sum_desc X (Œª i, direct_sum_Œπ X i ‚â´ f),
  { ext t, apply direct_sum.to_add_monoid.unique },
  have hg : g = direct_sum_desc X (Œª i, direct_sum_Œπ X i ‚â´ g),
  { ext t, apply direct_sum.to_add_monoid.unique },
  rw [hf, hg],
  congr' 1, ext i, rw h,
end

def direct_sum_cofan {Œ± : Type v}
  (X : Œ± ‚Üí AddCommGroup.{max v u}) : cofan X :=
cofan.mk _ (direct_sum_Œπ _)

def is_colimit_direct_sum_cofan {Œ± : Type v}
  (X : Œ± ‚Üí AddCommGroup.{max v u}) : is_colimit (direct_sum_cofan X) :=
{ desc := Œª S, direct_sum_desc X (Œª a, S.Œπ.app ‚ü®a‚ü©), -- S.Œπ.app,
  fac' := begin
    rintros X ‚ü®j‚ü©,
    apply direct_sum_Œπ_desc,
  end,
  uniq' := begin
    intros S m hm,
    apply direct_sum_hom_ext',
    intros i,
    specialize hm ‚ü®i‚ü©,
    erw hm, rw direct_sum_Œπ_desc,
  end }

lemma direct_sum_Œπ_œÄ {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u}) (i : Œ±) :
  direct_sum_Œπ.{v u} X i ‚â´ direct_sum_œÄ.{v u} X i = ùüô _ :=
begin
  ext,
  dsimp [direct_sum_Œπ, direct_sum_œÄ, direct_sum.of],
  simp only [comp_apply, dfinsupp.single_add_hom_apply, add_monoid_hom.coe_mk,
    dfinsupp.single_apply],
  split_ifs, refl, refl,
end

lemma direct_sum_Œπ_œÄ_of_ne {Œ± : Type v} (X : Œ± ‚Üí AddCommGroup.{max v u}) (i j : Œ±) (h : i ‚â† j):
  direct_sum_Œπ.{v u} X i ‚â´ direct_sum_œÄ.{v u} X j = 0 :=
begin
  ext,
  dsimp [direct_sum_Œπ, direct_sum_œÄ, direct_sum.of],
  simp only [comp_apply, dfinsupp.single_add_hom_apply, add_monoid_hom.coe_mk,
    dfinsupp.single_apply],
  split_ifs, contradiction, refl,
end

-- `bicone` is not sufficiently universe polymorphic.
def direct_sum_bicone {Œ± : Type u} [fintype Œ±]
  (X : Œ± ‚Üí AddCommGroup.{u}) : bicone X :=
{ X := AddCommGroup.of (direct_sum Œ± (Œª i, X i)),
  œÄ := direct_sum_œÄ.{u u} _,
  Œπ := direct_sum_Œπ.{u u} _,
  Œπ_œÄ := Œª i j, begin
    ext t,
    dsimp [direct_sum_Œπ, direct_sum_œÄ, direct_sum.of],
    simp only [comp_apply, dfinsupp.single_add_hom_apply, add_monoid_hom.coe_mk,
      dfinsupp.single_apply],
    split_ifs, subst h, refl, refl,
  end }

def is_bilimit_direct_sum_bicone {Œ± : Type u} [fintype Œ±]
  (X : Œ± ‚Üí AddCommGroup.{u}) :
  bicone.is_bilimit (direct_sum_bicone X) :=
{ is_limit := is_limit_direct_sum_fan.{u u} X,
  is_colimit := is_colimit_direct_sum_cofan.{u u} X }

end AddCommGroup
