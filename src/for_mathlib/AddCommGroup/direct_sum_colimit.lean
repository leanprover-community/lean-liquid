import for_mathlib.AddCommGroup.explicit_products

open category_theory
open category_theory.limits

namespace AddCommGroup

universes u
variables {J : Type u} [small_category J] (F : J ‚•§ AddCommGroup.{u})

open_locale classical
noncomputable theory

def explicit_cocone_point_kernel :
  add_subgroup (direct_sum J (Œª i, F.obj i)) :=
add_subgroup.closure
{ x | ‚àÉ (i j : J) (f : i ‚ü∂ j) (t : F.obj i),
  x = direct_sum.of _ j (F.map f t) - direct_sum.of _ i t  }

def as_small_succ (i : as_small.{u} ‚Ñï) : as_small ‚Ñï :=
  as_small.up.obj (as_small.down.obj i + 1)

def to_as_small_succ (i : as_small.{u} ‚Ñï) : i ‚ü∂ as_small_succ i :=
as_small.up.map (hom_of_le $ nat.le_succ _)

lemma explicit_cocone_point_kernel_eq_of_as_small_nat
  (F : as_small.{u} ‚Ñï ‚•§ AddCommGroup.{u}) :
  explicit_cocone_point_kernel F =
  add_subgroup.closure { x | ‚àÉ i (t : F.obj i), x =
    direct_sum.of (Œª i, F.obj i) (as_small_succ i) (F.map (to_as_small_succ i) t) -
    direct_sum.of _ i t } :=
begin
  apply le_antisymm,
  { erw add_subgroup.closure_le,
    rintros x ‚ü®‚ü®i‚ü©,‚ü®j‚ü©,f,t,rfl‚ü©,
    obtain ‚ü®k,rfl‚ü© : ‚àÉ k : ‚Ñï, j = i + k,
    { have : i ‚â§ j := le_of_hom (as_small.down.map f),
      exact le_iff_exists_add.mp this },
    induction k with k hk,
    { have : f = ùüô _, ext, rw this,
      simp only [category_theory.functor.map_id, id_apply, set_like.mem_coe],
      erw sub_self,
      exact add_subgroup.zero_mem _, },
    { let f‚ÇÅ : as_small.up.obj i ‚ü∂ as_small.up.obj (i + k) := as_small.up.map
        (hom_of_le $ le_self_add),
      let f‚ÇÇ : as_small.up.obj (i + k) ‚ü∂ as_small.up.obj (i + (k + 1)) :=
        as_small.up.map (hom_of_le $ by nlinarith),
      have hf : f = f‚ÇÅ ‚â´ f‚ÇÇ, by ext, rw hf, clear hf,
      specialize hk f‚ÇÅ,
      let t' := _, change t' ‚àà _, let s := _, change s ‚àà _ at hk,
      rw (show t' = (t' - s) + s, by simp),
      let A := add_subgroup.closure {x :
        direct_sum (as_small ‚Ñï) (Œª (i : as_small ‚Ñï), ‚Ü•(F.obj i)) |
          ‚àÉ (i : as_small ‚Ñï) (t : ‚Ü•(F.obj i)), x =
            (direct_sum.of (Œª (i : as_small ‚Ñï), ‚Ü•(F.obj i)) (as_small_succ i))
              ((F.map (to_as_small_succ i)) t) -
            (direct_sum.of (Œª (i : as_small ‚Ñï), ‚Ü•(F.obj i)) i) t},
      change _ ‚àà A,
      suffices : (t' - s) ‚àà A, by exact A.add_mem this hk,
      dsimp [t', s], simp only [functor.map_comp, comp_apply, sub_sub_sub_cancel_right],
      apply add_subgroup.subset_closure,
      use as_small.up.obj (i + k),
      let tt : F.obj (as_small.up.obj (i + k)) := F.map f‚ÇÅ t,
      use tt,
      congr } },
  { rw add_subgroup.closure_le,
    rintros x ‚ü®i,t,rfl‚ü©,
    apply add_subgroup.subset_closure,
    refine ‚ü®i,as_small_succ i, to_as_small_succ i, t, _‚ü©,
    congr }
end

def explicit_cocone_point : AddCommGroup.{u} :=
AddCommGroup.of
((direct_sum J (Œª i, F.obj i)) ‚ß∏ explicit_cocone_point_kernel F)

def explicit_cocone : cocone F :=
{ X := explicit_cocone_point F,
  Œπ :=
  { app := Œª j, add_monoid_hom.comp (quotient_add_group.mk' _)
      (direct_sum.of _ j),
    naturality' := begin
      intros i j f, ext t,
      dsimp,
      simp only [comp_apply, add_monoid_hom.coe_comp, quotient_add_group.coe_mk',
        function.comp_app, id_apply],
      rw quotient_add_group.eq_iff_sub_mem,
      apply add_subgroup.subset_closure,
      dsimp, refine ‚ü®i, j, f, t, rfl‚ü©,
    end } }

def is_colimit_explicit_cocone : is_colimit (explicit_cocone F) :=
{ desc := Œª S, quotient_add_group.lift _
    (direct_sum.to_add_monoid $ Œª i, S.Œπ.app _)
    begin
      intros t ht,
      apply add_subgroup.closure_induction ht,
      { rintros x ‚ü®i,j,f,t,rfl‚ü©,
        simp only [map_sub, direct_sum.to_add_monoid_of, cocone.w_apply, sub_self] },
      { simp only [map_zero], },
      { intros x y hx hy, simp only [hx, hy, map_add, add_zero] },
      { intros x hx, simp only [hx, map_neg, neg_zero] },
    end,
  fac' := begin
    intros S j, ext t, dsimp [explicit_cocone],
    simp only [direct_sum.to_add_monoid_of, comp_apply, add_monoid_hom.coe_comp,
      quotient_add_group.coe_mk', quotient_add_group.lift_mk],
  end,
  uniq' := begin
    intros S m hm, ext j t,
    simp only [direct_sum.to_add_monoid_of, add_monoid_hom.coe_comp, quotient_add_group.coe_mk',
      function.comp_app, quotient_add_group.lift_mk],
    rw ‚Üê hm, refl,
  end }

end AddCommGroup
