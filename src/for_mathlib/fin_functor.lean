import category_theory.preadditive
import category_theory.abelian.projective
import tactic.interval_cases


noncomputable theory

open category_theory
open category_theory.limits

universe variables v u

namespace category_theory

variables {C : Type u} [category.{v} C]

namespace fin3_functor_mk

variables (F : fin 3 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2)

def map' : Œ† (i j : fin 3) (hij : i ‚â§ j), F i ‚ü∂ F j
| ‚ü®0,hi‚ü© ‚ü®0,hj‚ü© _ := ùüô _
| ‚ü®1,hi‚ü© ‚ü®1,hj‚ü© _ := ùüô _
| ‚ü®2,hi‚ü© ‚ü®2,hj‚ü© _ := ùüô _
| ‚ü®0,hi‚ü© ‚ü®1,hj‚ü© _ := a
| ‚ü®1,hi‚ü© ‚ü®2,hj‚ü© _ := b
| ‚ü®0,hi‚ü© ‚ü®2,hj‚ü© _ := a ‚â´ b
| ‚ü®i+3,hi‚ü© _ _ := by { exfalso, revert hi, dec_trivial }
| _ ‚ü®j+3,hj‚ü© _ := by { exfalso, revert hj, dec_trivial }
| ‚ü®i+1,hi‚ü© ‚ü®0,hj‚ü© H := by { exfalso, revert H, dec_trivial }
| ‚ü®i+2,hi‚ü© ‚ü®1,hj‚ü© H := by { exfalso, revert H, dec_trivial }
.

lemma map'_id : ‚àÄ (i : fin 3), map' F a b i i le_rfl = ùüô _
| ‚ü®0,hi‚ü© := rfl
| ‚ü®1,hi‚ü© := rfl
| ‚ü®2,hi‚ü© := rfl
| ‚ü®i+3,hi‚ü© := by { exfalso, revert hi, dec_trivial }

lemma map'_comp : Œ† (i j k : fin 3) (hij : i ‚â§ j) (hjk : j ‚â§ k),
  map' F a b i j hij ‚â´ map' F a b j k hjk = map' F a b i k (hij.trans hjk)
| ‚ü®0, _‚ü© ‚ü®0, _‚ü© k _ _ := category.id_comp _
| ‚ü®1, _‚ü© ‚ü®1, _‚ü© k _ _ := category.id_comp _
| i ‚ü®1, _‚ü© ‚ü®1, _‚ü© _ _ := category.comp_id _
| i ‚ü®2, _‚ü© ‚ü®2, _‚ü© _ _ := category.comp_id _
| ‚ü®0, _‚ü© ‚ü®1, _‚ü© ‚ü®2, _‚ü© _ _ := rfl
| ‚ü®i+3,hi‚ü© _ _ _ _ := by { exfalso, revert hi, dec_trivial }
| _ ‚ü®j+3,hj‚ü© _ _ _ := by { exfalso, revert hj, dec_trivial }
| _ _ ‚ü®k+3,hk‚ü© _ _ := by { exfalso, revert hk, dec_trivial }
| ‚ü®i+1,hi‚ü© ‚ü®0,hj‚ü© _ H _ := by { exfalso, revert H, dec_trivial }
| ‚ü®i+2,hi‚ü© ‚ü®1,hj‚ü© _ H _ := by { exfalso, revert H, dec_trivial }
| _ ‚ü®i+1,hi‚ü© ‚ü®0,hj‚ü© _ H := by { exfalso, revert H, dec_trivial }
| _ ‚ü®i+2,hi‚ü© ‚ü®1,hj‚ü© _ H := by { exfalso, revert H, dec_trivial }


end fin3_functor_mk

def fin3_functor_mk (F : fin 3 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2) : fin 3 ‚•§ C :=
{ obj := F,
  map := Œª i j hij, fin3_functor_mk.map' F a b i j hij.le,
  map_id' := Œª i, fin3_functor_mk.map'_id F a b i,
  map_comp' := Œª i j k hij hjk, by rw fin3_functor_mk.map'_comp F a b i j k hij.le hjk.le }

namespace fin4_functor_mk

variables (F : fin 4 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2) (c : F 2 ‚ü∂ F 3)

def map' : Œ† (i j : fin 4) (hij : i ‚â§ j), F i ‚ü∂ F j
| ‚ü®0,hi‚ü© ‚ü®0,hj‚ü© _ := ùüô _
| ‚ü®1,hi‚ü© ‚ü®1,hj‚ü© _ := ùüô _
| ‚ü®2,hi‚ü© ‚ü®2,hj‚ü© _ := ùüô _
| ‚ü®3,hi‚ü© ‚ü®3,hj‚ü© _ := ùüô _
| ‚ü®0,hi‚ü© ‚ü®1,hj‚ü© _ := a
| ‚ü®1,hi‚ü© ‚ü®2,hj‚ü© _ := b
| ‚ü®2,hi‚ü© ‚ü®3,hj‚ü© _ := c
| ‚ü®0,hi‚ü© ‚ü®2,hj‚ü© _ := a ‚â´ b
| ‚ü®1,hi‚ü© ‚ü®3,hj‚ü© _ := b ‚â´ c
| ‚ü®0,hi‚ü© ‚ü®3,hj‚ü© _ := a ‚â´ b ‚â´ c
| ‚ü®i+4,hi‚ü© _ _ := by { exfalso, revert hi, dec_trivial }
| _ ‚ü®j+4,hj‚ü© _ := by { exfalso, revert hj, dec_trivial }
| ‚ü®i+1,hi‚ü© ‚ü®0,hj‚ü© H := by { exfalso, revert H, dec_trivial }
| ‚ü®i+2,hi‚ü© ‚ü®1,hj‚ü© H := by { exfalso, revert H, dec_trivial }
| ‚ü®3,hi‚ü© ‚ü®2,hj‚ü© H := by { exfalso, revert H, dec_trivial }
.

lemma map'_id : ‚àÄ (i : fin 4), map' F a b c i i le_rfl = ùüô _
| ‚ü®0,hi‚ü© := rfl
| ‚ü®1,hi‚ü© := rfl
| ‚ü®2,hi‚ü© := rfl
| ‚ü®3,hi‚ü© := rfl
| ‚ü®i+4,hi‚ü© := by { exfalso, revert hi, dec_trivial }

lemma map'_comp : Œ† (i j k : fin 4) (hij : i ‚â§ j) (hjk : j ‚â§ k),
  map' F a b c i j hij ‚â´ map' F a b c j k hjk = map' F a b c i k (hij.trans hjk)
| ‚ü®0, _‚ü© ‚ü®0, _‚ü© k _ _ := category.id_comp _
| ‚ü®1, _‚ü© ‚ü®1, _‚ü© k _ _ := category.id_comp _
| ‚ü®2, _‚ü© ‚ü®2, _‚ü© k _ _ := category.id_comp _
| i ‚ü®1, _‚ü© ‚ü®1, _‚ü© _ _ := category.comp_id _
| i ‚ü®2, _‚ü© ‚ü®2, _‚ü© _ _ := category.comp_id _
| i ‚ü®3, _‚ü© ‚ü®3, _‚ü© _ _ := category.comp_id _
| ‚ü®0, _‚ü© ‚ü®1, _‚ü© ‚ü®2, _‚ü© _ _ := rfl
| ‚ü®0, _‚ü© ‚ü®1, _‚ü© ‚ü®3, _‚ü© _ _ := rfl
| ‚ü®0, _‚ü© ‚ü®2, _‚ü© ‚ü®3, _‚ü© _ _ := category.assoc a b c
| ‚ü®1, _‚ü© ‚ü®2, _‚ü© ‚ü®3, _‚ü© _ _ := rfl
| ‚ü®i+4,hi‚ü© _ _ _ _ := by { exfalso, revert hi, dec_trivial }
| _ ‚ü®j+4,hj‚ü© _ _ _ := by { exfalso, revert hj, dec_trivial }
| _ _ ‚ü®k+4,hk‚ü© _ _ := by { exfalso, revert hk, dec_trivial }
| ‚ü®i+1,hi‚ü© ‚ü®0,hj‚ü© _ H _ := by { exfalso, revert H, dec_trivial }
| ‚ü®i+2,hi‚ü© ‚ü®1,hj‚ü© _ H _ := by { exfalso, revert H, dec_trivial }
| ‚ü®3,hi‚ü© ‚ü®2,hj‚ü© _ H _ := by { exfalso, revert H, dec_trivial }
| _ ‚ü®i+1,hi‚ü© ‚ü®0,hj‚ü© _ H := by { exfalso, revert H, dec_trivial }
| _ ‚ü®i+2,hi‚ü© ‚ü®1,hj‚ü© _ H := by { exfalso, revert H, dec_trivial }
| _ ‚ü®3,hi‚ü© ‚ü®2,hj‚ü© _ H := by { exfalso, revert H, dec_trivial }


end fin4_functor_mk

def fin4_functor_mk (F : fin 4 ‚Üí C) (a : F 0 ‚ü∂ F 1) (b : F 1 ‚ü∂ F 2) (c : F 2 ‚ü∂ F 3) : fin 4 ‚•§ C :=
{ obj := F,
  map := Œª i j hij, fin4_functor_mk.map' F a b c i j hij.le,
  map_id' := Œª i, fin4_functor_mk.map'_id F a b c i,
  map_comp' := Œª i j k hij hjk, by rw fin4_functor_mk.map'_comp F a b c i j k hij.le hjk.le }

end category_theory
