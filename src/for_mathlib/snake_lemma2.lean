import for_mathlib.snake_lemma
import for_mathlib.exact_seq2

noncomputable theory

open category_theory category_theory.limits

variables {ùíú : Type*} [category ùíú] [abelian ùíú]
variables (A‚ÇÄ B‚ÇÄ C‚ÇÄ : ùíú)
variables (A‚ÇÅ B‚ÇÅ C‚ÇÅ : ùíú)
variables (A‚ÇÇ B‚ÇÇ C‚ÇÇ : ùíú)
variables (A‚ÇÉ B‚ÇÉ C‚ÇÉ : ùíú)
variables (f‚ÇÄ : A‚ÇÄ ‚ü∂ B‚ÇÄ) (g‚ÇÄ : B‚ÇÄ ‚ü∂ C‚ÇÄ)
variables (a‚ÇÄ : A‚ÇÄ ‚ü∂ A‚ÇÅ) (b‚ÇÄ : B‚ÇÄ ‚ü∂ B‚ÇÅ) (c‚ÇÄ : C‚ÇÄ ‚ü∂ C‚ÇÅ)
variables (f‚ÇÅ : A‚ÇÅ ‚ü∂ B‚ÇÅ) (g‚ÇÅ : B‚ÇÅ ‚ü∂ C‚ÇÅ)
variables (a‚ÇÅ : A‚ÇÅ ‚ü∂ A‚ÇÇ) (b‚ÇÅ : B‚ÇÅ ‚ü∂ B‚ÇÇ) (c‚ÇÅ : C‚ÇÅ ‚ü∂ C‚ÇÇ)
variables (f‚ÇÇ : A‚ÇÇ ‚ü∂ B‚ÇÇ) (g‚ÇÇ : B‚ÇÇ ‚ü∂ C‚ÇÇ)
variables (a‚ÇÇ : A‚ÇÇ ‚ü∂ A‚ÇÉ) (b‚ÇÇ : B‚ÇÇ ‚ü∂ B‚ÇÉ) (c‚ÇÇ : C‚ÇÇ ‚ü∂ C‚ÇÉ)
variables (f‚ÇÉ : A‚ÇÉ ‚ü∂ B‚ÇÉ) (g‚ÇÉ : B‚ÇÉ ‚ü∂ C‚ÇÉ)

namespace category_theory

local notation `kernel_map`   := kernel.map _ _ _ _
local notation `cokernel_map` := cokernel.map _ _ _ _

structure snake : Prop :=
[row_exact‚ÇÅ : exact f‚ÇÅ g‚ÇÅ]
[row_exact‚ÇÇ : exact f‚ÇÇ g‚ÇÇ]
[row_epi : epi g‚ÇÅ]
[row_mono : mono f‚ÇÇ]
(col_exact_a : exact_seq ùíú [a‚ÇÄ, a‚ÇÅ, a‚ÇÇ])
(col_exact_b : exact_seq ùíú [b‚ÇÄ, b‚ÇÅ, b‚ÇÇ])
(col_exact_c : exact_seq ùíú [c‚ÇÄ, c‚ÇÅ, c‚ÇÇ])
[col_mono_a : mono a‚ÇÄ]
[col_mono_b : mono b‚ÇÄ]
[col_mono_c : mono c‚ÇÄ]
[col_epi_a : epi a‚ÇÇ]
[col_epi_b : epi b‚ÇÇ]
[col_epi_c : epi c‚ÇÇ]
(sq_a‚ÇÄ : a‚ÇÄ ‚â´ f‚ÇÅ = f‚ÇÄ ‚â´ b‚ÇÄ)
(sq_b‚ÇÄ : b‚ÇÄ ‚â´ g‚ÇÅ = g‚ÇÄ ‚â´ c‚ÇÄ)
(sq_a‚ÇÅ : a‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ ‚â´ b‚ÇÅ)
(sq_b‚ÇÅ : b‚ÇÅ ‚â´ g‚ÇÇ = g‚ÇÅ ‚â´ c‚ÇÅ)
(sq_a‚ÇÇ : a‚ÇÇ ‚â´ f‚ÇÉ = f‚ÇÇ ‚â´ b‚ÇÇ)
(sq_b‚ÇÇ : b‚ÇÇ ‚â´ g‚ÇÉ = g‚ÇÇ ‚â´ c‚ÇÇ)

namespace snake

lemma mk_of_sequence_hom (sq‚ÇÅ : a‚ÇÅ ‚â´ f‚ÇÇ = f‚ÇÅ ‚â´ b‚ÇÅ) (sq‚ÇÇ : b‚ÇÅ ‚â´ g‚ÇÇ = g‚ÇÅ ‚â´ c‚ÇÅ)
  [exact f‚ÇÅ g‚ÇÅ] [exact f‚ÇÇ g‚ÇÇ] [epi g‚ÇÅ] [mono f‚ÇÇ] : snake
  (kernel a‚ÇÅ) (kernel b‚ÇÅ) (kernel c‚ÇÅ)
  A‚ÇÅ B‚ÇÅ C‚ÇÅ
  A‚ÇÇ B‚ÇÇ C‚ÇÇ
  (cokernel a‚ÇÅ) (cokernel b‚ÇÅ) (cokernel c‚ÇÅ)
  (kernel_map sq‚ÇÅ) (kernel_map sq‚ÇÇ)
  (kernel.Œπ _) (kernel.Œπ _) (kernel.Œπ _)
  f‚ÇÅ g‚ÇÅ
  a‚ÇÅ b‚ÇÅ c‚ÇÅ
  f‚ÇÇ g‚ÇÇ
  (cokernel.œÄ _) (cokernel.œÄ _) (cokernel.œÄ _)
  (cokernel_map sq‚ÇÅ) (cokernel_map sq‚ÇÇ) :=
{ col_exact_a := exact_seq.cons _ _ infer_instance _ $ (exact_iff_exact_seq _ _).mp infer_instance,
  col_exact_b := exact_seq.cons _ _ infer_instance _ $ (exact_iff_exact_seq _ _).mp infer_instance,
  col_exact_c := exact_seq.cons _ _ infer_instance _ $ (exact_iff_exact_seq _ _).mp infer_instance,
  sq_a‚ÇÄ := (limits.kernel.lift_Œπ _ _ _).symm,
  sq_b‚ÇÄ := (limits.kernel.lift_Œπ _ _ _).symm,
  sq_a‚ÇÅ := sq‚ÇÅ,
  sq_b‚ÇÅ := sq‚ÇÇ,
  sq_a‚ÇÇ := cokernel.œÄ_desc _ _ _,
  sq_b‚ÇÇ := cokernel.œÄ_desc _ _ _ }

variables
 {A‚ÇÄ B‚ÇÄ C‚ÇÄ
  A‚ÇÅ B‚ÇÅ C‚ÇÅ
  A‚ÇÇ B‚ÇÇ C‚ÇÇ
  A‚ÇÉ B‚ÇÉ C‚ÇÉ
  f‚ÇÄ g‚ÇÄ a‚ÇÄ b‚ÇÄ c‚ÇÄ f‚ÇÅ g‚ÇÅ a‚ÇÅ b‚ÇÅ c‚ÇÅ f‚ÇÇ g‚ÇÇ a‚ÇÇ b‚ÇÇ c‚ÇÇ f‚ÇÉ g‚ÇÉ}

variables (S : snake
  A‚ÇÄ B‚ÇÄ C‚ÇÄ
  A‚ÇÅ B‚ÇÅ C‚ÇÅ
  A‚ÇÇ B‚ÇÇ C‚ÇÇ
  A‚ÇÉ B‚ÇÉ C‚ÇÉ
  f‚ÇÄ g‚ÇÄ a‚ÇÄ b‚ÇÄ c‚ÇÄ f‚ÇÅ g‚ÇÅ a‚ÇÅ b‚ÇÅ c‚ÇÅ f‚ÇÇ g‚ÇÇ a‚ÇÇ b‚ÇÇ c‚ÇÇ f‚ÇÉ g‚ÇÉ)

variables

def snake_diagram : snake_diagram ‚•§ ùíú :=
snake_diagram.mk_functor
![![A‚ÇÄ, B‚ÇÄ, C‚ÇÄ],
  ![A‚ÇÅ, B‚ÇÅ, C‚ÇÅ],
  ![A‚ÇÇ, B‚ÇÇ, C‚ÇÇ],
  ![A‚ÇÉ, B‚ÇÉ, C‚ÇÉ]]
f‚ÇÄ g‚ÇÄ a‚ÇÄ b‚ÇÄ c‚ÇÄ f‚ÇÅ g‚ÇÅ a‚ÇÅ b‚ÇÅ c‚ÇÅ f‚ÇÇ g‚ÇÇ a‚ÇÇ b‚ÇÇ c‚ÇÇ f‚ÇÉ g‚ÇÉ
S.sq_a‚ÇÄ S.sq_b‚ÇÄ S.sq_a‚ÇÅ S.sq_b‚ÇÅ S.sq_a‚ÇÇ S.sq_b‚ÇÇ

lemma is_snake_input : is_snake_input S.snake_diagram :=
{ row_exact‚ÇÅ := by { dsimp [snake_diagram], simpa using S.row_exact‚ÇÅ },
  row_exact‚ÇÇ := by { dsimp [snake_diagram], simpa using S.row_exact‚ÇÇ },
  col_exact‚ÇÅ := begin
    intros j,
    dsimp [snake_diagram],
    fin_cases j with [0, 1, 2]; simp; rw exact_iff_exact_seq,
    exacts [S.col_exact_a.extract 0 2, S.col_exact_b.extract 0 2, S.col_exact_c.extract 0 2],
  end,
  col_exact‚ÇÇ := begin
    intros j,
    dsimp [snake_diagram],
    fin_cases j with [0, 1, 2]; simp; rw exact_iff_exact_seq,
    exacts [S.col_exact_a.extract 1 2, S.col_exact_b.extract 1 2, S.col_exact_c.extract 1 2],
  end,
  col_mono := begin
    intros j,
    dsimp [snake_diagram],
    fin_cases j with [0, 1, 2]; simp,
    exacts [S.col_mono_a, S.col_mono_b, S.col_mono_c],
  end,
  col_epi := begin
    intros j,
    dsimp [snake_diagram],
    fin_cases j with [0, 1, 2]; simp,
    exacts [S.col_epi_a, S.col_epi_b, S.col_epi_c],
  end,
  row_mono := by { dsimp [snake_diagram], simp, exact S.row_mono },
  row_epi := by { dsimp [snake_diagram], simpa using S.row_epi } }

def snake_input : snake_input ùíú := ‚ü®S.snake_diagram, S.is_snake_input‚ü©

def Œ¥ : C‚ÇÄ ‚ü∂ A‚ÇÉ := S.is_snake_input.Œ¥

lemma six_term_exact_seq : exact_seq ùíú [f‚ÇÄ, g‚ÇÄ, S.Œ¥, f‚ÇÉ, g‚ÇÉ] :=
begin
  have := S.is_snake_input.six_term_exact_seq,
  dsimp [snake_diagram] at this,
  simpa only [snake_diagram.mk_functor_map_f0, snake_diagram.mk_functor_map_g0,
    snake_diagram.mk_functor_map_f3, snake_diagram.mk_functor_map_g3],
end

end snake

lemma mono_of_exact_of_eq_zero (hfg : exact f‚ÇÅ g‚ÇÅ) (h : f‚ÇÅ = 0) : mono g‚ÇÅ :=
by rwa [(abelian.tfae_mono A‚ÇÅ g‚ÇÅ).out 0 2, ‚Üê h]

lemma cokernel.map_mono_of_epi_of_mono (sq : f‚ÇÅ ‚â´ b‚ÇÅ = a‚ÇÅ ‚â´ f‚ÇÇ)
  [epi a‚ÇÅ] [mono b‚ÇÅ] [mono f‚ÇÇ] :
  mono (cokernel.map f‚ÇÅ f‚ÇÇ a‚ÇÅ b‚ÇÅ sq) :=
begin
  have S := snake.mk_of_sequence_hom A‚ÇÅ B‚ÇÅ (cokernel f‚ÇÅ) A‚ÇÇ B‚ÇÇ (cokernel f‚ÇÇ)
    f‚ÇÅ (cokernel.œÄ _) a‚ÇÅ b‚ÇÅ (cokernel.map f‚ÇÅ f‚ÇÇ a‚ÇÅ b‚ÇÅ sq) f‚ÇÇ (cokernel.œÄ _) sq.symm (by simp),
  apply (S.col_exact_c).pair.mono_of_is_zero,
  exact (S.six_term_exact_seq.drop 1).pair.is_zero_of_is_zero_is_zero
    (is_zero_kernel_of_mono _) (is_zero_cokernel_of_epi _),
end

end category_theory
