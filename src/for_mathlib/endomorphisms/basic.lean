import category_theory.abelian.projective
import category_theory.limits.preserves.finite
import for_mathlib.abelian_category

noncomputable theory

universes v v' u

open category_theory category_theory.limits

namespace category_theory

/-- `endomorphisms C` is the category whose objects are an object of `C` equipped with an
endomorphism. Morphisms are morphisms between objects which intertwine the endomorphisms. -/
structure endomorphisms (C : Type u) [category.{v} C] :=
(X : C)
(e : End X)

namespace endomorphisms

section category

variables {C : Type u} [category.{v} C]

@[ext] protected structure hom (X Y : endomorphisms C) :=
(f : X.X ‚ü∂ Y.X)
(comm : X.e ‚â´ f = f ‚â´ Y.e)

attribute [reassoc, simp] hom.comm

instance (C : Type u) [category.{v} C] : quiver (endomorphisms C) :=
{ hom := Œª X Y, hom X Y }

lemma f_injective (X Y : endomorphisms C) : function.injective (hom.f : (X ‚ü∂ Y) ‚Üí (X.X ‚ü∂ Y.X)) :=
by { intros f g h, ext, exact h }

protected def id (X : endomorphisms C) : X ‚ü∂ X :=
{ f := ùüô _,
  comm := by rw [category.comp_id, category.id_comp] }

protected def comp {X Y Z : endomorphisms C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : X ‚ü∂ Z :=
{ f := f.f ‚â´ g.f,
  comm := by simp only [hom.comm, hom.comm_assoc, category.assoc] }

instance (C : Type u) [category.{v} C] : category_struct (endomorphisms C) :=
{ id := Œª X, X.id,
  comp := Œª X Y Z f g, endomorphisms.comp f g }

@[simp] lemma id_f (X : endomorphisms C) : hom.f (ùüô X) = ùüô X.X := rfl

@[simps]
def end_of_e (X : endomorphisms C) : X ‚ü∂ X := ‚ü®X.e, rfl‚ü©

lemma end_of_e_comm {X Y : endomorphisms C} (g : X ‚ü∂ Y) : X.end_of_e ‚â´ g =
  g ‚â´ Y.end_of_e :=
by { ext, apply endomorphisms.hom.comm, }

@[simp, reassoc] lemma comp_f {X Y Z : endomorphisms C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  hom.f (f ‚â´ g) = f.f ‚â´ g.f := rfl

instance (C : Type u) [category.{v} C] : category (endomorphisms C) :=
{ id_comp' := Œª X Y f, by { ext1, simp only [comp_f, id_f, category.id_comp] },
  comp_id' := Œª X Y f, by { ext1, simp only [comp_f, id_f, category.comp_id] },
  assoc' := Œª X Y Z W f g h, by { ext1, simp only [comp_f, category.assoc] } }

lemma congr_f {X Y : endomorphisms C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (h : f‚ÇÅ = f‚ÇÇ) : f‚ÇÅ.f = f‚ÇÇ.f := by rw h

@[simp, reassoc] lemma pow_comm {X Y : endomorphisms C} (f : X ‚ü∂ Y) (n : ‚Ñï) :
  (X.e ^ n : End X.X) ‚â´ f.f = f.f ‚â´ (Y.e ^ n : End Y.X) :=
begin
  induction n with n ih,
  { simp only [pow_zero, End.one_def, category.id_comp, category.comp_id] },
  { simp only [nat.succ_eq_add_one, pow_succ, End.mul_def, category.assoc, hom.comm, reassoc_of ih] }
end

@[simps]
protected def forget (C : Type u) [category.{v} C] : endomorphisms C ‚•§ C :=
{ obj := Œª X, X.X,
  map := Œª X Y f, f.f,
  map_id' := Œª X, rfl,
  map_comp' := Œª X Y Z f g, rfl }

instance forget_faithful : faithful (endomorphisms.forget C) :=
{ map_injective' := by { intros X Y f g h, ext, exact h } }

lemma epi_of_epi_f {X Y : endomorphisms C} (f : X ‚ü∂ Y) [epi f.f] : epi f :=
{ left_cancellation := Œª Z g h w, begin
    ext, rw [‚Üê cancel_epi f.f, ‚Üê comp_f, w, comp_f],
  end }

def mk_iso {X Y : endomorphisms C} (e : X.X ‚âÖ Y.X) (h : X.e ‚â´ e.hom = e.hom ‚â´ Y.e) : X ‚âÖ Y :=
{ hom := ‚ü®e.hom, h‚ü©,
  inv := ‚ü®e.inv, by rw [e.comp_inv_eq, category.assoc, e.eq_inv_comp, h]‚ü©,
  hom_inv_id' := by { ext, simp only [comp_f, iso.hom_inv_id, id_f] },
  inv_hom_id' := by { ext, simp only [comp_f, iso.inv_hom_id, id_f] } }

end category

section limits

variables {C : Type u} [category.{v} C]
variables {J : Type v'} [small_category J]

@[simps]
def twist_cone {K : J ‚•§ endomorphisms C}
  (S : cone (K ‚ãô endomorphisms.forget C)) :
  cone (K ‚ãô endomorphisms.forget C) :=
{ X := S.X,
  œÄ :=
  { app := Œª j, S.œÄ.app j ‚â´ (K.obj j).e,
    naturality' := begin
      intros i j f,
      dsimp,
      simp only [category.id_comp, category.assoc, hom.comm],
      erw S.w_assoc,
    end } }

abbreviation cone_e {K : J ‚•§ endomorphisms C}
  (S : cone (K ‚ãô endomorphisms.forget C)) (hS : is_limit S) :
  S.X ‚ü∂ S.X :=
@is_limit.lift J _ C _ (K ‚ãô endomorphisms.forget C) S hS (twist_cone S)

@[simps]
protected def cone {K : J ‚•§ endomorphisms C}
  (S : cone (K ‚ãô endomorphisms.forget C)) (hS : is_limit S) :
  cone K :=
{ X :=
  { X := S.X,
    e := cone_e S hS },
  œÄ :=
  { app := Œª j,
    { f := S.œÄ.app _,
      comm := by { dsimp, simp } },
    naturality' := Œª i j f, begin
      ext, dsimp, simp, erw S.w,
    end } }

@[simps]
protected def is_limit_cone {K : J ‚•§ endomorphisms C}
  (S : cone (K ‚ãô endomorphisms.forget C)) (hS : is_limit S) :
  is_limit (endomorphisms.cone S hS) :=
{ lift := Œª S,
  { f := hS.lift ‚ü®S.X.X,
    { app := Œª j, (S.œÄ.app _).f,
      naturality' := begin
        intros i j f,
        dsimp,
        simp [‚Üê comp_f],
      end }‚ü©,
    comm := begin
      apply hS.hom_ext, dsimp, simp,
    end },
  fac' := begin
    intros s j, ext, dsimp, simp,
  end,
  uniq' := begin
    intros s m hm, ext, apply hS.hom_ext,
    intros j, specialize hm j, apply_fun (Œª e, e.f) at hm,
    dsimp at *, simp [hm],
  end }

.

protected def cone_iso {K : J ‚•§ endomorphisms C} (S : cone K)
  (hS : is_limit ((endomorphisms.forget C).map_cone S)) :
  endomorphisms.cone _ hS ‚âÖ S :=
cones.ext
({ hom :=
  { f := ùüô _,
    comm := by { apply hS.hom_ext, intros j, dsimp, simp, erw hS.fac, dsimp, simp, } },
  inv :=
  { f := ùüô _,
    comm := by { apply hS.hom_ext, intros j, dsimp, simp, erw hS.fac, dsimp, simp } },
  hom_inv_id' := by { ext, dsimp, simp },
  inv_hom_id' := by { ext, dsimp, simp } })
begin
  intros j, ext,
  dsimp, simp,
end

protected def cone_iso' {K : J ‚•§ endomorphisms C}
  (S : cone (K ‚ãô endomorphisms.forget C)) (hS : is_limit S) :
  (endomorphisms.forget C).map_cone (endomorphisms.cone S hS) ‚âÖ S :=
cones.ext
(iso.refl _)
begin
  intros j,
  dsimp,
  simp,
end

instance has_limit (K : J ‚•§ endomorphisms C) [has_limit (K ‚ãô endomorphisms.forget C)] :
  has_limit K :=
‚ü®‚ü®‚ü®_, endomorphisms.is_limit_cone _ (limit.is_limit _)‚ü©‚ü©‚ü©

instance has_limits_of_shape [has_limits_of_shape J C] :
  has_limits_of_shape J (endomorphisms C) := ‚ü®‚ü©

instance has_limits [has_limits C] : has_limits (endomorphisms C) := ‚ü®‚ü©

instance creates_limit (K : J ‚•§ endomorphisms C) : creates_limit K (endomorphisms.forget _) :=
{ reflects := Œª S hS, is_limit.of_iso_limit (endomorphisms.is_limit_cone _ _)
    (endomorphisms.cone_iso _ hS),
  lifts := Œª S hS,
  { lifted_cone := endomorphisms.cone _ hS,
    valid_lift := endomorphisms.cone_iso' _ _ } }

instance preserves_limit (K : J ‚•§ endomorphisms C) [has_limit (K ‚ãô endomorphisms.forget C)] :
  preserves_limit K (endomorphisms.forget C) :=
category_theory.preserves_limit_of_creates_limit_and_has_limit K (endomorphisms.forget C)

instance preserves_limits_of_shape [has_limits_of_shape J C] :
  preserves_limits_of_shape J (endomorphisms.forget C) := ‚ü®‚ü©

instance preserves_limits [has_limits C] : preserves_limits (endomorphisms.forget C) := ‚ü®‚ü©

instance [has_finite_limits C] : preserves_finite_limits (endomorphisms.forget C) :=
begin
  apply preserves_finite_limits_of_preserves_finite_limits_of_size.{v},
  introsI J hJ1 hJ2, apply_instance,
end

end limits

section colimits

variables {C : Type u} [category.{v} C]
variables {J : Type v} [small_category J]

@[simps]
def twist_cocone {K : J ‚•§ endomorphisms C}
  (S : cocone (K ‚ãô endomorphisms.forget C)) :
  cocone (K ‚ãô endomorphisms.forget C) :=
{ X := S.X,
  Œπ :=
  { app := Œª j, (K.obj j).e ‚â´ S.Œπ.app j,
    naturality' := begin
      intros i j f,
      dsimp,
      simp only [category.comp_id, ‚Üê hom.comm_assoc],
      erw S.w,
    end } }

abbreviation cocone_e {K : J ‚•§ endomorphisms C}
  (S : cocone (K ‚ãô endomorphisms.forget C)) (hS : is_colimit S) :
  S.X ‚ü∂ S.X :=
@is_colimit.desc J _ C _ (K ‚ãô endomorphisms.forget C) S hS (twist_cocone S)

@[simps]
protected def cocone {K : J ‚•§ endomorphisms C}
  (S : cocone (K ‚ãô endomorphisms.forget C)) (hS : is_colimit S) :
  cocone K :=
{ X :=
  { X := S.X,
    e := cocone_e S hS },
  Œπ :=
  { app := Œª j,
    { f := S.Œπ.app j,
      comm := by { dsimp, simp } },
    naturality' := Œª i j f, begin
      ext, dsimp, simp, erw S.w,
    end } }

@[simps]
protected def is_colimit_cocone {K : J ‚•§ endomorphisms C}
  (S : cocone (K ‚ãô endomorphisms.forget C)) (hS : is_colimit S) :
  is_colimit (endomorphisms.cocone S hS) :=
{ desc := Œª S,
  { f := hS.desc ‚ü®S.X.X,
    { app := Œª j, (S.Œπ.app j).f,
      naturality' := begin
        intros i j f,
        dsimp,
        simp [‚Üê comp_f],
      end }‚ü©,
    comm := begin
      apply hS.hom_ext, dsimp, simp,
    end },
  fac' := begin
    intros s j, ext, dsimp, simp,
  end,
  uniq' := begin
    intros s m hm, ext, apply hS.hom_ext,
    intros j, specialize hm j, apply_fun (Œª e, e.f) at hm,
    dsimp at *, simp [hm],
  end }

.

protected def cocone_iso {K : J ‚•§ endomorphisms C} (S : cocone K)
  (hS : is_colimit ((endomorphisms.forget C).map_cocone S)) :
  endomorphisms.cocone _ hS ‚âÖ S :=
cocones.ext
({ hom :=
  { f := ùüô _,
    comm := by { apply hS.hom_ext, intros j, dsimp, simp, erw hS.fac, dsimp, simp, } },
  inv :=
  { f := ùüô _,
    comm := by { apply hS.hom_ext, intros j, dsimp, simp, erw hS.fac, dsimp, simp } },
  hom_inv_id' := by { ext, dsimp, simp },
  inv_hom_id' := by { ext, dsimp, simp } })
begin
  intros j, ext,
  dsimp, simp,
end

protected def cocone_iso' {K : J ‚•§ endomorphisms C}
  (S : cocone (K ‚ãô endomorphisms.forget C)) (hS : is_colimit S) :
  (endomorphisms.forget C).map_cocone (endomorphisms.cocone S hS) ‚âÖ S :=
cocones.ext
(iso.refl _)
begin
  intros j,
  dsimp,
  simp,
end

instance has_colimit (K : J ‚•§ endomorphisms C) [has_colimit (K ‚ãô endomorphisms.forget C)] :
  has_colimit K :=
‚ü®‚ü®‚ü®_, endomorphisms.is_colimit_cocone _ (colimit.is_colimit _)‚ü©‚ü©‚ü©

instance has_colimits_of_shape [has_colimits_of_shape J C] :
  has_colimits_of_shape J (endomorphisms C) := ‚ü®‚ü©

instance has_colimits [has_colimits C] : has_colimits (endomorphisms C) := ‚ü®‚ü©

instance creates_colimit (K : J ‚•§ endomorphisms C) : creates_colimit K (endomorphisms.forget _) :=
{ reflects := Œª S hS, is_colimit.of_iso_colimit (endomorphisms.is_colimit_cocone _ _)
    (endomorphisms.cocone_iso _ hS),
  lifts := Œª S hS,
  { lifted_cocone := endomorphisms.cocone _ hS,
    valid_lift := endomorphisms.cocone_iso' _ _ } }

instance preserves_colimit (K : J ‚•§ endomorphisms C) [has_colimit (K ‚ãô endomorphisms.forget C)] :
  preserves_colimit K (endomorphisms.forget C) :=
category_theory.preserves_colimit_of_creates_colimit_and_has_colimit K (endomorphisms.forget C)

instance preserves_colimits_of_shape [has_colimits_of_shape J C] :
  preserves_colimits_of_shape J (endomorphisms.forget C) := ‚ü®‚ü©

instance preserves_colimits [has_colimits C] : preserves_colimits (endomorphisms.forget C) := ‚ü®‚ü©

instance [has_finite_colimits C] : preserves_finite_colimits (endomorphisms.forget C) :=
begin
  apply preserves_finite_colimits_of_preserves_finite_colimits_of_size.{v},
  introsI J hJ1 hJ2, apply_instance,
end

end colimits

section projectives

variables {C : Type u} [category.{v} C]

section free

variable [has_coproducts_of_shape (ulift.{v} ‚Ñï) C]

/-- `free X` is ‚®Å‚ÇôX, the direct sum over the naturals, equipped with the endomorphism
sending `(a : X)` in degree `n` to `a` in degree `n+1`. An alternative way to view `free X`
is `X ‚®Ç_{‚Ñ§} ‚Ñ§[T]` with the endomorphism given by multiplication by `T`. -/
@[simps]
def free (X : C) : endomorphisms C :=
{ X := ‚àê (Œª i : ulift.{v} ‚Ñï, X),
  e := sigma.desc $ Œª i, sigma.Œπ (Œª i : ulift.{v} ‚Ñï, X) ‚ü®i.down + 1‚ü© }

@[reassoc] lemma free.Œπ_comp_e (X : C) (i : ulift.{v} ‚Ñï) :
  sigma.Œπ (Œª i : ulift.{v} ‚Ñï, X) i ‚â´ (free X).e = sigma.Œπ (Œª i : ulift.{v} ‚Ñï, X) ‚ü®i.down + 1‚ü© :=
begin
  dsimp, simp only [colimit.Œπ_desc, cofan.mk_Œπ_app],
end

@[ext] lemma free.ext {X : C} {A : endomorphisms C} (f g : free X ‚ü∂ A)
  (w : sigma.Œπ (Œª i : ulift.{v} ‚Ñï, X) ‚ü®0‚ü© ‚â´ f.f = sigma.Œπ (Œª i : ulift.{v} ‚Ñï, X) ‚ü®0‚ü© ‚â´ g.f) :
  f = g :=
begin
  ext ‚ü®‚ü®i‚ü©‚ü©, dsimp,
  induction i with i ih, { exact w },
  apply_fun (Œª Œ±, Œ± ‚â´ A.e) at ih,
  simp only [category.assoc, ‚Üê hom.comm, free.Œπ_comp_e_assoc] at ih,
  exact ih,
end

/-- The map `free T ‚ü∂ A` in `endomorphisms C` induced by a map `T ‚ü∂ A.X` in `C`. Here `A.X`
is the forgetful functor forgetting the endomorphism. -/
@[simps]
def free.desc {X : C} {A : endomorphisms C} (f : X ‚ü∂ A.X) : free X ‚ü∂ A :=
{ f := sigma.desc $ Œª i, f ‚â´ (A.e ^ i.down : End A.X),
  comm := begin
    ext1 ‚ü®i‚ü©, dsimp,
    simp only [colimit.Œπ_desc_assoc, cofan.mk_Œπ_app,
      colimit.Œπ_desc, category.assoc, pow_succ, End.mul_def],
  end }

lemma free.desc_comp {X : C} {A B : endomorphisms C} (f : X ‚ü∂ A.X) (g : A ‚ü∂ B) :
  free.desc f ‚â´ g = free.desc (f ‚â´ g.f) :=
begin
  ext1, dsimp,
  simp only [colimit.Œπ_desc_assoc, cofan.mk_Œπ_app, colimit.Œπ_desc, category.assoc, pow_comm],
end

def free.map {X Y : C} (f : X ‚ü∂ Y) : free X ‚ü∂ free Y :=
{ f := sigma.desc $ Œª i, f ‚â´ sigma.Œπ (Œª i : ulift.{v} ‚Ñï, Y) i,
  comm := begin
    ext1 ‚ü®i‚ü©,
    dsimp,
    simp only [colimit.Œπ_desc_assoc, cofan.mk_Œπ_app, colimit.Œπ_desc, category.assoc],
  end }

variable (C)

def functor.free : C ‚•§ endomorphisms C :=
{ obj := free,
  map := Œª _ _, free.map,
  map_id' := Œª X, begin ext, dsimp, simp only [free.map, category.id_comp, colimit.Œπ_desc,
    cofan.mk_Œπ_app, category.comp_id], end,
  map_comp' := Œª X Y Z f g, begin ext, dsimp, simp only [free.map, category.assoc, colimit.Œπ_desc,
    cofan.mk_Œπ_app, colimit.Œπ_desc_assoc], end }

end free

section cofree

variable {C}
variable [has_products_of_shape (ulift.{v} ‚Ñï) C]

/-- `cofree X` is ‚àè‚ÇôX, the product over the naturals, equipped with the endomorphism
sending `(a : X)` in degree `n` to `a` in degree `n+1`. -/
def cofree (X : C) : endomorphisms C :=
{ X := ‚àè (Œª i : ulift.{v} ‚Ñï, X),
  e := pi.lift $ Œª i, pi.œÄ _ ‚ü®i.down + 1‚ü© }

def cofree.lift {X : C} {A : endomorphisms C} (f : A.X ‚ü∂ X) :
  A ‚ü∂ cofree X :=
{ f := pi.lift $ Œª i, (A.e ^ i.down : End A.X) ‚â´ f,
  comm := begin
    dsimp [cofree],
    ext ‚ü®‚ü®j‚ü©‚ü©, dsimp,
    simp only [category.assoc, limit.lift_œÄ, fan.mk_œÄ_app],
    rw [‚Üê category.assoc, pow_succ, ‚Üê End.mul_def], congr' 1,
    induction j with j hj,
    { simp },
    { simp only [End.mul_def, pow_succ] at *,
      simp [reassoc_of hj] }
  end }

end cofree

variables [has_products_of_shape (ulift.{v} ‚Ñï) C] [has_coproducts_of_shape (ulift.{v} ‚Ñï) C]

lemma f_epi {X Y : endomorphisms C} (f : X ‚ü∂ Y) [epi f] : epi f.f :=
{ left_cancellation := Œª Z g h w, begin
    let gg : Y ‚ü∂ cofree Z := cofree.lift g,
    let hh : Y ‚ü∂ cofree Z := cofree.lift h,
    have : f ‚â´ gg = f ‚â´ hh,
    { ext, dsimp [gg, hh, cofree.lift], simp,
      simp_rw [‚Üê category.assoc, ‚Üê pow_comm, category.assoc, w] },
    rw cancel_epi at this,
    apply_fun (Œª e, e.f ‚â´ pi.œÄ (Œª i : ulift.{v} ‚Ñï, Z) (ulift.up 0)) at this,
    dsimp [gg, hh, cofree.lift] at this, simpa using this,
  end }

lemma f_mono {X Y : endomorphisms C} (f : X ‚ü∂ Y) [mono f] : mono f.f :=
{ right_cancellation := Œª Z g h w, begin
    let gg : free Z ‚ü∂ X := free.desc g,
    let hh : free Z ‚ü∂ X := free.desc h,
    have : gg ‚â´ f = hh ‚â´ f,
    { ext, dsimp [gg,hh, free.desc], simpa },
    rw cancel_mono at this,
    apply_fun (Œª e, sigma.Œπ ((Œª i : ulift.{v} ‚Ñï, Z)) (ulift.up 0) ‚â´ e.f) at this,
    dsimp [gg, hh, free.desc] at this, simpa using this
  end }

instance free.projective (X : C) [projective X] : projective (free X) :=
{ factors := Œª E Y f e he, begin
    resetI,
    let œÜ : X ‚ü∂ Y.X := sigma.Œπ (Œª i : ulift.{v} ‚Ñï, X) ‚ü®0‚ü© ‚â´ f.f,
    haveI : epi e.f := f_epi _,
    use free.desc (projective.factor_thru œÜ e.f),
    rw [free.desc_comp, projective.factor_thru_comp],
    ext1, dsimp, simp only [colimit.Œπ_desc, cofan.mk_Œπ_app, pow_zero, End.one_def, category.comp_id],
  end }

def free.presentation [enough_projectives C] (A : endomorphisms C) :
  projective_presentation A :=
{ P := free (projective.over A.X),
  projective := infer_instance,
  f := free.desc $ projective.œÄ _,
  epi := begin
    suffices : epi (free.desc (projective.œÄ A.X)).f,
    { resetI, apply epi_of_epi_f },
    dsimp,
    refine @epi_of_epi _ _ _ _ _ (sigma.Œπ _ _) _ (id _), { exact ‚ü®0‚ü© },
    simp only [colimit.Œπ_desc, cofan.mk_Œπ_app, pow_zero, End.one_def, category.comp_id],
    apply_instance
  end }

instance [enough_projectives C] : enough_projectives (endomorphisms C) :=
{ presentation := Œª A, ‚ü®free.presentation A‚ü© }

-- generalize to colimits
instance projective_sigma {C Œπ : Type*} [category C] (P : Œπ ‚Üí C) [has_coproduct P]
  [‚àÄ i, projective (P i)] :
  projective (‚àê P) :=
{ factors := begin
  introsI E X f e he,
  let œÜ : ‚àê P ‚ü∂ E := sigma.desc (Œª i, projective.factor_thru (sigma.Œπ _ _ ‚â´ f) e),
  refine ‚ü®œÜ, _‚ü©,
  ext ‚ü®i‚ü©,
  rw [limits.colimit.Œπ_desc_assoc, limits.cofan.mk_Œπ_app, projective.factor_thru_comp],
end }

instance projective_X [enough_projectives C] (P : endomorphisms C) [projective P] :
  projective P.X :=
‚ü®Œª E X f e he, begin
  let F := free.presentation P,
  haveI : projective F.P.X := endomorphisms.projective_sigma _,
  haveI : epi F.f := F.epi,
  let s : P ‚ü∂ F.P := projective.factor_thru (ùüô _) F.f,
  have hsœÄ : s ‚â´ F.f = ùüô _ := projective.factor_thru_comp _ _,
  let X' : endomorphisms C := ‚ü®X, ùüô _‚ü©,
  let E' : endomorphisms C := ‚ü®E, ùüô _‚ü©,
  let e' : E' ‚ü∂ X' := ‚ü®e, by { dsimp only, rw [category.id_comp, category.comp_id] }‚ü©,
  haveI he' : epi e' := epi_of_epi_f e',
  let œÜ : F.P.X ‚ü∂ E := projective.factor_thru (F.f.f ‚â´ f) e,
  refine ‚ü®s.f ‚â´ œÜ, _‚ü©,
  rw [category.assoc, projective.factor_thru_comp, ‚Üê comp_f_assoc, hsœÄ, id_f, category.id_comp],
end‚ü©

end projectives

section preadditive
open category_theory.preadditive

variables {ùìê : Type u} [category.{v} ùìê] [preadditive ùìê]
variables (X Y : endomorphisms ùìê)

instance : has_zero (X ‚ü∂ Y) := ‚ü®‚ü®0, by simp only [comp_zero, zero_comp, hom.comm]‚ü©‚ü©
instance : has_add (X ‚ü∂ Y) := ‚ü®Œª f g, ‚ü®f.f + g.f, by simp only [comp_add, add_comp, hom.comm]‚ü©‚ü©
instance : has_sub (X ‚ü∂ Y) := ‚ü®Œª f g, ‚ü®f.f - g.f, by simp only [comp_sub, sub_comp, hom.comm]‚ü©‚ü©
instance : has_neg (X ‚ü∂ Y) := ‚ü®Œª f, ‚ü®-f.f, by simp only [comp_neg, neg_comp, hom.comm]‚ü©‚ü©
instance has_nsmul : has_smul ‚Ñï (X ‚ü∂ Y) := ‚ü®Œª n f, ‚ü®n ‚Ä¢ f.f, by simp only [comp_nsmul, nsmul_comp, hom.comm]‚ü©‚ü©
instance has_zsmul : has_smul ‚Ñ§ (X ‚ü∂ Y) := ‚ü®Œª n f, ‚ü®n ‚Ä¢ f.f, by simp only [comp_zsmul, zsmul_comp, hom.comm]‚ü©‚ü©

instance : add_comm_group (X ‚ü∂ Y) :=
(f_injective X Y).add_comm_group _ rfl (Œª _ _, rfl) (Œª _, rfl) (Œª _ _, rfl) (Œª _ _, rfl) (Œª _ _, rfl)

@[simp] lemma zero_f : hom.f (0 : X ‚ü∂ Y) = 0 := rfl
variables {X Y} (f g : X ‚ü∂ Y)
@[simp] lemma add_f : (f + g).f = f.f + g.f := rfl
@[simp] lemma sub_f : (f - g).f = f.f - g.f := rfl
@[simp] lemma neg_f : (-f).f = -(f.f) := rfl
@[simp] lemma nsmul_f (n : ‚Ñï) (f : X ‚ü∂ Y) : (n ‚Ä¢ f).f = n ‚Ä¢ f.f := rfl
@[simp] lemma zsmul_f (n : ‚Ñ§) (f : X ‚ü∂ Y) : (n ‚Ä¢ f).f = n ‚Ä¢ f.f := rfl

variables (ùìê)

instance : preadditive (endomorphisms ùìê) :=
{ add_comp' := by { intros, ext, dsimp, rw add_comp },
  comp_add' := by { intros, ext, dsimp, rw comp_add } }

instance forget_additive : (endomorphisms.forget ùìê).additive := {}

instance functor.free_additive [has_coproducts_of_shape (ulift.{v} ‚Ñï) ùìê] :
  (functor.free ùìê).additive := ‚ü®Œª X Y f g, by { delta functor.free free.map,
    ext, simp, }‚ü©

lemma is_zero_X {X : endomorphisms ùìê} (h : is_zero X) : is_zero X.X :=
by { rw is_zero_iff_id_eq_zero at h ‚ä¢, apply_fun (Œª a, a.f) at h, exact h }

end preadditive

section abelian

variables {ùìê : Type u} [category.{v} ùìê] [abelian ùìê]
  {X Y : endomorphisms ùìê} (f : X ‚ü∂ Y)

@[simps]
protected def kernel_obj : endomorphisms ùìê :=
{ X := kernel f.f,
  e := kernel.lift _ (kernel.Œπ _ ‚â´ X.e) (by simp) }

@[simps]
protected def kernel_Œπ : endomorphisms.kernel_obj f ‚ü∂ X :=
{ f := kernel.Œπ _,
  comm := by { dsimp, simp } }

protected def kernel_fork : kernel_fork f :=
kernel_fork.of_Œπ (endomorphisms.kernel_Œπ f) $ by { ext, dsimp, simp }

@[simp]
protected lemma kernel_fork_Œπ_f :
  (endomorphisms.kernel_fork f).Œπ.f = kernel.Œπ _ := rfl

@[simps]
protected def kernel_lift (s : kernel_fork f) :
  s.X ‚ü∂ endomorphisms.kernel_obj f :=
{ f := kernel.lift _ s.Œπ.f $ by { rw [‚Üê comp_f, s.condition, zero_f], },
  comm := by { ext, dsimp, simp } }

@[simps]
protected def is_limit_kernel_fork : is_limit (endomorphisms.kernel_fork f) :=
is_limit_aux _
(Œª s, endomorphisms.kernel_lift f s)
(Œª s, by { ext, dsimp, simp })
(Œª s m hm, by { apply_fun (Œª e, e.f) at hm, ext, dsimp at *, simp [hm] } )

instance has_kernels : has_kernels (endomorphisms ùìê) :=
‚ü®Œª X Y f, ‚ü®‚ü®‚ü®endomorphisms.kernel_fork _, endomorphisms.is_limit_kernel_fork _‚ü©‚ü©‚ü©‚ü©

@[simps]
protected def cokernel_obj : endomorphisms ùìê :=
{ X := cokernel f.f,
  e := cokernel.desc _ (Y.e ‚â´ cokernel.œÄ _) $
    by { simp only [‚Üê (reassoc_of f.comm), cokernel.condition, comp_zero] } }

@[simps]
protected def cokernel_œÄ : Y ‚ü∂ endomorphisms.cokernel_obj f :=
{ f := cokernel.œÄ _,
  comm := by simp }

protected def cokernel_cofork : cokernel_cofork f :=
cokernel_cofork.of_œÄ (endomorphisms.cokernel_œÄ f) $ by { ext, dsimp, simp }

@[simp]
protected lemma cokernel_cofork_œÄ_f :
  (endomorphisms.cokernel_cofork f).œÄ.f = cokernel.œÄ _ := rfl

@[simps]
protected def cokernel_desc (s : cokernel_cofork f) :
  endomorphisms.cokernel_obj f ‚ü∂ s.X :=
{ f := cokernel.desc _ s.œÄ.f $ by { rw [‚Üê comp_f, s.condition, zero_f] },
  comm := by { ext, dsimp, simp } }

@[simps]
protected def is_colimit_cokernel_cofork : is_colimit (endomorphisms.cokernel_cofork f) :=
is_colimit_aux _
(Œª s, endomorphisms.cokernel_desc f s)
(Œª s, by { ext, dsimp, simp })
(Œª s m hm, by { apply_fun (Œª e, e.f) at hm, ext, dsimp at *, simp [hm] })

instance has_cokernels : has_cokernels (endomorphisms ùìê) :=
‚ü®Œª X Y f, ‚ü®‚ü®‚ü®endomorphisms.cokernel_cofork _, endomorphisms.is_colimit_cokernel_cofork _‚ü©‚ü©‚ü©‚ü©

def kernel_fork_iso :
  endomorphisms.kernel_fork f ‚âÖ kernel_fork.of_Œπ (endomorphisms.kernel_Œπ f)
  (endomorphisms.kernel_fork f).condition :=
cones.ext
(iso.refl _)
(by { rintro (_|_); tidy })

def is_limit_fork_of_is_limit
  (hF : is_limit (limits.kernel_fork.of_Œπ f.f (cokernel.condition _))) :
  is_limit (limits.kernel_fork.of_Œπ f (endomorphisms.cokernel_cofork _).condition) :=
is_limit_aux _
(Œª S,
{ f := hF.lift (kernel_fork.of_Œπ S.Œπ.f begin
    change _ ‚â´ (endomorphisms.cokernel_cofork _).œÄ.f = _,
    erw [‚Üê comp_f, S.condition, zero_f],
  end),
  comm := begin
    apply hF.hom_ext, rintro (_|_),
    { dsimp, simp only [category.assoc, hom.comm], erw hF.fac _ (walking_parallel_pair.zero),
      erw hF.fac_assoc _ (walking_parallel_pair.zero),
      dsimp, simp, },
    { dsimp, simp, }
  end })
begin
  intros S,
  ext, dsimp, erw hF.fac _ walking_parallel_pair.zero, refl,
end
begin
  intros S m hm,
  ext, dsimp, apply hF.hom_ext, rintros (_|_),
  { apply_fun (Œª e, e.f) at hm,
    dsimp at *,
    simp only [hm],
    erw hF.fac _ (walking_parallel_pair.zero), refl },
  { dsimp, simp },
end

def is_colimit_cofork_of_is_colimit
  (hF : is_colimit (limits.cokernel_cofork.of_œÄ f.f (kernel.condition _))) :
  is_colimit (limits.cokernel_cofork.of_œÄ f (endomorphisms.kernel_fork _).condition) :=
is_colimit_aux _
(Œª S,
{ f := hF.desc (cokernel_cofork.of_œÄ S.œÄ.f begin
    change (endomorphisms.kernel_fork _).Œπ.f ‚â´ _ = _,
    erw [‚Üê comp_f, S.condition, zero_f]
  end),
  comm := begin
    apply hF.hom_ext, rintro (_|_),
    { dsimp, simp },
    { dsimp, erw hF.fac_assoc _ (walking_parallel_pair.one),
      rw [‚Üê hom.comm_assoc],
      erw hF.fac _ (walking_parallel_pair.one),
      dsimp, simp }
  end })
begin
  intros S,
  ext, dsimp, erw hF.fac _ walking_parallel_pair.one, refl,
end
begin
  intros S m hm,
  ext, dsimp, apply hF.hom_ext, rintros (_|_),
  { dsimp, simp },
  { apply_fun (Œª e, e.f) at hm,
    dsimp at *,
    simp only [hm],
    erw hF.fac _ walking_parallel_pair.one, refl }
end

instance [has_coproducts_of_shape (ulift.{v} ‚Ñï) ùìê] [has_products_of_shape (ulift.{v} ‚Ñï) ùìê] :
  abelian (endomorphisms ùìê) :=
{ normal_mono_of_mono := begin
    introsI X Y f _,
    haveI := f_mono f,
    let hE : is_limit (kernel_fork.of_Œπ f.f _) :=
      category_theory.abelian.mono_is_kernel_of_cokernel _ (colimit.is_colimit _),
    fconstructor,
    exact endomorphisms.cokernel_obj f,
    exact endomorphisms.cokernel_œÄ f,
    exact (endomorphisms.cokernel_cofork f).condition,
    apply is_limit_fork_of_is_limit _ hE,
  end,
  normal_epi_of_epi := begin
    introsI X Y f _,
    haveI := f_epi f,
    let hE : is_colimit (cokernel_cofork.of_œÄ f.f _) :=
      category_theory.abelian.epi_is_cokernel_of_kernel _ (limit.is_limit _),
    fconstructor,
    exact endomorphisms.kernel_obj f,
    exact endomorphisms.kernel_Œπ f,
    exact (endomorphisms.kernel_fork f).condition,
    apply is_colimit_cofork_of_is_colimit _ hE,
  end,
  has_finite_products := begin
    constructor, intros J _,
    haveI : has_finite_products ùìê := abelian.has_finite_products, -- WHY IS THIS NEEDED!?
    constructor,
  end,
  .. (_ : preadditive (endomorphisms ùìê)) }

end abelian

end endomorphisms

end category_theory
