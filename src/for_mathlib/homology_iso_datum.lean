import category_theory.abelian.homology
import algebra.homology.homology
import for_mathlib.has_homology

noncomputable theory

universes v

open category_theory category_theory.limits opposite

variables {C : Type*} [category.{v} C] [abelian C]
variables {D : Type*} [category.{v} D] [abelian D]

variables {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (H : C) (w : f ‚â´ g = 0)

/- Eventually, all of this should be refactored using `short_complex`. -/

/-- This structure expresses that there is a candidate `H` for the
homology of composable maps `f : X ‚ü∂ Y` and `g : Y ‚ü∂ Z`.
When `0 ‚ü∂ K ‚ü∂ Y ‚ü∂ Z` and `X ‚ü∂ K ‚ü∂ Q ‚ü∂ 0` are exact, this
will give a `h : homology_iso_datum f g H` and there shall
be an isomorphism `h.iso : H ‚âÖ homology f g h.w`. The differences with
`has_homology f g H` are :
* this definition is not self dual: the homology is thought as the
quotient of cycles by boundaries;
* the object `K` can be any choice for the kernel of `Y ‚ü∂ Z` and
`H` can be any choice of cokernel for `X ‚ü∂ K`. -/
@[nolint has_inhabited_instance]
structure homology_iso_predatum :=
(w : f ‚â´ g = 0)
(K : C) (Œπ : K ‚ü∂ Y) (f' : X ‚ü∂ K) (fac' : f' ‚â´ Œπ = f) (zero‚ÇÅ' : Œπ ‚â´ g = 0)
(œÄ : K ‚ü∂ H) (zero‚ÇÇ' : f' ‚â´ œÄ = 0)

namespace homology_iso_predatum

restate_axiom fac'
restate_axiom zero‚ÇÅ'
restate_axiom zero‚ÇÇ'
attribute [simp, reassoc] fac zero‚ÇÅ zero‚ÇÇ

@[simps]
def tautological : homology_iso_predatum f g (cokernel (kernel.lift g f w)) :=
{ w := w,
  K := kernel g,
  Œπ := kernel.Œπ _,
  f' := kernel.lift g f w,
  fac' := kernel.lift_Œπ _ _ _,
  zero‚ÇÅ' := kernel.condition _,
  œÄ := cokernel.œÄ _,
  zero‚ÇÇ' := cokernel.condition _, }

@[simps]
def tautological' : homology_iso_predatum f g (homology f g w):=
{ w := w,
  K := kernel g,
  Œπ := kernel.Œπ _,
  f' := kernel.lift g f w,
  fac' := kernel.lift_Œπ _ _ _,
  zero‚ÇÅ' := kernel.condition _,
  œÄ := homology.œÄ' f g w,
  zero‚ÇÇ' := homology.condition_œÄ' _ _ _, }

variables {f g}

variables {H} (h : homology_iso_predatum f g H)

@[simps]
def fork : kernel_fork g := kernel_fork.of_Œπ h.Œπ h.zero‚ÇÅ

@[simps]
def cofork : cokernel_cofork h.f' := cokernel_cofork.of_œÄ h.œÄ h.zero‚ÇÇ

@[simps]
def apply_functor {D : Type*} [category D] [abelian D] (F : C ‚•§ D) [F.additive] :
  homology_iso_predatum (F.map f) (F.map g) (F.obj H):=
{ w := by rw [‚Üê F.map_comp, h.w, F.map_zero],
  K := F.obj h.K,
  Œπ := F.map h.Œπ,
  f' := F.map h.f',
  fac' := by rw [‚Üê F.map_comp, h.fac],
  zero‚ÇÅ' := by simp only [‚Üê F.map_comp, zero‚ÇÅ, F.map_zero],
  œÄ := F.map h.œÄ,
  zero‚ÇÇ' := by simp only [‚Üê F.map_comp, zero‚ÇÇ, F.map_zero], }

include h

@[simps]
def map_iso {X' Y' Z' : C} (f' : X' ‚ü∂ Y') (g' : Y' ‚ü∂ Z') (e‚ÇÅ : arrow.mk f ‚âÖ arrow.mk f')
  (e‚ÇÇ : arrow.mk g ‚âÖ arrow.mk g') (eq : e‚ÇÅ.hom.right = e‚ÇÇ.hom.left) :
  homology_iso_predatum f' g' H :=
begin
  have comm‚ÇÅ : e‚ÇÅ.hom.left ‚â´ f' = f ‚â´ e‚ÇÅ.hom.right := arrow.w e‚ÇÅ.hom,
  have comm‚ÇÇ : e‚ÇÇ.hom.left ‚â´ g' = g ‚â´ e‚ÇÇ.hom.right := arrow.w e‚ÇÇ.hom,
  have h‚ÇÅ : e‚ÇÅ.inv.left ‚â´ e‚ÇÅ.hom.left = ùüô X',
  { rw [‚Üê comma.comp_left, e‚ÇÅ.inv_hom_id, arrow.id_left], refl, },
  exact
  { w := by { rw [‚Üê cancel_epi e‚ÇÅ.hom.left, ‚Üê category.assoc, comm‚ÇÅ, eq, category.assoc, comm‚ÇÇ,
      ‚Üê category.assoc, h.w, zero_comp, comp_zero], },
    K := h.K,
    Œπ := h.Œπ ‚â´ e‚ÇÅ.hom.right,
    f' := e‚ÇÅ.inv.left ‚â´ h.f',
    fac' := begin
      slice_lhs 2 3 { rw h.fac', },
      rw [‚Üê comm‚ÇÅ, ‚Üê category.assoc, h‚ÇÅ, category.id_comp],
    end,
    zero‚ÇÅ' := by rw [eq, category.assoc, comm‚ÇÇ, ‚Üê category.assoc, h.zero‚ÇÅ', zero_comp],
    œÄ := h.œÄ,
    zero‚ÇÇ' := by rw [category.assoc, h.zero‚ÇÇ', comp_zero], }
end

omit h

end homology_iso_predatum

@[nolint has_inhabited_instance]
structure homology_iso_datum (H : C) extends homology_iso_predatum f g H :=
(fork_is_limit : is_limit to_homology_iso_predatum.fork)
(cofork_is_colimit : is_colimit to_homology_iso_predatum.cofork)

namespace homology_iso_datum

variables {H f g}

@[protected]
def H (h : homology_iso_datum f g H) : C := H
variables (f g)

@[simps]
def tautological : homology_iso_datum f g (cokernel (kernel.lift g f w)) :=
{ to_homology_iso_predatum := homology_iso_predatum.tautological f g w,
  fork_is_limit := by apply kernel_is_kernel,
  cofork_is_colimit := by apply cokernel_is_cokernel, }

@[simps]
def tautological' : homology_iso_datum f g (homology f g w) :=
{ to_homology_iso_predatum := homology_iso_predatum.tautological' f g w,
  fork_is_limit := by apply kernel_is_kernel,
  cofork_is_colimit := begin
    dsimp [homology_iso_predatum.cofork],
    refine is_colimit.of_iso_colimit (cokernel_is_cokernel (kernel.lift g f w)) _ ,
    refine cocones.ext (homology_iso_cokernel_lift f g w).symm _,
    rintro (_|_),
    tidy,
  end, }

variables {f g} (h : homology_iso_datum f g H)

def map_iso {X' Y' Z' : C} (f' : X' ‚ü∂ Y') (g' : Y' ‚ü∂ Z') (e‚ÇÅ : arrow.mk f ‚âÖ arrow.mk f')
  (e‚ÇÇ : arrow.mk g ‚âÖ arrow.mk g') (eq : e‚ÇÅ.hom.right = e‚ÇÇ.hom.left) :
  homology_iso_datum f' g' H :=
{ to_homology_iso_predatum := h.to_homology_iso_predatum.map_iso f' g' e‚ÇÅ e‚ÇÇ eq,
  fork_is_limit := begin
    refine (is_limit.equiv_of_nat_iso_of_iso _ _ _ _).to_fun h.fork_is_limit,
    { refine parallel_pair.ext (arrow.right_func.map_iso e‚ÇÅ) (arrow.right_func.map_iso e‚ÇÇ)
       _ (by simp),
      have h‚ÇÇ := arrow.w e‚ÇÇ.hom,
      dsimp at h‚ÇÇ ‚ä¢,
      rw [eq, h‚ÇÇ], },
    { refine cones.ext (iso.refl _) _,
      rintro (_|_),
      tidy, },
  end,
  cofork_is_colimit := begin
    refine (is_colimit.equiv_of_nat_iso_of_iso _ _ _ _).to_fun h.cofork_is_colimit,
    { refine parallel_pair.ext ((arrow.left_func.map_iso e‚ÇÅ)) (iso.refl _) _ (by tidy),
      { dsimp,
        have h‚ÇÅ : e‚ÇÅ.hom.left ‚â´ e‚ÇÅ.inv.left = ùüô X,
        { rw [‚Üê comma.comp_left, e‚ÇÅ.hom_inv_id, arrow.id_left], refl, },
        rw [category.comp_id, ‚Üê category.assoc, h‚ÇÅ, category.id_comp], }, },
    { refine cocones.ext (iso.refl _) _,
      rintro (_|_),
      tidy, },
  end, }

def iso‚ÇÅ : h.K ‚âÖ kernel g :=
is_limit.cone_point_unique_up_to_iso h.fork_is_limit (limit_cone.is_limit _)

@[simp, reassoc]
lemma iso‚ÇÅ_hom_kernel_Œπ : h.iso‚ÇÅ.hom ‚â´ kernel.Œπ g = h.Œπ :=
is_limit.cone_point_unique_up_to_iso_hom_comp _ _ _

instance : mono h.Œπ := by { rw ‚Üê h.iso‚ÇÅ_hom_kernel_Œπ, apply_instance, }

@[simp, reassoc]
lemma f'_iso‚ÇÅ_hom : h.f' ‚â´ h.iso‚ÇÅ.hom = kernel.lift g f h.w :=
begin
  ext,
  simp only [category.assoc, iso‚ÇÅ_hom_kernel_Œπ, homology_iso_predatum.fac, kernel.lift_Œπ],
end

def iso‚ÇÇ : H ‚âÖ cokernel h.f' :=
is_colimit.cocone_point_unique_up_to_iso h.cofork_is_colimit (colimit_cocone.is_colimit _)

@[simp, reassoc]
lemma cokernel_œÄ_iso‚ÇÇ_inv : cokernel.œÄ h.f' ‚â´ h.iso‚ÇÇ.inv = h.œÄ :=
is_colimit.comp_cocone_point_unique_up_to_iso_inv _ _ _

@[reassoc]
lemma cokernel_f'_eq_œÄ_iso‚ÇÇ_hom : cokernel.œÄ h.f' = h.œÄ ‚â´ h.iso‚ÇÇ.hom :=
by rw [‚Üê cokernel_œÄ_iso‚ÇÇ_inv, category.assoc, h.iso‚ÇÇ.inv_hom_id, category.comp_id]

instance : epi h.œÄ := by { rw ‚Üê h.cokernel_œÄ_iso‚ÇÇ_inv, apply epi_comp, }

def iso‚ÇÉ : cokernel h.f' ‚âÖ cokernel (kernel.lift g f h.w) :=
cokernel.map_iso _ _ (iso.refl _) h.iso‚ÇÅ
  (by simp only [f'_iso‚ÇÅ_hom, iso.refl_hom, category.id_comp])

@[simp, reassoc]
lemma cokernel_œÄ_iso‚ÇÉ_hom :
  cokernel.œÄ h.f' ‚â´ h.iso‚ÇÉ.hom = h.iso‚ÇÅ.hom ‚â´ cokernel.œÄ (kernel.lift g f h.w) :=
begin
  dsimp only [iso‚ÇÉ],
  simp only [cokernel.map_iso_hom, cokernel.œÄ_desc],
end

variables (f g)

@[simp]
lemma tautological_iso‚ÇÅ : (tautological f g w).iso‚ÇÅ = iso.refl _ :=
begin
  ext,
  dsimp only [iso‚ÇÅ],
  simp only [equalizer_as_kernel, iso.refl_hom, category.id_comp],
  change kernel.lift _ _ _ ‚â´ _ = _,
  simpa only [equalizer_as_kernel, kernel.lift_Œπ],
end

@[simp]
lemma tautological'_iso‚ÇÅ : (tautological' f g w).iso‚ÇÅ = iso.refl _ :=
begin
  ext,
  dsimp only [iso‚ÇÅ],
  simp only [equalizer_as_kernel, iso.refl_hom, category.id_comp],
  change kernel.lift _ _ _ ‚â´ _ = _,
  simpa only [equalizer_as_kernel, kernel.lift_Œπ],
end

@[simp]
lemma tautological_iso‚ÇÇ : (tautological f g w).iso‚ÇÇ = iso.refl _ :=
begin
  suffices : (tautological f g w).iso‚ÇÇ.symm = iso.refl _,
  { change (tautological f g w).iso‚ÇÇ.symm.symm = _,
    simpa only [this], },
  ext,
  simpa only [iso.symm_hom, cokernel_œÄ_iso‚ÇÇ_inv, iso.refl_hom, category.comp_id],
end

@[simp]
lemma tautological_iso‚ÇÉ : (tautological f g w).iso‚ÇÉ = iso.refl _ :=
begin
  ext,
  simpa only [cokernel_œÄ_iso‚ÇÉ_hom, tautological_iso‚ÇÅ, iso.refl_hom, category.id_comp, category.comp_id],
end

variables {f g}

def iso : H ‚âÖ homology f g h.w :=
h.iso‚ÇÇ ‚â™‚â´ h.iso‚ÇÉ ‚â™‚â´ (homology_iso_cokernel_lift f g h.w).symm

variables (f g)

@[simp]
lemma tautological_iso : (tautological f g w).iso =
  (homology_iso_cokernel_lift f g w).symm :=
by { dsimp only [iso], simp only [tautological_iso‚ÇÇ, tautological_iso‚ÇÉ, iso.refl_trans], }

lemma tautological_iso_hom : (tautological f g w).iso.hom =
  (homology_iso_cokernel_lift f g w).inv :=
by simp only [tautological_iso, iso.symm_hom]

variables {f g}

@[nolint has_inhabited_instance]
structure change {H‚ÇÅ H‚ÇÇ : C} (h‚ÇÅ : homology_iso_datum f g H‚ÇÅ)
  (h‚ÇÇ : homology_iso_datum f g H‚ÇÇ) :=
(Œ∫ : h‚ÇÅ.K ‚ü∂ h‚ÇÇ.K) (fac‚ÇÅ' : h‚ÇÅ.f' ‚â´ Œ∫ = h‚ÇÇ.f') (fac‚ÇÇ' : Œ∫ ‚â´ h‚ÇÇ.Œπ = h‚ÇÅ.Œπ)
(Œ∑ : H‚ÇÅ ‚ü∂ H‚ÇÇ) (fac‚ÇÉ' : h‚ÇÅ.œÄ ‚â´ Œ∑ = Œ∫ ‚â´ h‚ÇÇ.œÄ)

namespace change

restate_axiom fac‚ÇÅ'
restate_axiom fac‚ÇÇ'
restate_axiom fac‚ÇÉ'
attribute [simp, reassoc] fac‚ÇÅ fac‚ÇÇ
attribute [reassoc] fac‚ÇÉ

variables {H‚ÇÅ H‚ÇÇ : C} {h‚ÇÅ : homology_iso_datum f g H‚ÇÅ}
  {h‚ÇÇ : homology_iso_datum f g H‚ÇÇ} (c : change h‚ÇÅ h‚ÇÇ)

@[simp, reassoc]
lemma fac_iso‚ÇÅ : c.Œ∫ ‚â´ h‚ÇÇ.iso‚ÇÅ.hom = h‚ÇÅ.iso‚ÇÅ.hom :=
by { ext, simp only [category.assoc, iso‚ÇÅ_hom_kernel_Œπ, fac‚ÇÇ], }

instance : is_iso c.Œ∫ := is_iso.of_is_iso_fac_right (c.fac_iso‚ÇÅ)

def coker_iso : cokernel h‚ÇÅ.f' ‚âÖ cokernel h‚ÇÇ.f' :=
cokernel.map_iso _ _ (iso.refl _) (as_iso c.Œ∫)
(by simp only [as_iso_hom, fac‚ÇÅ, iso.refl_hom, category.id_comp])

@[simp, reassoc]
lemma coker_iso_comm : cokernel.œÄ h‚ÇÅ.f' ‚â´ c.coker_iso.hom = c.Œ∫ ‚â´ cokernel.œÄ h‚ÇÇ.f' :=
begin
  dsimp only [coker_iso],
  simp only [as_iso_hom, cokernel.map_iso_hom, cokernel.œÄ_desc],
end

@[reassoc]
lemma fac_iso‚ÇÇ : c.coker_iso.hom ‚â´ h‚ÇÇ.iso‚ÇÇ.inv = h‚ÇÅ.iso‚ÇÇ.inv ‚â´ c.Œ∑ :=
begin
  ext,
  simp only [coker_iso_comm_assoc, cokernel_œÄ_iso‚ÇÇ_inv, cokernel_œÄ_iso‚ÇÇ_inv_assoc,
    fac‚ÇÉ],
end

instance : is_iso c.Œ∑ :=
begin
  haveI : is_iso (h‚ÇÅ.iso‚ÇÇ.inv ‚â´ c.Œ∑) := by { rw ‚Üê fac_iso‚ÇÇ, apply_instance, },
  apply is_iso.of_is_iso_comp_left (h‚ÇÅ.iso‚ÇÇ.inv),
end

@[simp, reassoc]
lemma coker_iso_iso‚ÇÉ_hom : c.coker_iso.hom ‚â´ h‚ÇÇ.iso‚ÇÉ.hom = h‚ÇÅ.iso‚ÇÉ.hom :=
begin
  ext,
  simp only [coker_iso_comm_assoc, cokernel_œÄ_iso‚ÇÉ_hom, fac_iso‚ÇÅ_assoc],
end

@[simp, reassoc]
lemma Œ∑_iso‚ÇÇ_hom_iso‚ÇÉ_hom : c.Œ∑ ‚â´ h‚ÇÇ.iso‚ÇÇ.hom ‚â´ h‚ÇÇ.iso‚ÇÉ.hom = h‚ÇÅ.iso‚ÇÇ.hom ‚â´ h‚ÇÅ.iso‚ÇÉ.hom :=
by rw [‚Üê cancel_epi h‚ÇÅ.iso‚ÇÇ.inv, iso.inv_hom_id_assoc, ‚Üê c.coker_iso_iso‚ÇÉ_hom,
  ‚Üê fac_iso‚ÇÇ_assoc, iso.inv_hom_id_assoc]

@[simp, reassoc]
lemma Œ∑_iso_hom : c.Œ∑ ‚â´ h‚ÇÇ.iso.hom = h‚ÇÅ.iso.hom :=
begin
  dsimp only [iso],
  simp only [iso.trans_hom, Œ∑_iso‚ÇÇ_hom_iso‚ÇÉ_hom_assoc],
end

lemma Œ∑_iso : as_iso c.Œ∑ ‚â™‚â´ h‚ÇÇ.iso = h‚ÇÅ.iso :=
by { ext, simp only [iso.trans_hom, as_iso_hom, Œ∑_iso_hom], }

variables (f g)

@[simps]
def tautological : change (homology_iso_datum.tautological' f g w)
  (homology_iso_datum.tautological f g w) :=
{ Œ∫ := ùüô _,
  Œ∑ := (homology_iso_cokernel_lift f g w).hom,
  fac‚ÇÅ' := category.comp_id _,
  fac‚ÇÇ' := category.id_comp _,
  fac‚ÇÉ' := begin
    dsimp [homology.œÄ', homology_iso_cokernel_lift, homology_iso_cokernel_image_to_kernel'],
    simp only [cokernel_iso_of_eq_inv_comp_desc, cokernel.œÄ_desc_assoc, category.assoc,
      œÄ_comp_cokernel_iso_of_eq_hom, iso.inv_hom_id_assoc, category.id_comp],
  end, }

end change

variables (f g)

@[simp]
lemma tautological'_iso : (tautological' f g w).iso = iso.refl _ :=
begin
  ext1,
  rw ‚Üê (change.tautological f g w).Œ∑_iso_hom,
  simp only [‚Üê (change.tautological f g w).Œ∑_iso_hom, change.tautological_Œ∑,
    iso.refl_hom, tautological_iso, iso.symm_hom, iso.hom_inv_id],
end

variables {f g}

section apply_exact_functor

variables (F : C ‚•§ D) [functor.additive F]

variables [preserves_finite_limits F] [preserves_finite_colimits F]

@[simps]
def apply_exact_functor : homology_iso_datum (F.map f) (F.map g) (F.obj H) :=
{ to_homology_iso_predatum := h.to_homology_iso_predatum.apply_functor F,
  fork_is_limit := begin
    let e : parallel_pair g 0 ‚ãô F ‚âÖ parallel_pair (F.map g) 0 :=
      parallel_pair.ext (iso.refl _) (iso.refl _) (by simp) (by simp),
    have hF := (is_limit.postcompose_inv_equiv e.symm _).inv_fun
      (is_limit_of_preserves F h.fork_is_limit),
    refine is_limit.of_iso_limit hF (cones.ext (iso.refl _) _),
    rintro (_|_),
    tidy,
  end,
  cofork_is_colimit := begin
    let e : parallel_pair h.f' 0 ‚ãô F ‚âÖ parallel_pair (F.map h.f') 0 :=
      parallel_pair.ext (iso.refl _) (iso.refl _) (by simp) (by simp),
    have hF := (is_colimit.precompose_inv_equiv e _).inv_fun
      (is_colimit_of_preserves F h.cofork_is_colimit),
    refine is_colimit.of_iso_colimit hF (cocones.ext (iso.refl _) _),
    rintro (_|_),
    tidy,
  end, }

end apply_exact_functor

section homological_complex

variables {A : Type*} [category A] [abelian A]
variables {M : Type*} {c : complex_shape M}

def of_homological_complex (X : homological_complex A c) (i j k : M)
  (hij : c.rel i j) (hjk : c.rel j k) :
  homology_iso_datum (X.d i j) (X.d j k) (X.homology j) :=
begin
  refine (homology_iso_datum.tautological' (X.d_to j) (X.d_from j)
    (X.d_to_comp_d_from j)).map_iso _ _ _ _ _,
  { refine arrow.iso_mk (X.X_prev_iso hij) (iso.refl _) _,
    dsimp,
    simp only [X.d_to_eq hij, category.comp_id], },
  { refine arrow.iso_mk (iso.refl _) (X.X_next_iso hjk) _,
    dsimp,
    simp only [X.d_from_eq hjk, category.id_comp, category.assoc, iso.inv_hom_id,
      category.comp_id], },
  { refl, },
end

open_locale zero_object

end homological_complex

section has_homology

variables (f g)

lemma homology_iso_cokernel_lift_comp_Œπ :
  (homology_iso_cokernel_lift f g w).inv ‚â´ homology.Œπ f g w =
  cokernel.map _ _ (ùüô X) (kernel.Œπ g) (by simp only [kernel.lift_Œπ, category.id_comp]) :=
begin
  ext,
  dsimp [homology_iso_cokernel_lift, homology.Œπ,
    homology_iso_cokernel_image_to_kernel', homology_iso_kernel_desc],
  simp only [cokernel_iso_of_eq_inv_comp_desc, category.assoc, cokernel.œÄ_desc_assoc, cokernel.œÄ_desc,
    cokernel_iso_of_eq_hom_comp_desc_assoc, kernel.lift_Œπ, kernel_subobject_arrow_assoc,
    kernel_subobject_arrow'_assoc],
end

lemma homology_Œπ_eq :
  homology.Œπ f g w = (homology_iso_cokernel_lift f g w).hom ‚â´
    cokernel.map _ _ (ùüô X) (kernel.Œπ g) (by simp only [kernel.lift_Œπ, category.id_comp]) :=
by simp only [‚Üê homology_iso_cokernel_lift_comp_Œπ, iso.hom_inv_id_assoc]

variables {f g}

lemma iso_hom_homology_Œπ_eq_iso‚ÇÇ_hom_cokernel_map :
  h.iso.hom ‚â´ homology.Œπ f g h.w = h.iso‚ÇÇ.hom ‚â´ cokernel.map h.f' f (ùüô X) h.Œπ (by simp) :=
begin
  dsimp only [iso, iso‚ÇÇ, iso‚ÇÉ],
  simp only [homology_Œπ_eq f g h.w, iso.refl_hom, iso.trans_hom, cokernel.map_iso_hom,
    iso.symm_hom, category.assoc, iso.inv_hom_id_assoc, iso.cancel_iso_hom_left],
  ext,
  simp only [cokernel.œÄ_desc_assoc, category.assoc, cokernel.œÄ_desc, iso‚ÇÅ_hom_kernel_Œπ_assoc],
end

lemma homology_œÄ'_eq :
  homology.œÄ' f g h.w = h.iso‚ÇÅ.inv ‚â´ h.œÄ ‚â´ h.iso.hom :=
begin
  rw ‚Üê cancel_mono (homology.Œπ f g h.w),
  dsimp only [iso],
  simp only [homology.œÄ'_Œπ, category.assoc, iso.trans_hom, iso.symm_hom,
    homology_iso_cokernel_lift_comp_Œπ, ‚Üê cokernel_œÄ_iso‚ÇÇ_inv, iso.inv_hom_id_assoc,
    cokernel_œÄ_iso‚ÇÉ_hom_assoc, cokernel.œÄ_desc],
end

lemma iso_inv : h.iso.inv = homology.desc' f g h.w (h.iso‚ÇÅ.inv ‚â´ h.œÄ)
  (by simp only [‚Üê h.f'_iso‚ÇÅ_hom, category.assoc, h.iso‚ÇÅ.hom_inv_id_assoc,
    homology_iso_predatum.zero‚ÇÇ]) :=
by rw [‚Üê cancel_epi (homology.œÄ' f g h.w), homology.œÄ'_desc', homology_œÄ'_eq,
    category.assoc, category.assoc, h.iso.hom_inv_id, category.comp_id]

lemma iso_hom : h.iso.hom = homology.lift f g h.w
  (h.iso‚ÇÇ.hom ‚â´ cokernel.map h.f' f (ùüô X) h.Œπ (by simp))
  begin
    rw ‚Üê cancel_epi h.iso‚ÇÇ.inv,
    ext,
    simp only [category.assoc, iso.inv_hom_id_assoc, cokernel.œÄ_desc_assoc,
      cokernel.œÄ_desc, homology_iso_predatum.zero‚ÇÅ, comp_zero],
  end :=
begin
  rw [‚Üê cancel_epi h.iso.inv, h.iso.inv_hom_id, h.iso_inv,
    ‚Üê cancel_mono (homology.Œπ f g h.w), ‚Üê cancel_epi (homology.œÄ' f g h.w),
    ‚Üê cancel_epi h.iso‚ÇÅ.hom],
  simp only [category.assoc, category.id_comp, homology.œÄ'_Œπ, homology.lift_Œπ,
    homology.œÄ'_desc'_assoc, h.iso‚ÇÅ.hom_inv_id_assoc, h.iso‚ÇÅ_hom_kernel_Œπ_assoc,
    ‚Üê cokernel_œÄ_iso‚ÇÇ_inv, h.iso‚ÇÇ.inv_hom_id_assoc, cokernel.œÄ_desc],
end

@[simps]
def has_homology : has_homology f g H :=
{ w := h.w,
  œÄ := h.iso‚ÇÅ.inv ‚â´ h.œÄ,
  Œπ := h.iso‚ÇÇ.hom ‚â´ cokernel.map h.f' f (ùüô X) h.Œπ (by simp),
  œÄ_Œπ := by simp only [category.assoc, ‚Üê cokernel_œÄ_iso‚ÇÇ_inv_assoc, iso.inv_hom_id_assoc,
      cokernel.œÄ_desc, ‚Üê h.iso‚ÇÅ_hom_kernel_Œπ],
  ex_œÄ := begin
    refine preadditive.exact_of_iso_of_exact (kernel.lift g f h.w)
      (cokernel.œÄ (kernel.lift g f h.w)) _ _ (iso.refl _) _ _ (abelian.exact_cokernel _),
    { refine arrow.iso_mk (iso.refl _) (h.iso‚ÇÉ.symm ‚â™‚â´ h.iso‚ÇÇ.symm) _,
      dsimp,
      simp only [‚Üê cancel_mono h.iso‚ÇÇ.hom, ‚Üê cancel_mono h.iso‚ÇÉ.hom,
        category.id_comp, category.assoc, ‚Üê cokernel_œÄ_iso‚ÇÇ_inv,
        iso.inv_hom_id_assoc, cokernel_œÄ_iso‚ÇÉ_hom,
        iso.inv_hom_id, category.comp_id], },
    { refl, },
  end,
  Œπ_ex := begin
    refine preadditive.exact_of_iso_of_exact (homology.Œπ f g h.w) (cokernel.desc f g h.w)
      _ _ _ (iso.refl _) _ (homology.has f g h.w).Œπ_ex,
    { refine arrow.iso_mk h.iso.symm (iso.refl _) _,
      dsimp,
      simp only [‚Üê h.iso_hom_homology_Œπ_eq_iso‚ÇÇ_hom_cokernel_map,
        iso.inv_hom_id_assoc, category.comp_id], },
    { refl, },
  end,
  epi_œÄ := epi_comp _ _,
  mono_Œπ := begin
    rw ‚Üê iso_hom_homology_Œπ_eq_iso‚ÇÇ_hom_cokernel_map,
    apply_instance,
  end, }

end has_homology

variables (f g)

@[simps]
def of_f_is_zero (hf : f = 0) : homology_iso_datum f g (kernel g) :=
{ w := by rw [hf, zero_comp],
  K := kernel g,
  Œπ := kernel.Œπ g,
  f' := 0,
  fac' := by rw [hf, zero_comp],
  zero‚ÇÅ' := kernel.condition g,
  œÄ := ùüô _,
  zero‚ÇÇ' := by rw zero_comp,
  fork_is_limit := kernel_is_kernel g,
  cofork_is_colimit := is_colimit_aux _ (Œª s, s.œÄ) (Œª s, by apply category.id_comp)
    (Œª s m hm, begin rw [‚Üê hm], symmetry, apply category.id_comp, end), }

@[simps]
def of_g_is_zero (hg : g = 0) : homology_iso_datum f g (cokernel f) :=
{ w := by rw [hg, comp_zero],
  K := Y,
  Œπ := ùüô Y,
  f' := f,
  fac' := category.comp_id _,
  zero‚ÇÅ' := by rw [hg, comp_zero],
  œÄ := cokernel.œÄ f,
  zero‚ÇÇ' := cokernel.condition f,
  fork_is_limit := is_limit_aux _ (Œª s, s.Œπ) (Œª s, by apply category.comp_id)
    (Œª s m hm, begin rw [‚Üê hm], symmetry, apply category.comp_id, end),
  cofork_is_colimit := by apply cokernel_is_cokernel, }

@[simps]
def of_both_zeros (hf : f = 0) (hg : g = 0) : homology_iso_datum f g Y :=
{ w := by rw [hg, comp_zero],
  K := Y,
  Œπ := ùüô Y,
  f' := 0,
  fac' := by rw [hf, zero_comp] ,
  zero‚ÇÅ' := by rw [hg, comp_zero],
  œÄ := ùüô Y,
  zero‚ÇÇ' := zero_comp,
  fork_is_limit := is_limit_aux _ (Œª s, s.Œπ) (Œª s, by apply category.comp_id)
    (Œª s m hm, begin rw [‚Üê hm], symmetry, apply category.comp_id, end),
  cofork_is_colimit := is_colimit_aux _ (Œª s, s.œÄ) (Œª s, by apply category.id_comp)
    (Œª s m hm, begin rw [‚Üê hm], symmetry, dsimp, apply category.id_comp, end), }

end homology_iso_datum
