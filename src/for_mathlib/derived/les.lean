import for_mathlib.derived.derived_cat
import for_mathlib.derived.example

open category_theory category_theory.triangulated category_theory.limits

namespace category_theory

variables {ùìê : Type*} [category ùìê] [abelian ùìê]

-- move me
lemma exact_seq.is_iso_of_zero_of_zero {A B C D : ùìê} {f : A ‚ü∂ B} {g : B ‚ü∂ C} {h : C ‚ü∂ D}
  {L : list (arrow ùìê)} (H : exact_seq ùìê (f :: g :: h :: L)) (hf : f = 0) (hh : h = 0) :
  is_iso g :=
begin
  subst f, subst h,
  have : mono g, { rw [H.pair.mono_iff_eq_zero], },
  haveI : epi g, { rw [(H.drop 1).pair.epi_iff_eq_zero] },
  exact is_iso_of_mono_of_epi g,
end

end category_theory

variables (A : Type*) [category A] [abelian A] [enough_projectives A]

namespace bounded_derived_category

@[simps]
def forget : bounded_derived_category A ‚•§ bounded_homotopy_category A :=
{ obj := Œª X, X.val,
  map := Œª _ _ f, f.val,
  map_id' := Œª _ , rfl,
  map_comp' := Œª _ _ _ _ _, rfl }

instance Ext_additive_fst (i : ‚Ñ§) (X : bounded_derived_category A) :
  (((Ext A i).flip.obj X).right_op).additive :=
{ map_add' := begin
    intros Y Z f g, dsimp,
    conv_rhs { rw ‚Üê op_add }, congr' 1, ext e,
    dsimp, rw preadditive.add_comp,
  end }

instance Ext_homological_fst (i : ‚Ñ§) (X : bounded_derived_category A) :
  homological_functor ((Ext A i).flip.obj X).right_op :=
category_theory.triangulated.preadditive_yoneda_op_homological (X‚ü¶i‚üß)

end bounded_derived_category

namespace homological_complex

variables {A}
variables {X Y Z : cochain_complex A ‚Ñ§} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)

@[simps]
noncomputable def cone.œÄ (w : ‚àÄ i, f.f i ‚â´ g.f i = 0) :
  cone f ‚ü∂ Z :=
{ f := Œª i, biprod.snd ‚â´ g.f i,
  comm' := Œª i j hij, begin
    dsimp at hij, subst j, dsimp [cone.d], rw [if_pos rfl, biprod.lift_snd_assoc],
    ext,
    { simp only [exact.w_assoc, zero_comp, category.assoc, biprod.inl_desc_assoc,
        category.id_comp, w, exact_inl_snd], },
    { simp only [category.assoc, biprod.inr_snd_assoc, biprod.inr_desc_assoc, g.comm], }
  end }

--generalize
@[simps]
noncomputable def kernel : cochain_complex A ‚Ñ§ :=
{ X := Œª i, kernel (f.f i),
  d := Œª i j, kernel.map (f.f i) (f.f j) (X.d i j) (Y.d i j) (f.comm i j),
  shape' := Œª i j hij, by { ext, simp only [kernel.lift_Œπ, zero_comp, X.shape i j hij, comp_zero] },
  d_comp_d' := Œª i j k hij hjk, begin
    ext,
    simp only [category.assoc, kernel.lift_Œπ, kernel.lift_Œπ_assoc, zero_comp, comp_zero, d_comp_d],
  end }

@[simps]
noncomputable def kernel.Œπ : kernel f ‚ü∂ X :=
{ f := Œª i, kernel.Œπ _,
  comm' := Œª i j hij, by simp only [kernel_d, kernel.lift_Œπ] }

open_locale pseudoelement
open category_theory.abelian

-- is this even true?
-- -- move me
-- lemma pseudoelement.biprod_ext {X Y : A} (p q : ‚Ü•(X ‚äû Y))
--   (h1 : (biprod.fst : X ‚äû Y ‚ü∂ X) p = (biprod.fst : X ‚äû Y ‚ü∂ X) q)
--   (h2 : (biprod.snd : X ‚äû Y ‚ü∂ Y) p = (biprod.snd : X ‚äû Y ‚ü∂ Y) q) :
--   p = q :=
-- begin
--   letI := pseudoelement.setoid (X ‚äû Y),
--   revert h1 h2,
--   refine quotient.induction_on p _,
--   intros a,
--   refine quotient.induction_on q _,
--   intros b h‚ÇÅ h‚ÇÇ,
--   simp only [pseudoelement.pseudo_apply_mk, quotient.eq] at h‚ÇÅ h‚ÇÇ ‚ä¢,
--   obtain ‚ü®Z‚ÇÅ, a‚ÇÅ, b‚ÇÅ, ha‚ÇÅ, hb‚ÇÅ, hab‚ÇÅ‚ü© := h‚ÇÅ,
--   obtain ‚ü®Z‚ÇÇ, a‚ÇÇ, b‚ÇÇ, ha‚ÇÇ, hb‚ÇÇ, hab‚ÇÇ‚ü© := h‚ÇÇ,
--   simp only [over.coe_hom] at hab‚ÇÅ hab‚ÇÇ,
--   let Pa := pullback a‚ÇÅ a‚ÇÇ,
--   let Pb := pullback b‚ÇÅ b‚ÇÇ,
--   let P := pullback (pullback.fst : Pa ‚ü∂ _) (pullback.fst : Pb ‚ü∂ _),
--   resetI,
--   refine ‚ü®P, pullback.fst ‚â´ pullback.fst ‚â´ a‚ÇÅ, pullback.snd ‚â´ pullback.fst ‚â´ b‚ÇÅ, _, _, _‚ü©,
--   { apply_with epi_comp { instances := ff }, apply_instance, apply epi_comp, },
--   { apply_with epi_comp { instances := ff }, apply_instance, apply epi_comp, },
--   ext; simp only [category.assoc],
--   { rw [hab‚ÇÅ, pullback.condition_assoc], },
--   { simp only [pullback.condition_assoc, hab‚ÇÇ],
--     rw [‚Üê pullback.condition_assoc],
--     simp only [‚Üê pullback.condition_assoc], admit }
-- end

-- move me
lemma biprod.lift_desc_comm {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : A}
  (f‚ÇÅ‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÅ‚ÇÇ : X‚ÇÅ ‚ü∂ Y‚ÇÇ) (f‚ÇÇ‚ÇÅ : X‚ÇÇ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
  biprod.lift (biprod.desc f‚ÇÅ‚ÇÅ f‚ÇÇ‚ÇÅ) (biprod.desc f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÇ) =
  biprod.desc (biprod.lift f‚ÇÅ‚ÇÅ f‚ÇÅ‚ÇÇ) (biprod.lift f‚ÇÇ‚ÇÅ f‚ÇÇ‚ÇÇ) :=
by ext; simp only [category.assoc,
  biprod.lift_fst, biprod.lift_snd, biprod.inl_desc, biprod.inr_desc]

-- move me
lemma biprod.comp_lift {W X Y Z : A} (f : W ‚ü∂ X) (g : X ‚ü∂ Y) (h : X ‚ü∂ Z) :
  f ‚â´ biprod.lift g h = biprod.lift (f ‚â´ g) (f ‚â´ h) :=
by ext; simp only [category.assoc, biprod.lift_fst, biprod.lift_snd]

def cone.œÄ_quasi_iso (w : ‚àÄ i, short_exact (f.f i) (g.f i)) :
  quasi_iso (cone.œÄ f g (Œª i, (w i).exact.w)) :=
{ is_iso := Œª i, begin
    let œÄ := cone.œÄ f g (Œª i, (w i).exact.w),
    have aux : ‚àÄ n, short_exact ((kernel.Œπ œÄ).f n) (œÄ.f n),
    { sorry },
    suffices : ‚àÄ n, is_zero (homology (kernel œÄ) n),
    { exact (six_term_exact_seq (kernel.Œπ œÄ) œÄ aux i (i+1) rfl).is_iso_of_zero_of_zero
        ((this _).eq_of_src _ _) ((this _).eq_of_tgt _ _), },
    intro n,
    obtain ‚ü®n, rfl‚ü© : ‚àÉ k, k+1 = n := ‚ü®n-1, sub_add_cancel _ _‚ü©,
    refine is_zero_of_iso_of_zero _
      (homology_iso (kernel œÄ) n (n+1) (n+1+1) rfl rfl).symm,
    apply is_zero_homology_of_exact,
    apply pseudoelement.exact_of_pseudo_exact,
    split, { intro a, rw [‚Üê pseudoelement.comp_apply, d_comp_d, pseudoelement.zero_apply], },
    intros b hb,
    set x := (kernel.Œπ œÄ).f (n+1) b with xdef,
    have hx : œÄ.f _ x = 0,
    { dsimp only [x, kernel.Œπ_f],
      rw [‚Üê pseudoelement.comp_apply, exact_kernel_Œπ.w, pseudoelement.zero_apply],
      apply_instance },
    let y := (biprod.snd : (X.X _) ‚äû (Y.X (n+1)) ‚ü∂ Y.X (n+1)) x,
    have hy : g.f _ y = 0,
    { dsimp only [y], rw [‚Üê pseudoelement.comp_apply], exact hx },
    have w' := @pseudoelement.pseudo_exact_of_exact _ _ _ _ _ _ _ _ (w (n+1)).exact,
    obtain ‚ü®a, ha‚ü© := w'.2 y hy,
    let a' : ‚Ü•((X.X (n+1)) ‚äû (Y.X n)) := (biprod.inl : _ ‚ü∂ (X.X (n+1)) ‚äû (Y.X n)) a,
    have ha' : œÄ.f n a' = 0,
    { dsimp only [a', œÄ, cone.œÄ_f],
      rw [‚Üê pseudoelement.comp_apply, (exact_inl_snd _ _).w_assoc,
        zero_comp, pseudoelement.zero_apply], },
    have aux' := @pseudoelement.pseudo_exact_of_exact _ _ _ _ _ _ _ _ (aux n).exact,
    obtain ‚ü®a'', ha''‚ü© := aux'.2 a' ha',
    refine ‚ü®a'', _‚ü©,
    apply @pseudoelement.pseudo_injective_of_mono _ _ _ _ _ _ (aux (n+1)).mono,
    rw [‚Üê pseudoelement.comp_apply, ‚Üê (kernel.Œπ œÄ).comm, pseudoelement.comp_apply, ha''],
    let œÜ : (cone f).X (n+1) ‚ü∂ Y.X (n+1+1) ‚äû Y.X (n+1) :=
    biprod.lift (biprod.fst ‚â´ f.f _) biprod.snd,
    have hœÜ : mono œÜ,
    { haveI : mono (f.f (n+1+1)) := (w _).mono,
      constructor, intros Z Œ± Œ≤ H, dsimp [œÜ] at H,
      apply category_theory.limits.biprod.hom_ext,
      { rw ‚Üê cancel_mono (f.f (n+1+1)), apply_fun (Œª œà, œà ‚â´ biprod.fst) at H,
        simpa only [category.assoc, biprod.lift_fst] using H, },
      { apply_fun (Œª œà, œà ‚â´ biprod.snd) at H,
        simpa only [category.assoc, biprod.lift_snd] using H, } },
    apply_fun ‚áë((kernel.Œπ œÄ).f (n+1+1)) at hb,
    rw [‚Üê pseudoelement.comp_apply, ‚Üê (kernel.Œπ œÄ).comm, pseudoelement.comp_apply,
      pseudoelement.apply_zero, ‚Üê xdef] at hb,
    dsimp only [cone_d, cone.d] at hb ‚ä¢, rw [dif_pos rfl] at hb ‚ä¢,
    change _ = x,
    simp only [X_eq_to_iso_refl, category.comp_id] at hb ‚ä¢,
    simp only [‚Üê pseudoelement.comp_apply, category.assoc],
    simp only [biprod.lift_desc_comm, biprod.inl_desc] at hb ‚ä¢,
    apply @pseudoelement.pseudo_injective_of_mono _ _ _ _ _ _ hœÜ,
    rw [‚Üê pseudoelement.comp_apply, biprod.comp_lift, biprod.lift_fst_assoc, biprod.lift_snd,
      ‚Üê category.comp_id (f.f (n+1)), preadditive.neg_comp, ‚Üê f.comm, ‚Üê preadditive.comp_neg,
      ‚Üê biprod.comp_lift, pseudoelement.comp_apply, ha, ‚Üê pseudoelement.comp_apply,
      biprod.comp_lift, category.comp_id],
    -- use `hb`
    sorry
  end }

end homological_complex
