import for_mathlib.homotopy_category_pretriangulated
import for_mathlib.abelian_category
import for_mathlib.derived.homological
import for_mathlib.derived.defs
import category_theory.abelian.projective
import for_mathlib.snake_lemma3
import for_mathlib.les_homology
import for_mathlib.exact_seq3
import for_mathlib.triangle_shift
import for_mathlib.homology_iso
import for_mathlib.projective_replacement
import for_mathlib.homology_exact
-- import for_mathlib.arrow_preadditive

noncomputable theory

open category_theory category_theory.limits category_theory.triangulated
open homological_complex

universes v u
variables {A : Type u} [category.{v} A] [abelian A]

namespace homotopy_category

local notation `ùí¶` := homotopy_category A (complex_shape.up ‚Ñ§)
local notation `HH` i := homotopy_category.homology_functor A (complex_shape.up ‚Ñ§) i

-- Move this
instance homology_functor_additive (i : ‚Ñ§) : functor.additive (HH i) := functor.additive.mk $
begin
  rintros X Y ‚ü®f‚ü© ‚ü®g‚ü©,
  dsimp [homotopy_category.homology_functor],
  erw ‚Üê (_root_.homology_functor _ _ _).map_add,
  refl,
  apply_instance,
end

lemma _root_.category_theory.cochain_complex.exact_cone_in_cone_out
  (i : ‚Ñ§) (X Y : cochain_complex A ‚Ñ§) (f : X ‚ü∂ Y) :
  exact ((_root_.homology_functor _ _ i).map (cone.in f))
    ((_root_.homology_functor _ _ i).map (cone.out f)) :=
begin
  refine (homological_complex.six_term_exact_seq (cone.in f) (cone.out f) _ i (i+1) rfl).pair,
  intro n,
  apply (cone.termwise_split _ _).short_exact,
end

/-
lemma _root_.category_theory.cochain_complex.exact_to_cone_in
  (X Y : cochain_complex A ‚Ñ§) (f : X ‚ü∂ Y) :
  exact ((_root_.homology_functor _ _ 0).map f)
    ((_root_.homology_functor _ _ 0).map (cone.in f)) :=
begin
  admit
end
-/

lemma _root_.category_theory.abelian.exact_neg_right (X Y Z : A) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  (h : exact f g) : exact f (-g) :=
begin
  refine preadditive.exact_of_iso_of_exact' f g f (-g) (iso.refl _) (iso.refl _) _ _ _ h,
  { have : (-ùüô Z) ‚â´ (-ùüô Z) = ùüô Z,
    { simp only [preadditive.comp_neg, category.comp_id, neg_neg], },
    exact ‚ü®-ùüô Z, -ùüô Z, this, this‚ü©, },
  { simp only [iso.refl_hom, category.id_comp, category.comp_id], },
  { simp only [preadditive.comp_neg, category.comp_id, iso.refl_hom, category.id_comp], }
end

instance homology_functor_homological (i : ‚Ñ§) : homological_functor (HH i) :=
begin
  apply homological_of_rotate,
  intros T hT,
  erw mem_distinguished_iff_exists_iso_cone at hT,
  obtain ‚ü®X,Y,f,‚ü®E‚ü©‚ü© := hT,
  let E' : T.rotate ‚âÖ
    ((neg‚ÇÉ_functor (homotopy_category A (complex_shape.up ‚Ñ§))).obj (cone.triangle‚Çï f)).rotate :=
    ‚ü®E.hom.rotate, E.inv.rotate, _, _‚ü©,
  rotate,
  { ext; dsimp,
    { change (E.hom ‚â´ E.inv).hom‚ÇÇ = _, rw iso.hom_inv_id, refl },
    { change (E.hom ‚â´ E.inv).hom‚ÇÉ = _, rw iso.hom_inv_id, refl },
    { simp only [‚Üê functor.map_comp],
      change (category_theory.shift_functor ùí¶ (1 : ‚Ñ§)).map ((E.hom ‚â´ E.inv).hom‚ÇÅ) = _,
      rw iso.hom_inv_id, refl } },
  { ext; dsimp,
    { change (E.inv ‚â´ E.hom).hom‚ÇÇ = _, rw iso.inv_hom_id, refl },
    { change (E.inv ‚â´ E.hom).hom‚ÇÉ = _, rw iso.inv_hom_id, refl },
    { simp only [‚Üê functor.map_comp],
      change (category_theory.shift_functor ùí¶ (1 : ‚Ñ§)).map ((E.inv ‚â´ E.hom).hom‚ÇÅ) = _,
      rw iso.inv_hom_id, refl } },
  refine homological_of_exists_aux _ _ _ E'.inv _,
  dsimp,
  simp only [functor.map_neg],
  apply category_theory.abelian.exact_neg_right,
  apply category_theory.cochain_complex.exact_cone_in_cone_out,
end .

variable (A)

def homology_shift_iso (i j : ‚Ñ§) :
  category_theory.shift_functor (homotopy_category A (complex_shape.up ‚Ñ§)) i ‚ãô
    homology_functor A (complex_shape.up ‚Ñ§) j ‚âÖ homology_functor A (complex_shape.up ‚Ñ§) (j+i) :=
nat_iso.of_components (Œª (X : ùí¶), homology_shift_obj_iso X.as i j : _)
begin
  intros X Y f,
  rw ‚Üê quotient_map_out f,
  dsimp,
  erw homotopy_category.shift_functor_map_quotient,
  rw ‚Üê homology_functor_map_factors,
  erw (homology_shift_iso A i j).hom.naturality,
  erw ‚Üê homology_functor_map_factors,
  refl
end

def homology_zero_shift_iso (i : ‚Ñ§) :
  category_theory.shift_functor (homotopy_category A (complex_shape.up ‚Ñ§)) i ‚ãô
    homology_functor A (complex_shape.up ‚Ñ§) 0 ‚âÖ homology_functor A (complex_shape.up ‚Ñ§) i :=
homology_shift_iso _ _ _ ‚â™‚â´ (eq_to_iso (by rw zero_add))

variable {A}

lemma is_acyclic_iff (X : ùí¶) :
  (‚àÄ (i : ‚Ñ§), is_zero ((homotopy_category.homology_functor _ _ 0).obj (X‚ü¶i‚üß))) ‚Üî
  is_acyclic X :=
begin
  split,
  { intros h,
    constructor,
    intros i,
    apply is_zero_of_iso_of_zero (h i),
    apply (homology_zero_shift_iso A i).app _ },
  { introsI h i,
    apply (is_acyclic.cond _ i).of_iso ((homology_zero_shift_iso A _).app _),
    assumption },
end

lemma is_quasi_iso_iff {X Y : ùí¶} (f : X ‚ü∂ Y) :
  (‚àÄ (i : ‚Ñ§), is_iso ((homotopy_category.homology_functor _ _ 0).map (f‚ü¶i‚üß'))) ‚Üî
  is_quasi_iso f :=
begin
  split,
  { intros h,
    constructor,
    intros i,
    specialize h i,
    have := (homology_zero_shift_iso A i).hom.naturality f,
    rw ‚Üê is_iso.inv_comp_eq at this,
    rw ‚Üê this,
    apply_with is_iso.comp_is_iso { instances := ff },
    apply_instance,
    apply_with is_iso.comp_is_iso { instances := ff },
    exact h,
    apply_instance },
  { introsI h i,
    have := (homology_zero_shift_iso A i).hom.naturality f,
    rw ‚Üê is_iso.eq_comp_inv at this,
    erw this,
    apply_with is_iso.comp_is_iso { instances := ff },
    apply_with is_iso.comp_is_iso { instances := ff },
    apply_instance,
    apply is_quasi_iso.cond,
    apply_instance }
end

instance is_iso_of_is_quasi_iso' {X Y : ùí¶} (f : X ‚ü∂ Y) [h : is_quasi_iso f] (i : ‚Ñ§) :
  is_iso ((homotopy_category.homology_functor _ _ 0).map (f‚ü¶i‚üß')) :=
begin
  rw ‚Üê is_quasi_iso_iff at h,
  apply h,
end

instance is_iso_of_is_quasi_iso {X Y : ùí¶} (f : X ‚ü∂ Y)
  [is_quasi_iso f] (i : ‚Ñ§) :
  is_iso ((homotopy_category.homology_functor _ _ i).map f) :=
begin
  apply is_quasi_iso.cond,
end

instance is_quasi_iso_comp {X Y Z : ùí¶} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [is_quasi_iso f] [is_quasi_iso g] : is_quasi_iso (f ‚â´ g) :=
begin
  constructor, intros i,
  simp only [functor.map_comp],
  apply_instance,
end

instance is_quasi_iso_of_is_iso {X Y : ùí¶} (f : X ‚ü∂ Y) [is_iso f] : is_quasi_iso f :=
begin
  constructor,
  intros i, apply_instance
end

example {X Y Z : ùí¶} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [hf : is_quasi_iso f] [hg : is_iso g] :
  is_quasi_iso (f ‚â´ g) := infer_instance
/-
instance is_quasi_iso_comp_iso {X Y Z : ùí¶} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
  [hf : is_quasi_iso f] [hg : is_iso g] :
  is_quasi_iso (f ‚â´ g) := infer_instance
{ cond := Œª i, by { rw (homology_functor A (complex_shape.up ‚Ñ§) i).map_comp, apply_instance, } }
-/

-- Move This
@[simp] lemma is_iso_neg_iff (A : Type*) [category A]
  [preadditive A] (X Y : A) (f : X ‚ü∂ Y) :
  is_iso (-f) ‚Üî is_iso f :=
begin
  split; rintro ‚ü®g, hg‚ü©; refine ‚ü®‚ü®-g, _‚ü©‚ü©;
  simpa only [preadditive.comp_neg, preadditive.neg_comp, neg_neg] using hg,
end

-- Move This
@[simp] lemma is_iso_neg_one_pow_iff (A : Type*) [category A]
  [preadditive A] (X Y : A) (f : X ‚ü∂ Y) (i : ‚Ñ§) :
  is_iso (i.neg_one_pow ‚Ä¢ f) ‚Üî is_iso f :=
begin
  induction i using int.induction_on_iff with i,
  { simp only [int.neg_one_pow_neg_zero, one_zsmul] },
  dsimp,
  simp only [int.neg_one_pow_add, int.neg_one_pow_one, mul_neg, mul_one, neg_smul, is_iso_neg_iff],
end

-- TODO(!): Why is this needed!?!?
instance : has_shift (triangle ùí¶) ‚Ñ§ :=
triangle.has_shift (homotopy_category A (complex_shape.up ‚Ñ§))

open category_theory.preadditive

-- move me
instance is_iso_neg {C : Type*} [category C] [preadditive C] {X Y : C} (f : X ‚ü∂ Y) [is_iso f] :
  is_iso (-f) :=
by { use (-(inv f)), simp only [comp_neg, neg_comp, is_iso.hom_inv_id, neg_neg,
  eq_self_iff_true, is_iso.inv_hom_id, and_self] }

/-- If `A ‚Üí B ‚Üí C ‚Üí A[1]` is a distinguished triangle,
then `A ‚Üí B` is a quasi-isomorphism if and only if `C` is acyclic. -/
lemma is_quasi_iso_iff_is_acyclic (T : triangle ùí¶) (hT : T ‚àà dist_triang ùí¶) :
  is_quasi_iso T.mor‚ÇÅ ‚Üî is_acyclic T.obj‚ÇÉ :=
begin
  let H := homology_functor A (complex_shape.up ‚Ñ§) 0,
  rw [‚Üê is_acyclic_iff],
  let S : ‚Ñ§ ‚Üí triangle ùí¶ := Œª i, T‚ü¶i‚üß,
  have hS : ‚àÄ i : ‚Ñ§, S i ‚àà dist_triang ùí¶,
  { apply pretriangulated.shift_of_dist_triangle, assumption },
  have hSmor‚ÇÅ : ‚àÄ i, (S i).mor‚ÇÅ = i.neg_one_pow ‚Ä¢ T.mor‚ÇÅ‚ü¶i‚üß', { intro i, refl },
  have aux : ‚àÄ i, is_iso (H.map (S i).mor‚ÇÅ) ‚Üî is_iso (H.map (T.mor‚ÇÅ‚ü¶i‚üß')),
  { intro i, rw [hSmor‚ÇÅ, H.map_zsmul, is_iso_neg_one_pow_iff], },
  show _ ‚Üî (‚àÄ i : ‚Ñ§, is_zero (H.obj (S i).obj‚ÇÉ)),
  split; introsI hh,
  { intro i,
    haveI : is_iso (H.map ((S i).rotate.mor‚ÇÉ)),
    { dsimp [triangle.rotate_mor‚ÇÉ],
      rw [functor.map_neg, is_iso_neg_iff],
    let EE : (category_theory.shift_functor ùí¶ i ‚ãô category_theory.shift_functor ùí¶ (1 : ‚Ñ§)) ‚ãô H ‚âÖ
      homology_functor _ _ (i + 1),
    { refine iso_whisker_right _ _ ‚â™‚â´ homology_zero_shift_iso _ (i + 1),
      refine (shift_functor_add _ _ _).symm },
    suffices : is_iso ((homology_functor _ _ (i+1)).map T.mor‚ÇÅ),
    { have hhh := EE.hom.naturality T.mor‚ÇÅ,
      rw ‚Üê is_iso.eq_comp_inv at hhh,
      dsimp only [functor.comp_map] at hhh,
      simp only [functor.map_zsmul],
      rw is_iso_neg_one_pow_iff,
      rw hhh,
      apply_with is_iso.comp_is_iso { instances := ff },
      apply_with is_iso.comp_is_iso { instances := ff },
      all_goals { apply_instance <|> assumption } },
    apply is_quasi_iso.cond },
    haveI : is_iso (H.map (S i).mor‚ÇÅ),
    { simp only [‚Üê is_quasi_iso_iff, ‚Üê aux] at hh, exact hh i },
    have E' := Œª i : ‚Ñ§, five_term_exact_seq' H (S i) (hS i),
    apply is_zero_of_exact_seq_of_is_iso_of_is_iso _ _ _ _ (E' i) },
  { simp only [‚Üê is_quasi_iso_iff, ‚Üê aux],
    intro i,
    have E := five_term_exact_seq H (S i) (hS i),
    apply E.is_iso_of_zero_of_zero,
    { apply is_zero.eq_of_src,
      let EE : (category_theory.shift_functor ùí¶ i ‚ãô category_theory.shift_functor ùí¶ (-1 : ‚Ñ§)) ‚ãô H ‚âÖ
        (category_theory.shift_functor ùí¶ (i + -1)) ‚ãô H,
      { refine iso_whisker_right _ _, refine (shift_functor_add _ _ _).symm },
      let e := EE.app T.obj‚ÇÉ,
      -- let e := (homology_zero_shift_iso _ (-1 : ‚Ñ§)).app (S i).obj‚ÇÉ,
      refine is_zero_of_iso_of_zero _ e.symm, clear e,
      exact hh _, },
    { apply (hh i).eq_of_tgt, }, }
end

/-- If `A ‚Üí B ‚Üí C ‚Üí A[1]` is a distinguished triangle, and `A ‚Üí B` is a quasi-isomorphism,
then `C` is acyclic. -/
lemma is_acyclic_of_dist_triang_of_is_quasi_iso (T : triangle ùí¶) (hT : T ‚àà dist_triang ùí¶)
  [h : is_quasi_iso T.mor‚ÇÅ] : is_acyclic T.obj‚ÇÉ :=
by rwa ‚Üê is_quasi_iso_iff_is_acyclic T hT

instance is_acyclic_shift (T : ùí¶) [h : is_acyclic T] (i : ‚Ñ§) : is_acyclic (T‚ü¶i‚üß) :=
begin
  rw ‚Üê is_acyclic_iff,
  intros j,
  let H := homology_functor A (complex_shape.up ‚Ñ§) 0,
  let e : H.obj (T‚ü¶i‚üß‚ü¶j‚üß) ‚âÖ (homology_functor A (complex_shape.up ‚Ñ§) (i+j)).obj T :=
    _ ‚â™‚â´ (homology_zero_shift_iso _ (i+j)).app T,
  swap,
  { let e := (iso_whisker_right (shift_functor_add _ i j).symm H).app T,
    refine _ ‚â™‚â´ e,
    refine iso.refl _ },
  apply is_zero_of_iso_of_zero _ e.symm,
  apply is_acyclic.cond,
end

instance is_quasi_iso_shift (X Y : ùí¶) (f : X ‚ü∂ Y) [is_quasi_iso f] (i : ‚Ñ§) :
  is_quasi_iso (f‚ü¶i‚üß') :=
begin
  rw ‚Üê is_quasi_iso_iff,
  intros j,
  have := (category_theory.shift_functor_add ùí¶ i j).hom.naturality f,
  apply_fun (Œª e, (homology_functor _ _ 0).map e) at this,
  simp only [functor.map_comp, functor.comp_map] at this,
  rw ‚Üê is_iso.inv_comp_eq at this,
  rw ‚Üê this,
  apply is_iso.comp_is_iso,
end

lemma hom_K_projective_bijective {X Y : ùí¶} (P : ùí¶) [is_K_projective P]
  (f : X ‚ü∂ Y) [hf : is_quasi_iso f] : function.bijective (Œª e : P ‚ü∂ X, e ‚â´ f) :=
begin
  /-
  Steps:
  1. Complete `f` to a dist triang `X ‚Üí Y ‚Üí Z ‚Üí X[1]`.
  2. Use LES assoc. to `Hom(P,-)`, proved in `for_mathlib/derived/homological.lean`.
  3. Use lemma above + def of K-projective to see that `Hom(P,Z) = 0`.
  -/
  obtain ‚ü®Z,g,h,hT‚ü© := pretriangulated.distinguished_cocone_triangle _ _ f,
  let T := triangle.mk _ f g h,
  change T ‚àà _ at hT,
  let H : ùí¶ ‚•§ Ab := preadditive_yoneda.flip.obj (opposite.op P),
  have EE : exact_seq Ab [arrow.mk (H.map T.inv_rotate.mor‚ÇÅ), arrow.mk (H.map f), H.map g],
  { apply exact_seq.cons,
    apply homological_functor.cond H T.inv_rotate,
    apply inv_rotate_mem_distinguished_triangles,
    assumption,
    rw ‚Üê exact_iff_exact_seq,
    apply homological_functor.cond H T hT },
  split,
  { intros e‚ÇÅ e‚ÇÇ hh,
    let ee := (EE.extract 0 2).pair,
    rw AddCommGroup.exact_iff at ee,
    dsimp at hh,
    rw [‚Üê sub_eq_zero, ‚Üê preadditive.sub_comp] at hh,
    change _ ‚àà (H.map f).ker at hh,
    rw ‚Üê ee at hh,
    obtain ‚ü®g,hg‚ü© := hh,
    let g' : P ‚ü∂ _ := g,
    haveI : is_acyclic T.inv_rotate.obj‚ÇÅ,
    { change is_acyclic ((T.obj‚ÇÉ)‚ü¶(-1 : ‚Ñ§)‚üß),
      apply_with homotopy_category.is_acyclic_shift { instances := ff },
      haveI : is_quasi_iso T.mor‚ÇÅ := hf,
      apply is_acyclic_of_dist_triang_of_is_quasi_iso,
      exact hT },
    have : g' = 0,
    { apply is_K_projective.cond },
    change g' ‚â´ _ = _ at hg,
    rw [this, zero_comp] at hg,
    rw ‚Üê sub_eq_zero,
    exact hg.symm },
  { intros q,
    have : q ‚â´ g = 0,
    { haveI : is_acyclic Z,
      { change is_acyclic T.obj‚ÇÉ,
        apply_with is_acyclic_of_dist_triang_of_is_quasi_iso { instances := ff },
        assumption,
        exact hf },
      apply is_K_projective.cond },
    let ee := (EE.extract 1 3).pair,
    rw AddCommGroup.exact_iff at ee,
    change _ ‚àà (H.map g).ker at this,
    rwa ‚Üê ee at this }
end

instance (X : ùí¶) [is_bounded_above X] (i : ‚Ñ§) : is_bounded_above (X‚ü¶i‚üß) :=
begin
  obtain ‚ü®a,ha‚ü© := is_bounded_above.cond X,
  use a - i,
  intros j hj,
  apply ha,
  linarith
end

lemma is_K_projective_of_iso (P Q : ùí¶) [is_K_projective P] (e : P ‚âÖ Q) : is_K_projective Q :=
begin
  constructor,
  introsI Y _ f,
  apply_fun (Œª q, e.hom ‚â´ q),
  dsimp,
  rw comp_zero,
  apply is_K_projective.cond,
  intros a b h,
  apply_fun (Œª q, e.inv ‚â´ q) at h,
  simpa using h,
end

instance is_K_projective_shift (P : ùí¶) [is_K_projective P] (i : ‚Ñ§) : is_K_projective (P‚ü¶i‚üß) :=
begin
  constructor,
  introsI Y _ f,
  let e := (shift_functor_comp_shift_functor_neg _ i).app P,
  dsimp at e,
  haveI : is_K_projective (P‚ü¶i‚üß‚ü¶-i‚üß) := is_K_projective_of_iso _ _ e.symm,
  apply (category_theory.shift_functor ùí¶ (-i)).map_injective,
  simp,
  apply is_K_projective.cond,
end

lemma is_quasi_iso_of_triangle
  (T‚ÇÅ T‚ÇÇ : triangle ùí¶)
  (h‚ÇÅ : T‚ÇÅ ‚àà dist_triang ùí¶)
  (h‚ÇÇ : T‚ÇÇ ‚àà dist_triang ùí¶)
  (f : T‚ÇÅ ‚ü∂ T‚ÇÇ)
  [is_quasi_iso f.hom‚ÇÅ]
  [is_quasi_iso f.hom‚ÇÇ] :
  is_quasi_iso f.hom‚ÇÉ :=
begin
  -- Another application of the five lemma...
  let H : ùí¶ ‚•§ _ := homotopy_category.homology_functor _ _ 0,
  rw ‚Üê is_quasi_iso_iff,
  intros i,
  let S‚ÇÅ := T‚ÇÅ‚ü¶i‚üß,
  let S‚ÇÇ := T‚ÇÇ‚ü¶i‚üß,
  let g : S‚ÇÅ ‚ü∂ S‚ÇÇ := f‚ü¶i‚üß',
  have aux1 : exact (H.map S‚ÇÅ.mor‚ÇÅ) (H.map S‚ÇÅ.mor‚ÇÇ),
  { apply homological_functor.cond,
    apply pretriangulated.shift_of_dist_triangle,
    assumption },
  have aux2 : exact (H.map S‚ÇÅ.mor‚ÇÇ) (H.map S‚ÇÅ.mor‚ÇÉ),
  { apply homological_functor.cond H S‚ÇÅ.rotate,
    apply pretriangulated.rot_of_dist_triangle,
    apply pretriangulated.shift_of_dist_triangle,
    assumption },
  have aux3 : exact (H.map S‚ÇÅ.mor‚ÇÉ) (H.map S‚ÇÅ.rotate.mor‚ÇÉ),
  { apply homological_functor.cond H S‚ÇÅ.rotate.rotate,
    apply pretriangulated.rot_of_dist_triangle,
    apply pretriangulated.rot_of_dist_triangle,
    apply pretriangulated.shift_of_dist_triangle,
    assumption },
  have aux4 : exact (H.map S‚ÇÇ.mor‚ÇÅ) (H.map S‚ÇÇ.mor‚ÇÇ),
  { apply homological_functor.cond,
    apply pretriangulated.shift_of_dist_triangle,
    assumption },
  have aux5 : exact (H.map S‚ÇÇ.mor‚ÇÇ) (H.map S‚ÇÇ.mor‚ÇÉ),
  { apply homological_functor.cond H S‚ÇÇ.rotate,
    apply pretriangulated.rot_of_dist_triangle,
    apply pretriangulated.shift_of_dist_triangle,
    assumption },
  have aux6 : exact (H.map S‚ÇÇ.mor‚ÇÉ) (H.map S‚ÇÇ.rotate.mor‚ÇÉ),
  { apply homological_functor.cond H S‚ÇÇ.rotate.rotate,
    apply pretriangulated.rot_of_dist_triangle,
    apply pretriangulated.rot_of_dist_triangle,
    apply pretriangulated.shift_of_dist_triangle,
    assumption },
  haveI : is_iso (H.map g.hom‚ÇÅ),
  { change is_iso (H.map (f.hom‚ÇÅ‚ü¶i‚üß')),
    apply_instance },
  haveI : is_iso (H.map g.hom‚ÇÇ),
  { change is_iso (H.map (f.hom‚ÇÇ‚ü¶i‚üß')),
    apply_instance },
  haveI : is_iso (H.map (g.hom‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß')),
  { change is_iso (H.map (f.hom‚ÇÅ‚ü¶i‚üß'‚ü¶(1 :‚Ñ§)‚üß')),
    have := (category_theory.shift_functor_add ùí¶ i 1).hom.naturality f.hom‚ÇÅ,
    apply_fun (Œª e, H.map e) at this,
    simp only [H.map_comp, functor.comp_map] at this,
    rw ‚Üê is_iso.inv_comp_eq at this,
    rw ‚Üê this,
    apply is_iso.comp_is_iso },
  haveI : is_iso (H.map (g.hom‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß')),
  { change is_iso (H.map (f.hom‚ÇÇ‚ü¶i‚üß'‚ü¶(1 :‚Ñ§)‚üß')),
    have := (category_theory.shift_functor_add ùí¶ i 1).hom.naturality f.hom‚ÇÇ,
    apply_fun (Œª e, H.map e) at this,
    simp only [H.map_comp, functor.comp_map] at this,
    rw ‚Üê is_iso.inv_comp_eq at this,
    rw ‚Üê this,
    apply is_iso.comp_is_iso },
  refine @abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso A _ _
    (H.obj S‚ÇÅ.obj‚ÇÅ) (H.obj S‚ÇÅ.obj‚ÇÇ) (H.obj S‚ÇÅ.obj‚ÇÉ) (H.obj (S‚ÇÅ.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß))
    (H.obj S‚ÇÇ.obj‚ÇÅ) (H.obj S‚ÇÇ.obj‚ÇÇ) (H.obj S‚ÇÇ.obj‚ÇÉ) (H.obj (S‚ÇÇ.obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß))
    (H.map S‚ÇÅ.mor‚ÇÅ) (H.map S‚ÇÅ.mor‚ÇÇ) (H.map S‚ÇÅ.mor‚ÇÉ)
    (H.map S‚ÇÇ.mor‚ÇÅ) (H.map S‚ÇÇ.mor‚ÇÇ) (H.map S‚ÇÇ.mor‚ÇÉ)
    (H.map g.hom‚ÇÅ) (H.map g.hom‚ÇÇ) (H.map g.hom‚ÇÉ) (H.map (g.hom‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß'))
    _ _ _
    (H.obj (S‚ÇÅ.obj‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß))
    (H.obj (S‚ÇÇ.obj‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß))
    (H.map (S‚ÇÅ.rotate.mor‚ÇÉ))
    (H.map (S‚ÇÇ.rotate.mor‚ÇÉ))
    (H.map (g.hom‚ÇÇ‚ü¶(1 : ‚Ñ§)‚üß')) _ aux1 aux2 aux3 aux4 aux5 aux6 _ _ _ _,
  { simp only [‚Üê H.map_comp, g.comm‚ÇÅ] },
  { simp only [‚Üê H.map_comp, g.comm‚ÇÇ] },
  { simp only [‚Üê H.map_comp, g.comm‚ÇÉ] },
  { simp only [‚Üê functor.map_comp],
    congr' 1,
    dsimp,
    simp only [preadditive.comp_neg, preadditive.neg_comp, neg_inj, ‚Üê functor.map_comp, f.comm‚ÇÅ,
      preadditive.zsmul_comp, preadditive.comp_zsmul] },
end

lemma is_K_projective_of_triangle (T : triangle ùí¶) (hT : T ‚àà dist_triang ùí¶)
  [is_K_projective T.obj‚ÇÅ] [is_K_projective T.obj‚ÇÇ] : is_K_projective T.obj‚ÇÉ :=
begin
  constructor,
  introsI Y _ f,
  let H : ùí¶ ‚•§ Ab·µí·µñ := (preadditive_yoneda.obj Y).right_op,
  haveI : homological_functor H := infer_instance, -- sanity check
  have e := homological_functor.cond H T.rotate
    (rotate_mem_distinguished_triangles _ hT),
  dsimp [H] at e,
  let a := _, let b := _, change exact a b at e, have e' : exact b.unop a.unop := e.unop,
  dsimp at e',
  rw AddCommGroup.exact_iff at e',
  let a' := _, let b' := _, change add_monoid_hom.range a' = add_monoid_hom.ker b' at e',
  have : f ‚àà b'.ker,
  { change _  ‚â´ _ = 0,
    apply_with is_K_projective.cond { instances := ff },
    dsimp,
    apply_instance,
    apply_instance },
  rw ‚Üê e' at this,
  obtain ‚ü®g,hg‚ü© := this,
  dsimp at hg,
  rw ‚Üê hg,
  have : g = 0,
  { apply is_K_projective.cond },
  simp [this],
end

variable [enough_projectives A]

lemma exists_K_projective_replacement_of_bounded (X : ùí¶)
  [is_bounded_above X] :
  ‚àÉ (P : ùí¶) [is_K_projective P] [is_bounded_above P]
    (f : P ‚ü∂ X), is_quasi_iso f ‚àß (‚àÄ k, projective (P.as.X k)) :=
begin
  obtain ‚ü®a, H‚ü© := is_bounded_above.cond X,
  use projective.replacement X.as a H,
  refine ‚ü®‚ü®_‚ü©, ‚ü®‚ü®a, _‚ü©‚ü©, (quotient _ _).map (projective.replacement.hom X.as a H), ‚ü®_‚ü©, _‚ü©,
  { intros Y hY f,
    convert eq_of_homotopy _ _ (projective.null_homotopic_of_projective_to_acyclic f.out a
      (projective.replacement_is_projective X.as a H)
      (projective.replacement_is_bounded X.as a H)
      hY.1),
    simp },
  { apply projective.replacement_is_bounded },
  { intro i,
    erw ‚Üê homology_functor_map_factors,
    apply_instance },
  { intro k, dsimp, apply projective.replacement_is_projective }
end

end homotopy_category
