import category_theory.abelian.basic
import category_theory.preadditive.additive_functor
import for_mathlib.short_exact_sequence
import for_mathlib.abelian_category
import for_mathlib.exact_lift_desc

/-!

Refs:
1. Grothendieck's T√¥hoku paper
2. Stacks tag 010T

-/

noncomputable theory
namespace category_theory

universes v v' u u'
variables (A : Type u) (B : Type u')
  [category.{v} A] [category.{v} B] [abelian A] [abelian B]

/-- Cohomological covariant delta functor. -/
@[nolint has_inhabited_instance]
structure delta_functor :=
(F : ‚Ñï ‚Üí A ‚•§ B)
[additive : ‚àÄ n, functor.additive (F n)]
(Œ¥ : Œ† (n : ‚Ñï),
  short_exact_sequence.Trd A ‚ãô (F n) ‚ü∂ short_exact_sequence.Fst A ‚ãô (F (n+1)))
(mono : ‚àÄ (S : short_exact_sequence _), mono ((F 0).map S.f))
(exact' : ‚àÄ (n : ‚Ñï) (S : short_exact_sequence _), exact ((F n).map S.f) ((F n).map S.g))
(exact_Œ¥ : ‚àÄ (n : ‚Ñï) (S : short_exact_sequence _),
  exact ((F n).map S.g) ((Œ¥ n).app S))
(Œ¥_exact : ‚àÄ (n : ‚Ñï) (S : short_exact_sequence _),
  exact ((Œ¥ n).app S) ((F (n+1)).map S.f))

namespace delta_functor

infixr ` ‚•§Œ¥ `:26 := delta_functor

instance : has_coe_to_fun (A ‚•§Œ¥ B) (Œª F, ‚Ñï ‚Üí (A ‚•§ B)) := ‚ü®F‚ü©

instance additive_apply (F : A ‚•§Œ¥ B) (n : ‚Ñï) :
  functor.additive (F n) := F.additive n

variables {A B}

/-- Morphisms of cohomological covariant delta functors. -/
@[nolint has_inhabited_instance]
structure hom (F G : A ‚•§Œ¥ B) :=
(Œ∑ : Œ† n, F n ‚ü∂ G n)
(comm' : ‚àÄ n, F.Œ¥ n ‚â´ whisker_left _ (Œ∑ _) = whisker_left _ (Œ∑ _) ‚â´ G.Œ¥ _)

instance : quiver (A ‚•§Œ¥ B) :=
{ hom := hom }

namespace hom

instance {F G : A ‚•§Œ¥ B} : has_coe_to_fun (F ‚ü∂ G) (Œª Œ∑, Œ† n, F n ‚ü∂ G n) :=
‚ü®Œ∑‚ü©

@[ext]
lemma ext {F G : A ‚•§Œ¥ B} (Œ∑ Œ≥ : F ‚ü∂ G) (h : ‚àÄ n, Œ∑ n = Œ≥ n) : Œ∑ = Œ≥ :=
by { cases Œ∑, cases Œ≥, congr, ext1, apply h }

@[simp]
lemma Œ∑_eq_coe {F G : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (n : ‚Ñï) :
  Œ∑.Œ∑ n = Œ∑ n := rfl

@[simp, reassoc]
lemma comm {F G : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (n : ‚Ñï) (S : short_exact_sequence A) :
  (F.Œ¥ n).app S ‚â´ (Œ∑ (n+1)).app S.fst =
  (Œ∑ n).app S.trd ‚â´ (G.Œ¥ n).app S :=
begin
  have := Œ∑.comm' n,
  apply_fun (Œª e, e.app S) at this,
  exact this,
end

/-- Identity morphisms of delta functors. -/
def id (F : A ‚•§Œ¥ B) : F ‚ü∂ F :=
‚ü®Œª n, ùüô _, begin
  intros n,
  ext, dsimp,
  erw nat_trans.id_app,
  erw nat_trans.id_app,
  simp,
end‚ü©

@[simp]
lemma id_apply (F : A ‚•§Œ¥ B) (n : ‚Ñï) :
  id F n = ùüô _ := rfl

/-- Compositions of morphisms of delta functors. -/
def comp {F G H : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (Œ≥ : G ‚ü∂ H) :
  hom F H :=
{ Œ∑ := Œª n, Œ∑ n ‚â´ Œ≥ n,
  comm' := begin
    intros n, ext,
    dsimp,
    simp,
  end }

@[simp]
lemma comp_apply {F G H : A ‚•§Œ¥ B} (Œ∑ : F ‚ü∂ G) (Œ≥ : G ‚ü∂ H) (n : ‚Ñï) :
  (hom.comp Œ∑ Œ≥) n = Œ∑ n ‚â´ Œ≥ n := rfl

end hom

/-- delta functors form a category. -/
instance category : category (A ‚•§Œ¥ B) :=
{ id := Œª F, hom.id _,
  comp := Œª X Y Z F G, hom.comp F G,
  id_comp' := by { intros F G f, ext, dsimp, simp },
  comp_id' := by { intros F G f, ext, dsimp, simp },
  assoc' := by { intros F G H W a b c, ext, dsimp, simp },
  ..(infer_instance : quiver (A ‚•§Œ¥ B)) }

/-- Universal delta functors. -/
class universal (F : A ‚•§Œ¥ B) : Prop :=
(cond : ‚àÄ (G : A ‚•§Œ¥ B) (e0 : F 0 ‚ü∂ G 0), ‚àÉ! e : F ‚ü∂ G, (e : Œ† n, F n ‚ü∂ G n) 0 = e0)

namespace tohoku

/-- An effacement relative to a Œ¥ functor. -/
@[nolint has_inhabited_instance]
structure effacement (F : A ‚•§Œ¥ B) (X : A) (n : ‚Ñï) :=
(I : A)
(Œπ : X ‚ü∂ I)
[mono : category_theory.mono Œπ]
(w : (F (n+1)).map Œπ = 0)

/-- Morphisms between effacements. -/
@[ext, nolint has_inhabited_instance]
structure effacement.hom (F : A ‚•§Œ¥ B) (X : A) (n : ‚Ñï)
  (e‚ÇÅ e‚ÇÇ : effacement F X n) :=
(t : e‚ÇÅ.I ‚ü∂ e‚ÇÇ.I)
(w : e‚ÇÅ.Œπ ‚â´ t = e‚ÇÇ.Œπ)

instance effacement.category (F : A ‚•§Œ¥ B) (X : A) (n : ‚Ñï) :
  category (effacement F X n) :=
{ hom := Œª e‚ÇÅ e‚ÇÇ, e‚ÇÅ.hom _ _ _ e‚ÇÇ,
  id := Œª e, ‚ü®ùüô _, category.comp_id _‚ü©,
  comp := Œª a b c f g, ‚ü®f.t ‚â´ g.t, by simp [reassoc_of f.w, g.w]‚ü©,
  id_comp' := Œª a b f, effacement.hom.ext _ _ $ category.id_comp _,
  comp_id' := Œª a b f, effacement.hom.ext _ _ $ category.comp_id _,
  assoc' := Œª a b c d f g h,
    effacement.hom.ext _ _ $ category.assoc _ _ _ }

instance effacement_mono (F : A ‚•§Œ¥ B) (X : A) (n : ‚Ñï)
  (e : effacement F X n) : category_theory.mono e.Œπ := e.mono

/-- Effacable Œ¥ functors. -/
class effaceable (F : A ‚•§Œ¥ B) : Prop :=
(cond [] : ‚àÄ (X : A) (n : ‚Ñï), nonempty (effacement F X n))

/-- A choice of effacement. -/
def choose_effacement (F : A ‚•§Œ¥ B) [effaceable F] (X : A) (n : ‚Ñï) : effacement F X n :=
(effaceable.cond F X n).some

/-- A short exact sequence associated to an effacement -/
def effacement.ses {F : A ‚•§Œ¥ B} {X n} (e : effacement F X n) : short_exact_sequence A :=
{ fst := X,
  snd := e.I,
  trd := limits.cokernel e.Œπ,
  f := e.Œπ,
  g := limits.cokernel.œÄ _,
  exact' := abelian.exact_cokernel e.Œπ }

/-- An auxiliary definition used to obtain the isomorphism below -/
def effacement.cokernel_comparison {F : A ‚•§Œ¥ B} {X n} (e : effacement F X n) :
  limits.cokernel ((F n).map (limits.cokernel.œÄ e.Œπ)) ‚ü∂ (F (n+1)).obj X :=
limits.cokernel.desc _ ((F.Œ¥ n).app e.ses) (F.exact_Œ¥ n e.ses).w

open_locale zero_object
instance effacement.epi_cokernel_comparison {F : A ‚•§Œ¥ B} {X n} (e : effacement F X n) :
  epi e.cokernel_comparison :=
begin
  dsimp [effacement.cokernel_comparison],
  let t := _, change epi t,
  suffices : epi (limits.cokernel.œÄ _ ‚â´ t),
  { resetI,
    apply epi_of_epi (limits.cokernel.œÄ _) t },
  simp only [limits.cokernel.œÄ_desc],
  have : exact ((F.Œ¥ n).app e.ses) ((F (n+1)).map e.Œπ) :=
    F.Œ¥_exact n e.ses,
  rw e.w at this,

  apply abelian.pseudoelement.epi_of_pseudo_surjective,
  intros q,
  exact (abelian.pseudoelement.pseudo_exact_of_exact this).2 q (by simp),
end

/- This is true with fewer assumptions... -/
instance effacement.mono_cokernel_comparison {F : A ‚•§Œ¥ B} {X n} (e : effacement F X n) :
  category_theory.mono e.cokernel_comparison :=
begin
  dsimp [effacement.cokernel_comparison],
  let t := _, change category_theory.mono t,
  suffices : exact ((F n).map (limits.cokernel.œÄ e.Œπ)) ((F.Œ¥ n).app e.ses),
  exact abelian.category_theory.limits.cokernel.desc.category_theory.mono
    ((F n).map (limits.cokernel.œÄ e.Œπ))
    ((F.Œ¥ n).app (effacement.ses e)) this,
  exact F.exact_Œ¥ n e.ses,
end

instance effacement.is_iso_cokernel_comparison {F : A ‚•§Œ¥ B} {X n} (e : effacement F X n) :
  is_iso e.cokernel_comparison :=
is_iso_of_mono_of_epi _

/-- The cokernel isomorphism associated to an effacement. -/
def effacement.cokernel_iso {F : A ‚•§Œ¥ B} {X n} (e : effacement F X n) :
  limits.cokernel ((F n).map (limits.cokernel.œÄ e.Œπ)) ‚âÖ (F (n+1)).obj X :=
as_iso e.cokernel_comparison

@[simp, reassoc]
lemma effacement.cokernel_iso_spec {F : A ‚•§Œ¥ B} {X n} (e : effacement F X n) :
  limits.cokernel.œÄ _ ‚â´ e.cokernel_iso.hom =
  (F.Œ¥ n).app e.ses :=
limits.cokernel.œÄ_desc _ _ _

/-- An auxiliary definition used in `lift` below. -/
def effacement.lift_app_aux {F G : A ‚•§Œ¥ B} {X n}
  (Œ∑ : F n ‚ü∂ G n) (e : effacement F X n) :
  (F (n+1)).obj X ‚ü∂ (G (n+1)).obj X :=
e.cokernel_iso.inv ‚â´
limits.cokernel.desc _
(Œ∑.app _ ‚â´ (G.Œ¥ n).app e.ses)
begin
  rw [‚Üê category.assoc, Œ∑.naturality, category.assoc],
  erw (G.exact_Œ¥ n e.ses).w,
  rw [limits.comp_zero]
end

/-- An auxiliary definition used in `lift` below. -/
def effacement.map_ses {F : A ‚•§Œ¥ B} {X n}
  (e‚ÇÅ e‚ÇÇ : effacement F X n) (q : e‚ÇÅ ‚ü∂ e‚ÇÇ) :
  e‚ÇÅ.ses ‚ü∂ e‚ÇÇ.ses :=
{ fst := ùüô _,
  snd := q.t,
  trd := begin
    refine limits.cokernel.desc _ _ _,
    refine _ ‚â´ limits.cokernel.œÄ _,
    exact q.t,
    rw [‚Üê category.assoc, q.w, limits.cokernel.condition]
  end,
  sq1' := by { simp only [category.id_comp], exact q.w.symm },
  sq2' := begin
    erw limits.cokernel.œÄ_desc,
    refl,
  end }


lemma effacement.lift_app_aux_eq_of_hom
  {F G : A ‚•§Œ¥ B} {X n}
  (Œ∑ : F n ‚ü∂ G n) (e‚ÇÅ e‚ÇÇ : effacement F X n) (q : e‚ÇÅ ‚ü∂ e‚ÇÇ) :
  e‚ÇÅ.lift_app_aux Œ∑ = e‚ÇÇ.lift_app_aux Œ∑ :=
begin
  dsimp only [effacement.lift_app_aux],
  rw iso.inv_comp_eq,
  apply limits.coequalizer.hom_ext,
  simp only [limits.cokernel.œÄ_desc, effacement.cokernel_iso_spec_assoc],
  rw ‚Üê category.assoc, let t := _, change _ = t ‚â´ _,
  have ht : t = (F n).map (e‚ÇÅ.map_ses e‚ÇÇ q).trd ‚â´ limits.cokernel.œÄ _,
  { dsimp [t], rw iso.comp_inv_eq,
    simp only [category.assoc, effacement.cokernel_iso_spec],
    erw (F.Œ¥ n).naturality (e‚ÇÅ.map_ses e‚ÇÇ q),
    dsimp [effacement.map_ses],
    simp },
  rw ht, clear ht t,
  simp only [category.assoc, limits.cokernel.œÄ_desc],
  erw [nat_trans.naturality_assoc],
  congr' 1,
  erw (G.Œ¥ n).naturality (e‚ÇÅ.map_ses e‚ÇÇ q),
  symmetry,
  convert category.comp_id _,
  exact functor.map_id _ _,
end

lemma effacement.lift_app_aux_well_defined
  {F G : A ‚•§Œ¥ B} {X n}
  (Œ∑ : F n ‚ü∂ G n) (e‚ÇÅ e‚ÇÇ : effacement F X n) :
  e‚ÇÅ.lift_app_aux Œ∑ = e‚ÇÇ.lift_app_aux Œ∑ :=
begin
  let II := limits.biprod e‚ÇÅ.I e‚ÇÇ.I,
  let Œπ : X ‚ü∂ II := limits.biprod.lift e‚ÇÅ.Œπ e‚ÇÇ.Œπ,
  let e : effacement F X n := ‚ü®II, Œπ, _‚ü©, -- use additivity of `F n`.
  swap,
  { haveI : limits.preserves_binary_biproducts (F (n+1)) :=
      limits.preserves_binary_biproducts_of_preserves_biproducts (F (n + 1)),
    let E : (F (n + 1)).obj (e‚ÇÅ.I ‚äû e‚ÇÇ.I) ‚âÖ (F (n + 1)).obj (e‚ÇÅ.I) ‚äû (F (n+1)).obj (e‚ÇÇ.I) :=
      functor.map_biprod (F (n+1)) _ _,
    rw [‚Üê cancel_mono E.hom, limits.zero_comp],
    rw functor.map_biprod_hom,
    apply limits.biprod.hom_ext,
    { simp only [category.assoc, limits.biprod.lift_fst, limits.zero_comp],
      simp only [‚Üê functor.map_comp, limits.biprod.lift_fst, e‚ÇÅ.w] },
    { simp only [category.assoc, limits.biprod.lift_snd, limits.zero_comp],
      simp only [‚Üê functor.map_comp, limits.biprod.lift_snd, e‚ÇÇ.w] } },
  let œÄ‚ÇÅ : e ‚ü∂ e‚ÇÅ := ‚ü®limits.biprod.fst, _‚ü©,
  swap, { dsimp [e], simp, },
  let œÄ‚ÇÇ : e ‚ü∂ e‚ÇÇ := ‚ü®limits.biprod.snd, _‚ü©,
  swap, { dsimp [e], simp, },
  rw ‚Üê effacement.lift_app_aux_eq_of_hom Œ∑ _ _ œÄ‚ÇÅ,
  rw ‚Üê effacement.lift_app_aux_eq_of_hom Œ∑ _ _ œÄ‚ÇÇ,
end

lemma effacement.lift_naturality
  {F G : A ‚•§Œ¥ B} {X Y n}
  (Œ∑ : F n ‚ü∂ G n) (e‚ÇÅ : effacement F X n) (e‚ÇÇ : effacement F Y n) (f : X ‚ü∂ Y) :
  e‚ÇÅ.lift_app_aux Œ∑ ‚â´ (G (n+1)).map f =
  (F (n+1)).map f ‚â´ e‚ÇÇ.lift_app_aux Œ∑ :=
begin
  let e‚ÇÅ' : effacement F X n :=
    ‚ü®limits.biprod e‚ÇÅ.I e‚ÇÇ.I, limits.biprod.lift e‚ÇÅ.Œπ (f ‚â´ e‚ÇÇ.Œπ), _‚ü©, -- again, additivity
  swap,
  { haveI : limits.preserves_binary_biproducts (F (n+1)) :=
      limits.preserves_binary_biproducts_of_preserves_biproducts (F (n + 1)),
    let E : (F (n + 1)).obj (e‚ÇÅ.I ‚äû e‚ÇÇ.I) ‚âÖ (F (n + 1)).obj (e‚ÇÅ.I) ‚äû (F (n+1)).obj (e‚ÇÇ.I) :=
      functor.map_biprod (F (n+1)) _ _,
    rw [‚Üê cancel_mono E.hom, limits.zero_comp],
    rw functor.map_biprod_hom,
    apply limits.biprod.hom_ext,
    simp only [category.assoc, limits.biprod.lift_fst, limits.zero_comp],
    simp only [‚Üê functor.map_comp, limits.biprod.lift_fst],
    exact e‚ÇÅ.w,
    simp only [category.assoc, limits.biprod.lift_snd, limits.zero_comp],
    simp only [‚Üê functor.map_comp, limits.biprod.lift_snd],
    simp only [functor.map_comp, e‚ÇÇ.w, limits.comp_zero] },
  rw e‚ÇÅ.lift_app_aux_well_defined Œ∑ e‚ÇÅ',
  dsimp [effacement.lift_app_aux],
  simp only [category.assoc, iso.inv_comp_eq],
  apply limits.coequalizer.hom_ext,
  simp only [limits.coequalizer_as_cokernel, limits.cokernel.œÄ_desc_assoc, category.assoc],
  erw limits.cokernel.œÄ_desc_assoc,
  let q : e‚ÇÅ'.ses ‚ü∂ e‚ÇÇ.ses := ‚ü®f, limits.biprod.snd,
    limits.cokernel.desc _ (limits.biprod.snd ‚â´ limits.cokernel.œÄ _) _, _, _‚ü©,
  erw ‚Üê (F.Œ¥ n).naturality_assoc q,
  erw ‚Üê (G.Œ¥ n).naturality q,
  dsimp,
  have : (F.Œ¥ n).app e‚ÇÇ.ses ‚â´ e‚ÇÇ.cokernel_iso.inv = limits.cokernel.œÄ _,
  { rw iso.comp_inv_eq, simp, },
  rw reassoc_of this, clear this,
  simp only [category.assoc, limits.cokernel.œÄ_desc],
  erw ‚Üê nat_trans.naturality_assoc,
  refl,
  { dsimp [e‚ÇÅ'],
    simp },
  { dsimp [e‚ÇÅ', effacement.ses],
    simp },
  { dsimp [e‚ÇÅ', effacement.ses], simp, },
end

lemma effacement.lift_Œ¥_naturality
  {F G : A ‚•§Œ¥ B} {n}
  (Œ∑ : F n ‚ü∂ G n) (S : short_exact_sequence A)
  (e‚ÇÅ : effacement F S.fst n) (e‚ÇÇ : effacement F S.snd n) :
  (F.Œ¥ n).app S ‚â´ e‚ÇÅ.lift_app_aux Œ∑ =
  Œ∑.app _ ‚â´ (G.Œ¥ _).app S :=
begin
  let e‚ÇÅ' : effacement F S.fst n :=
  ‚ü®e‚ÇÇ.I, S.f ‚â´ e‚ÇÇ.Œπ, by simp [e‚ÇÇ.w]‚ü©,
  rw e‚ÇÅ.lift_app_aux_well_defined Œ∑ e‚ÇÅ',
  let q : S ‚ü∂ e‚ÇÅ'.ses :=
    ‚ü®ùüô _, e‚ÇÇ.Œπ, S.exact'.epi_desc (e‚ÇÇ.Œπ ‚â´ limits.cokernel.œÄ _) _, _, _‚ü©,
  dsimp only [effacement.lift_app_aux],
  have : (F.Œ¥ n).app S ‚â´ e‚ÇÅ'.cokernel_iso.inv = (F n).map q.trd ‚â´
    limits.cokernel.œÄ _,
  { rw iso.comp_inv_eq,
    simp,
    erw (F.Œ¥ n).naturality q,
    dsimp,
    simp only [functor.map_id, category.comp_id] },
  slice_lhs 1 2
  { erw this },
  simp only [category.assoc, limits.cokernel.œÄ_desc],
  erw Œ∑.naturality_assoc,
  congr' 1,
  erw (G.Œ¥ n).naturality q, convert category.comp_id _,
  { dsimp, simpa only [functor.map_id], },
  rw ‚Üê category.assoc, exact limits.cokernel.condition _,
  { dsimp, simpa },
  { dsimp, simpa only [exact.comp_epi_desc] }
end

/-- An auxiliary definition used in `lift` below. -/
def effaceable.lift_component (F G : A ‚•§Œ¥ B) [effaceable F] (n) (Œ∑ : F n ‚ü∂ G n) :
  F (n+1) ‚ü∂ G (n+1) :=
{ app := Œª X, (choose_effacement F X n).lift_app_aux Œ∑,
  naturality' := begin
    intros X Y f,
    symmetry,
    apply effacement.lift_naturality,
  end }

/-- The lift of Œ∑0. -/
noncomputable
def effaceable.lift (F G : A ‚•§Œ¥ B) [effaceable F] (Œ∑0 : F 0 ‚ü∂ G 0) : Œ† n, F n ‚ü∂ G n
| 0 := Œ∑0
| (n+1) := effaceable.lift_component _ _ _ (effaceable.lift n)

/-- The lift of Œ∑0, as an actual delta functor. -/
def effaceable.lift_with_Œ¥ (F G : A ‚•§Œ¥ B) [effaceable F] (Œ∑0 : F 0 ‚ü∂ G 0) :
  F ‚ü∂ G :=
{ Œ∑ := effaceable.lift _ _ Œ∑0,
  comm' := begin
    intros n, ext S : 2,
    dsimp,
    rcases n with (_|n),
    { dsimp [effaceable.lift],
      apply effacement.lift_Œ¥_naturality,
      apply choose_effacement },
    { dsimp [effaceable.lift],
      apply effacement.lift_Œ¥_naturality,
      apply choose_effacement },
  end }

lemma effaceable.lift_with_Œ¥_unique (F G : A ‚•§Œ¥ B) [effaceable F] (Œ∑0 : F 0 ‚ü∂ G 0)
  (Œ∑ : F ‚ü∂ G) (hŒ∑ : Œ∑ 0 = Œ∑0) : Œ∑ = effaceable.lift_with_Œ¥ F G Œ∑0 :=
begin
  ext1 n, induction n with n hn,
  { rw hŒ∑, refl },
  { ext T, dsimp [effaceable.lift_with_Œ¥] at ‚ä¢ hn,
    change _ = ((effaceable.lift F G Œ∑0) _).app _,
    dsimp [effaceable.lift],
    change _ = effaceable.lift F G Œ∑0 n at hn,
    erw ‚Üê hn,
    dsimp [effaceable.lift_component],
    dsimp [effacement.lift_app_aux],
    rw iso.eq_inv_comp,
    apply limits.coequalizer.hom_ext,
    dsimp,
    simp only [effacement.cokernel_iso_spec_assoc, limits.cokernel.œÄ_desc],
    have := effacement.lift_Œ¥_naturality (Œ∑ n) ((choose_effacement F T n).ses)
      (choose_effacement _ _ _) (choose_effacement _ _ _),
    erw ‚Üê this, congr' 1,
    dsimp only [effacement.lift_app_aux],
    rw iso.eq_inv_comp,

    apply limits.coequalizer.hom_ext,
    simp only [effacement.cokernel_iso_spec_assoc, limits.cokernel.œÄ_desc],
    clear this,
    have := Œ∑.comm' n,
    apply_fun (Œª e, e.app ((choose_effacement F (choose_effacement F T n).ses.fst n).ses)) at this,
    exact this },
end

end tohoku
open tohoku

theorem universal_of_effaceable (F : A ‚•§Œ¥ B) [effaceable F] : universal F :=
begin
  constructor, intros G Œ∑0,
  use effaceable.lift_with_Œ¥ F G Œ∑0,
  split,
  { ext, refl, },
  { intros Œ∑ hŒ∑, apply effaceable.lift_with_Œ¥_unique, exact hŒ∑, }
end

-- Sketch:
-- TODO: Prove stacks tag 010T. -- DONE!
-- TODO: Construct `Ext^*(-,X)` a delta functor (on objects!).
-- These should be functors `A·µí·µñ ‚•§ Ab` (assuming `A` has enough projectives).
-- Use `010T` to see that `Ext^*(-,X)` is universal.

end delta_functor

end category_theory
