import for_mathlib.exact_seq3
import for_mathlib.bicartesian2
.

open category_theory category_theory.limits

universe u
local notation `ùìê` := Ab.{u}

-- Consider the following diagram
variables {     Kv‚ÇÅ   Kv‚ÇÇ        : ùìê}
variables {Kh‚ÇÅ  A‚ÇÅ‚ÇÅ   A‚ÇÅ‚ÇÇ  Qh‚ÇÅ   : ùìê}
variables {Kh‚ÇÇ  A‚ÇÇ‚ÇÅ   A‚ÇÇ‚ÇÇ  Qh‚ÇÇ   : ùìê}
variables {     Qv‚ÇÅ   Qv‚ÇÇ        : ùìê}
-- with morphisms
variables                         (fKv : Kv‚ÇÅ ‚ü∂ Kv‚ÇÇ)
variables                 {Œπv‚ÇÅ : Kv‚ÇÅ ‚ü∂ A‚ÇÅ‚ÇÅ} {Œπv‚ÇÇ : Kv‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÇ}
variables         {Œπh‚ÇÅ : Kh‚ÇÅ ‚ü∂ A‚ÇÅ‚ÇÅ} {f‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÅ‚ÇÇ} {œÄh‚ÇÅ : A‚ÇÅ‚ÇÇ ‚ü∂ Qh‚ÇÅ}
variables (gKh : Kh‚ÇÅ ‚ü∂ Kh‚ÇÇ) {g‚ÇÅ : A‚ÇÅ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÅ} {g‚ÇÇ : A‚ÇÅ‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÇ} (gQh : Qh‚ÇÅ ‚ü∂ Qh‚ÇÇ)
variables         {Œπh‚ÇÇ : Kh‚ÇÇ ‚ü∂ A‚ÇÇ‚ÇÅ} {f‚ÇÇ : A‚ÇÇ‚ÇÅ ‚ü∂ A‚ÇÇ‚ÇÇ} {œÄh‚ÇÇ : A‚ÇÇ‚ÇÇ ‚ü∂ Qh‚ÇÇ}
variables                 {œÄv‚ÇÅ : A‚ÇÇ‚ÇÅ ‚ü∂ Qv‚ÇÅ}  {œÄv‚ÇÇ : A‚ÇÇ‚ÇÇ ‚ü∂ Qv‚ÇÇ}
variables                         (fQv : Qv‚ÇÅ ‚ü∂ Qv‚ÇÇ)
-- with exact rows and columns
variables (H‚ÇÅ : exact_seq ùìê [Œπh‚ÇÅ, f‚ÇÅ, œÄh‚ÇÅ])
variables (H‚ÇÇ : exact_seq ùìê [Œπh‚ÇÇ, f‚ÇÇ, œÄh‚ÇÇ])
variables (V‚ÇÅ : exact_seq ùìê [Œπv‚ÇÅ, g‚ÇÅ, œÄv‚ÇÅ])
variables (V‚ÇÇ : exact_seq ùìê [Œπv‚ÇÇ, g‚ÇÇ, œÄv‚ÇÇ])
-- and such that all the extremal maps are appropriately monos or epis
variables [mono Œπv‚ÇÅ] [mono Œπv‚ÇÇ] [mono Œπh‚ÇÅ] [mono Œπh‚ÇÇ]
variables [epi œÄv‚ÇÅ] [epi œÄv‚ÇÇ] [epi œÄh‚ÇÅ] [epi œÄh‚ÇÇ]
-- of course the diagram should commute
variables (sq·µ§ : commsq fKv Œπv‚ÇÅ Œπv‚ÇÇ f‚ÇÅ)
variables (sq‚Çó : commsq Œπh‚ÇÅ gKh g‚ÇÅ Œπh‚ÇÇ) (sqm : commsq f‚ÇÅ g‚ÇÅ g‚ÇÇ f‚ÇÇ)
variables (sq·µ£ : commsq œÄh‚ÇÅ g‚ÇÇ gQh œÄh‚ÇÇ)
variables (sq‚Çõ : commsq f‚ÇÇ œÄv‚ÇÅ œÄv‚ÇÇ fQv)

open_locale zero_object
open category_theory.abelian

def is_limit_of_is_limit_comp {X Y Z : ùìê} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  {c : kernel_fork (f ‚â´ g)} (hc : is_limit c) (h : c.Œπ ‚â´ f = 0) :
  is_limit (kernel_fork.of_Œπ c.Œπ h) :=
kernel_fork.is_limit.of_Œπ _ _
  (Œª T l hl, hc.lift (kernel_fork.of_Œπ l (by rw [reassoc_of hl, zero_comp])))
  (Œª T l hl, hc.fac _ _)
  (Œª T l hl m hm, fork.is_limit.hom_ext hc (by { erw [hm, hc.fac], refl }))

def is_colimit_of_is_colimit_comp {X Y Z : ùìê} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  {c : cokernel_cofork (f ‚â´ g)} (hc : is_colimit c) (h : g ‚â´ c.œÄ = 0) :
  is_colimit (cokernel_cofork.of_œÄ c.œÄ h) :=
cokernel_cofork.is_colimit.of_œÄ _ _
  (Œª T l hl, hc.desc (cokernel_cofork.of_œÄ l (by rw [category.assoc, hl, comp_zero])))
  (Œª T l hl, hc.fac _ _)
  (Œª T l hl m hm, cofork.is_colimit.hom_ext hc (by { erw [hm, hc.fac], refl }))

section
include sq‚Çó sqm

lemma is_iso_of_is_limit (H‚ÇÅ : exact Œπh‚ÇÅ f‚ÇÅ) (H‚ÇÇ : exact Œπh‚ÇÇ f‚ÇÇ)
  (h : is_limit (pullback_cone.mk f‚ÇÅ g‚ÇÅ sqm.w)) : is_iso gKh :=
begin
  haveI : mono gKh,
  { refine preadditive.mono_of_cancel_zero _ (Œª P g hg, _),
    apply zero_of_comp_mono Œπh‚ÇÅ,
    apply pullback_cone.is_limit.hom_ext h,
    { rw [pullback_cone.mk_fst, category.assoc, zero_comp, H‚ÇÅ.w, comp_zero] },
    { rw [pullback_cone.mk_snd, category.assoc, sq‚Çó.w, ‚Üê category.assoc, hg, zero_comp,
        zero_comp] } },
  obtain ‚ü®l, hl‚ÇÅ, hl‚ÇÇ : l ‚â´ g‚ÇÅ = _‚ü© :=
    pullback_cone.is_limit.lift' h 0 Œπh‚ÇÇ (by simp [H‚ÇÇ.w]),
  let ker := is_limit_of_exact_of_mono _ _ H‚ÇÅ,
  obtain ‚ü®inv, hinv : inv ‚â´ Œπh‚ÇÅ = l‚ü© := kernel_fork.is_limit.lift' ker l hl‚ÇÅ,
  have hinv' : inv ‚â´ gKh = ùüô _,
   { rw [‚Üê cancel_mono Œπh‚ÇÇ, category.assoc, ‚Üê sq‚Çó.w, reassoc_of hinv, hl‚ÇÇ, category.id_comp] },
  refine ‚ü®‚ü®inv, _, hinv'‚ü©‚ü©,
  rw [‚Üê cancel_mono gKh, category.assoc, hinv', category.comp_id, category.id_comp]
end

end

section
include sqm sq·µ£

lemma is_iso_of_is_colimit (H‚ÇÅ : exact f‚ÇÅ œÄh‚ÇÅ) (H‚ÇÇ : exact f‚ÇÇ œÄh‚ÇÇ)
  (h : is_colimit (pushout_cocone.mk _ _ sqm.w)) : is_iso gQh :=
begin
  haveI : epi gQh,
  { refine preadditive.epi_of_cancel_zero _ (Œª P g hg, _),
    apply zero_of_epi_comp œÄh‚ÇÇ,
    apply pushout_cocone.is_colimit.hom_ext h,
    { rw [pushout_cocone.mk_inl, ‚Üê category.assoc, ‚Üê sq·µ£.w, category.assoc, hg, comp_zero,
        comp_zero] },
    { rw [pushout_cocone.mk_inr, ‚Üê category.assoc, H‚ÇÇ.w, comp_zero, zero_comp] } },
  obtain ‚ü®l, hl‚ÇÅ : g‚ÇÇ ‚â´ l = _, hl‚ÇÇ‚ü© :=
    pushout_cocone.is_colimit.desc' h œÄh‚ÇÅ 0 (by simp [H‚ÇÅ.w]),
  let coker := is_colimit_of_exact_of_epi _ _ H‚ÇÇ,
  obtain ‚ü®inv, hinv : œÄh‚ÇÇ ‚â´ inv = l‚ü© := cokernel_cofork.is_colimit.desc' coker l hl‚ÇÇ,
  have hinv' : gQh ‚â´ inv = ùüô _,
  { rw [‚Üê cancel_epi œÄh‚ÇÅ, ‚Üê category.assoc, sq·µ£.w, category.assoc, hinv, hl‚ÇÅ, category.comp_id] },
  refine ‚ü®‚ü®inv, hinv', _‚ü©‚ü©,
  rw [‚Üê cancel_epi gQh, reassoc_of hinv', category.comp_id]
end

end

include H‚ÇÅ H‚ÇÇ sq‚Çó sqm sq·µ£

lemma commsq.bicartesian_iff_isos : sqm.bicartesian ‚Üî (is_iso gKh ‚àß is_iso gQh) :=
begin
  split,
  { intro h, split,
    { exact is_iso_of_is_limit gKh sq‚Çó sqm ((exact_iff_exact_seq _ _).2 (H‚ÇÅ.extract 0 2))
      ((exact_iff_exact_seq _ _).2 (H‚ÇÇ.extract 0 2)) h.is_limit },
    { exact is_iso_of_is_colimit gQh sqm sq·µ£ ((exact_iff_exact_seq _ _).2 (H‚ÇÅ.extract 1 2))
      ((exact_iff_exact_seq _ _).2 (H‚ÇÇ.extract 1 2)) h.is_colimit } },
  { rintros ‚ü®gKh_iso, gQh_iso‚ü©,
    resetI,
    apply commsq.bicartesian.of_is_limit_of_is_colimt,
    { apply is_limit.of_point_iso (limit.is_limit _),
      { apply_instance },
      { let r := pullback.lift _ _ sqm.w,
        let x : Kh‚ÇÅ ‚ü∂ kernel (pullback.fst : pullback g‚ÇÇ f‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÇ),
        { refine kernel.lift _ (Œπh‚ÇÅ ‚â´ r) _,
          simp only [(H‚ÇÅ.extract 0 2).w, category.assoc, pullback.lift_fst] },
        haveI : is_iso x,
        { let psq := commsq.of_eq (@pullback.condition _ _ _ _ _ g‚ÇÇ f‚ÇÇ _),
          let hker := abelian.is_limit_of_exact_of_mono _ _
            ((exact_iff_exact_seq _ _).2 (H‚ÇÇ.extract 0 2)),
          obtain ‚ü®u : _ ‚ü∂ Kh‚ÇÇ, hu‚ü© := kernel_fork.is_limit.lift' hker
            (kernel.Œπ (pullback.fst : pullback g‚ÇÇ f‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÇ) ‚â´ pullback.snd) _,
          { rw fork.Œπ_of_Œπ at hu,
            let lsq := commsq.of_eq hu.symm,
            haveI : is_iso u := is_iso_of_is_limit u lsq psq _ _ _,
            { have hxu : x ‚â´ u = gKh,
              { simp only [‚Üê cancel_mono Œπh‚ÇÇ, category.assoc, hu, x, kernel.lift_Œπ_assoc, r,
                pullback.lift_snd, sq‚Çó.w] },
              have hx : x = gKh ‚â´ inv u,
              { rw [‚Üê is_iso.comp_inv_eq, is_iso.inv_inv, hxu] },
              rw hx,
              apply_instance },
            { exact exact_kernel_Œπ },
            { exact ((exact_iff_exact_seq _ _).2 (H‚ÇÇ.extract 0 2)) },
            { exact pullback_is_pullback _ _ } },
          { rw [category.assoc, ‚Üê pullback.condition, kernel.condition_assoc, zero_comp] } },
        refine @abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso _ _ _ 0 _ _ _ 0 _ _ _
         0 Œπh‚ÇÅ f‚ÇÅ 0 (kernel.Œπ (pullback.fst : pullback g‚ÇÇ f‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÇ)) pullback.fst 0 x r (ùüô _)
         _ _ _ _ _ œÄh‚ÇÅ œÄh‚ÇÅ (ùüô _) _ _ _ _ _ _ _ _ _ _ _,
        { simp only [eq_iff_true_of_subsingleton] },
        { simp only [kernel.lift_Œπ] },
        { simp only [pullback.lift_fst, category.comp_id] },
        { simp only [category.id_comp, category.comp_id] },
        { exact exact_zero_mono Œπh‚ÇÅ },
        { exact (exact_iff_exact_seq _ _).2 (H‚ÇÅ.extract 0 2) },
        { exact (exact_iff_exact_seq _ _).2 (H‚ÇÅ.extract 1 2) },
        { exact exact_zero_mono (kernel.Œπ pullback.fst) },
        { exact exact_kernel_Œπ },
        { have : (pullback.fst : pullback g‚ÇÇ f‚ÇÇ ‚ü∂ A‚ÇÅ‚ÇÇ) ‚â´ œÄh‚ÇÅ = 0,
          { apply zero_of_comp_mono gQh,
            rw [category.assoc, sq·µ£.w, pullback.condition_assoc, (H‚ÇÇ.extract 1 2).w, comp_zero] },
          apply abelian.exact_of_is_cokernel _ _ this,
          have hex := (exact_iff_exact_seq _ _).2 (H‚ÇÅ.extract 1 2),
          rw ‚Üê pullback.lift_fst _ _ sqm.w at hex,
          exact is_colimit_of_is_colimit_comp (abelian.is_colimit_of_exact_of_epi _ _ hex) _ } } },
    { apply is_colimit.of_point_iso (colimit.is_colimit _),
      { apply_instance },
      { let r := pushout.desc _ _ sqm.w,
        let x : cokernel (pushout.inr : A‚ÇÇ‚ÇÅ ‚ü∂ pushout f‚ÇÅ g‚ÇÅ) ‚ü∂ Qh‚ÇÇ,
        { refine cokernel.desc _ (r ‚â´ œÄh‚ÇÇ) _,
          simp only [(H‚ÇÇ.extract 1 2).w, ‚Üê category.assoc, pushout.inr_desc] },
        haveI : is_iso x,
        { let psq := commsq.of_eq (@pushout.condition _ _ _ _ _ f‚ÇÅ g‚ÇÅ _),
          let hcoker := abelian.is_colimit_of_exact_of_epi _ _
            ((exact_iff_exact_seq _ _).2 (H‚ÇÅ.extract 1 2)),
          obtain ‚ü®u : Qh‚ÇÅ ‚ü∂ _, hu‚ü© := cokernel_cofork.is_colimit.desc' hcoker
            (pushout.inl ‚â´ (cokernel.œÄ (pushout.inr : A‚ÇÇ‚ÇÅ ‚ü∂ pushout f‚ÇÅ g‚ÇÅ))) _,
          { rw cofork.œÄ_of_œÄ at hu,
            let lsq := commsq.of_eq hu,
            haveI : is_iso u := is_iso_of_is_colimit u psq lsq _ _ _,
            { have hxu : u ‚â´ x = gQh,
              { simp only [‚Üê cancel_epi œÄh‚ÇÅ, hu, x, cokernel.œÄ_desc, reassoc_of hu, r,
                  pushout.inl_desc_assoc, sq·µ£.w] },
              have hx : x = inv u ‚â´ gQh,
              { rw [‚Üê is_iso.inv_comp_eq, is_iso.inv_inv, hxu] },
              rw hx,
              apply_instance },
            { exact ((exact_iff_exact_seq _ _).2 (H‚ÇÅ.extract 1 2)) },
            { exact exact_cokernel pushout.inr },
            { exact pushout_is_pushout _ _ } },
          { rw [‚Üê category.assoc, pushout.condition, category.assoc, cokernel.condition,
              comp_zero] } },
        refine @abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso _ _ _ _ _ _ _ _ _ _ _
          Œπh‚ÇÇ (pushout.inr : A‚ÇÇ‚ÇÅ ‚ü∂ pushout f‚ÇÅ g‚ÇÅ) (cokernel.œÄ (pushout.inr : A‚ÇÇ‚ÇÅ ‚ü∂ pushout f‚ÇÅ g‚ÇÅ))
          Œπh‚ÇÇ f‚ÇÇ œÄh‚ÇÇ (ùüô _) (ùüô _) r x _ _ _ 0 0 0 0 0 _ _ _ _ _ _ _ _ _ _ _,
        { simp only [category.id_comp, category.comp_id] },
        { simp only [category.id_comp, pushout.inr_desc] },
        { simp only [cokernel.œÄ_desc] },
        { simp only [eq_iff_true_of_subsingleton] },
        { have : Œπh‚ÇÇ ‚â´ (pushout.inr : A‚ÇÇ‚ÇÅ ‚ü∂ pushout f‚ÇÅ g‚ÇÅ) = 0,
          { apply zero_of_epi_comp gKh,
            rw [‚Üê sq‚Çó.w_assoc, ‚Üê pushout.condition, reassoc_of (H‚ÇÅ.extract 0 2).w, zero_comp] },
          apply abelian.exact_of_is_kernel _ _ this,
          have hex := (exact_iff_exact_seq _ _).2 (H‚ÇÇ.extract 0 2),
          rw ‚Üê pushout.inr_desc _ _ sqm.w at hex,
          exact is_limit_of_is_limit_comp (abelian.is_limit_of_exact_of_mono _ _ hex) _ },
        { exact exact_cokernel pushout.inr },
        { exact exact_epi_zero (cokernel.œÄ pushout.inr) },
        { exact ((exact_iff_exact_seq _ _).2 (H‚ÇÇ.extract 0 2)) },
        { exact ((exact_iff_exact_seq _ _).2 (H‚ÇÇ.extract 1 2)) },
        { exact exact_epi_zero œÄh‚ÇÇ } } } }
end
