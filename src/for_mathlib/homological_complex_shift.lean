import category_theory.shift
import algebra.homology.homological_complex
import algebra.homology.homotopy_category
import data.int.parity
import category_theory.arrow
import category_theory.preadditive
import tactic.ring

import for_mathlib.homology_iso
import for_mathlib.neg_one_pow

local attribute [simp] category_theory.preadditive.zsmul_comp category_theory.preadditive.comp_zsmul

universes v u

open category_theory category_theory.limits category_theory.preadditive

variables (V : Type u) [category.{v} V] [preadditive V]

namespace homological_complex

lemma complex_shape.up'_add_right_cancel {Œ± : Type*} [add_cancel_comm_monoid Œ±] (a : Œ±)
  {i j} (k : Œ±) : (complex_shape.up' a).rel (i+k) (j+k) ‚Üî (complex_shape.up' a).rel i j :=
by { dsimp, rw [add_assoc, add_comm k a, ‚Üê add_assoc], exact add_left_inj _ }

lemma complex_shape.up_add_right_cancel {Œ± : Type*} [add_cancel_comm_monoid Œ±] [has_one Œ±]
  {i j} (k : Œ±) : (complex_shape.up Œ±).rel (i+k) (j+k) ‚Üî (complex_shape.up Œ±).rel i j :=
complex_shape.up'_add_right_cancel 1 k

@[simps]
def shift_functor (n : ‚Ñ§) : cochain_complex V ‚Ñ§ ‚•§ cochain_complex V ‚Ñ§ :=
{ obj := Œª X,
  { X := Œª i, X.X (i + n),
    d := Œª i j, n.neg_one_pow ‚Ä¢ X.d _ _,
    shape' := Œª i j h, by { rw [X.shape (i+n) (j+n), smul_zero],
      rwa complex_shape.up_add_right_cancel } },
  map := Œª X Y f, { f := Œª i, f.f _ } }

variables {V} {Œπ : Type*} {c : complex_shape Œπ}

def X_eq_to_iso (X : homological_complex V c) {i j : Œπ} (h : i = j) : X.X i ‚âÖ X.X j :=
eq_to_iso $ congr_arg X.X h

@[simp]
lemma X_eq_to_iso_inv (X : homological_complex V c) {i j : Œπ} (h : i = j) :
  (X.X_eq_to_iso h).inv = (X.X_eq_to_iso h.symm).hom := rfl

@[simp, reassoc]
lemma X_eq_to_iso_d (X : homological_complex V c) {i j k : Œπ} (h : i = j) :
  (X.X_eq_to_iso h).hom ‚â´ X.d j k = X.d i k := by { subst h, exact category.id_comp _ }

@[simp, reassoc]
lemma X_d_eq_to_iso (X : homological_complex V c) {i j k : Œπ} (h : j = k) :
  X.d i j ‚â´ (X.X_eq_to_iso h).hom = X.d i k := by { subst h, exact category.comp_id _ }

@[simp, reassoc]
lemma X_eq_to_iso_trans (X : homological_complex V c) {i j k : Œπ} (h : i = j) (h' : j = k) :
  (X.X_eq_to_iso h).hom ‚â´ (X.X_eq_to_iso h').hom = (X.X_eq_to_iso (h.trans h')).hom :=
by { simp [X_eq_to_iso] }

@[simp]
lemma X_eq_to_iso_refl (X : homological_complex V c) {i : Œπ} :
  (X.X_eq_to_iso (refl i)).hom = ùüô _ := rfl

@[simp, reassoc]
lemma X_eq_to_iso_f {X Y : homological_complex V c} (f : X ‚ü∂ Y) {i j : Œπ} (h : i = j) :
  (X.X_eq_to_iso h).hom ‚â´ f.f j = f.f i ‚â´ (Y.X_eq_to_iso h).hom :=
by { subst h, simp [X_eq_to_iso] }

variables (V)

instance : has_shift (cochain_complex V ‚Ñ§) ‚Ñ§ :=
has_shift_mk _ _
{ F := shift_functor V,
  Œµ := nat_iso.of_components (Œª X, hom.iso_of_components (Œª i, X.X_eq_to_iso (add_zero _).symm)
    (Œª i j r, by { dsimp, simp })) (Œª X Y f, by { ext, dsimp, simp }),
  Œº := Œª n m, nat_iso.of_components (Œª X, hom.iso_of_components
    (Œª i, X.X_eq_to_iso (by rw [add_comm n m, add_assoc]))
    (Œª i j r, by { dsimp, simp [smul_smul, mul_comm] })) (Œª i j f, by { ext, dsimp, simp }),
  associativity := Œª m‚ÇÅ m‚ÇÇ m‚ÇÉ X, by { ext, dsimp, simp [X_eq_to_iso] },
  left_unitality := Œª n X, by { ext, dsimp, simpa [X_eq_to_iso] },
  right_unitality := Œª n X, by { ext, dsimp, simpa [X_eq_to_iso] } }

local attribute[instance] endofunctor_monoidal_category

@[simp] lemma shift_X (X : cochain_complex V ‚Ñ§) (n m : ‚Ñ§) :
  (X‚ü¶n‚üß).X m = X.X (m + n) := rfl

@[simp] lemma shift_d (X : cochain_complex V ‚Ñ§) (n i j : ‚Ñ§) :
  (X‚ü¶n‚üß).d i j = n.neg_one_pow ‚Ä¢ X.d (i + n) (j + n) := rfl

@[simp] lemma shift_f {X Y : cochain_complex V ‚Ñ§} (f : X ‚ü∂ Y) (n i : ‚Ñ§) :
  (f‚ü¶n‚üß').f i = f.f (i + n) := rfl

instance (n : ‚Ñ§) : functor.additive ((shift_monoidal_functor (cochain_complex V ‚Ñ§) ‚Ñ§).obj ‚ü®n‚ü©) :=
  {}
instance shift_functor_additive (n : ‚Ñ§) : functor.additive (shift_functor V n) := {}

variable {V}

def homotopy_shift {X Y : cochain_complex V ‚Ñ§} {f g : X ‚ü∂ Y} (h : homotopy f g) (n : ‚Ñ§)  :
  homotopy (f‚ü¶n‚üß') (g‚ü¶n‚üß') :=
{ hom := Œª i j, n.neg_one_pow ‚Ä¢ h.hom _ _,
  zero' := Œª i j r, by { rw ‚Üê complex_shape.up_add_right_cancel n at r, simp [h.zero _ _ r] },
  comm := Œª i, begin
    dsimp,
    suffices : X.d (i + n) (i + n + 1) ‚â´ h.hom (i + n + 1) (i + n) +
      h.hom (i + n) (i + n - 1) ‚â´ Y.d (i + n - 1) (i + n) =
      X.d (i + n) (i + 1 + n) ‚â´ h.hom (i + 1 + n) (i + n) +
      h.hom (i + n) (i - 1 + n) ‚â´ Y.d (i - 1 + n) (i + n),
    { simpa [h.comm (i+n), d_next, prev_d, add_right_inj] },
    congr' 3; ring,
  end }

variable (V)

def homotopy_category.shift_functor (n : ‚Ñ§) :
  (homotopy_category V (complex_shape.up ‚Ñ§)) ‚•§ (homotopy_category V (complex_shape.up ‚Ñ§)) :=
category_theory.quotient.lift _ (shift_functor _ n ‚ãô homotopy_category.quotient _ _)
begin
  rintros X Y f g ‚ü®h‚ü©,
  apply homotopy_category.eq_of_homotopy,
  exact homotopy_shift h n,
end

def homotopy_category.shift_Œµ :
  ùü≠ _ ‚âÖ homotopy_category.shift_functor V 0 :=
begin
  refine nat_iso.of_components _ _,
  { rintro ‚ü®X‚ü©,
    refine (homotopy_category.quotient _ _).map_iso (hom.iso_of_components _ _),
    exact (Œª i, X.X_eq_to_iso (add_zero _).symm),
    { introv, dsimp, simp } },
  { rintro ‚ü®X‚ü© ‚ü®Y‚ü© f, dsimp,
    rw ‚Üê homotopy_category.quotient_map_out f,
    erw quotient.lift_map_functor_map,
    simp only [functor.comp_map, ‚Üê functor.map_comp],
    congr' 1, ext, dsimp, simp }
end

def homotopy_category.shift_functor_add (n m : ‚Ñ§) :
  homotopy_category.shift_functor V n ‚ãô homotopy_category.shift_functor V m ‚âÖ
    homotopy_category.shift_functor V (n + m) :=
begin
  refine nat_iso.of_components _ _,
  { rintro ‚ü®X‚ü©,
    refine (homotopy_category.quotient _ _).map_iso (hom.iso_of_components _ _),
    exact (Œª i, X.X_eq_to_iso (by rw [add_comm n m, add_assoc])),
    { introv r, dsimp [homotopy_category.shift_functor], simp [smul_smul, mul_comm] } },
  { rintro ‚ü®X‚ü© ‚ü®Y‚ü© f, dsimp,
    rw ‚Üê homotopy_category.quotient_map_out f,
    erw quotient.lift_map_functor_map,
    conv_rhs { erw quotient.lift_map_functor_map },
    simp only [functor.comp_map, ‚Üê functor.map_comp],
    congr' 1, ext, dsimp, simp }
end

@[simp]
lemma homotopy_category.shift_functor_obj_as {X : cochain_complex V ‚Ñ§} (n : ‚Ñ§) :
  (homotopy_category.shift_functor V n).obj ‚ü®X‚ü© = ‚ü®X‚ü¶n‚üß‚ü© := rfl

@[simp]
lemma homotopy_category.shift_functor_map_quotient (n : ‚Ñ§) {X Y : cochain_complex V ‚Ñ§} (f : X ‚ü∂ Y) :
  (homotopy_category.shift_functor V n).map ((homotopy_category.quotient V _).map f) =
  (homotopy_category.quotient V _).map (f‚ü¶n‚üß') := rfl

lemma quotient_eq_to_hom {X Y : homotopy_category V (complex_shape.up ‚Ñ§)} (h : X = Y) :
  eq_to_hom h = (homotopy_category.quotient V (complex_shape.up ‚Ñ§)).map (eq_to_hom (by rw h)) :=
by { subst h, simpa }

lemma homotopy_category.has_shift_associativity_aux :
  ‚àÄ (m‚ÇÅ m‚ÇÇ m‚ÇÉ : ‚Ñ§) (X : homotopy_category V (complex_shape.up ‚Ñ§)),
    (homotopy_category.shift_functor V m‚ÇÉ).map
          ((homotopy_category.shift_functor_add V m‚ÇÅ m‚ÇÇ).hom.app X) ‚â´
        (homotopy_category.shift_functor_add V (m‚ÇÅ + m‚ÇÇ) m‚ÇÉ).hom.app X ‚â´
          eq_to_hom (by rw add_assoc) =
      (homotopy_category.shift_functor_add V m‚ÇÇ m‚ÇÉ).hom.app
          ((homotopy_category.shift_functor V m‚ÇÅ).obj X) ‚â´
        (homotopy_category.shift_functor_add V m‚ÇÅ (m‚ÇÇ + m‚ÇÉ)).hom.app X :=
Œª m‚ÇÅ m‚ÇÇ m‚ÇÉ ‚ü®X‚ü©, by { dsimp [homotopy_category.shift_functor_add],
  rw quotient_eq_to_hom, simp only [‚Üê functor.map_comp], congr' 1, ext, simp [X_eq_to_iso] }

lemma homotopy_category.has_shift_left_unitality_aux :
  ‚àÄ (n : ‚Ñ§) (X : homotopy_category V (complex_shape.up ‚Ñ§)),
    (homotopy_category.shift_functor V n).map
          ((homotopy_category.shift_Œµ V).hom.app X) ‚â´
        (homotopy_category.shift_functor_add V 0 n).hom.app X =
      eq_to_hom (by { dsimp, rw zero_add }) :=
Œª n ‚ü®X‚ü©, by { dsimp [homotopy_category.shift_Œµ,
  homotopy_category.shift_functor_add], rw quotient_eq_to_hom, simp only [‚Üê functor.map_comp],
  congr' 1, ext, simp [X_eq_to_iso] }

lemma homotopy_category.has_shift_right_unitality_aux :
  ‚àÄ (n : ‚Ñ§) (X : homotopy_category V (complex_shape.up ‚Ñ§)),
    (homotopy_category.shift_Œµ V).hom.app
          ((homotopy_category.shift_functor V n).obj X) ‚â´
        (homotopy_category.shift_functor_add V n 0).hom.app X =
      eq_to_hom (by { dsimp, rw add_zero }) :=
Œª n ‚ü®X‚ü©, by { dsimp [homotopy_category.shift_Œµ,
  homotopy_category.shift_functor_add], rw quotient_eq_to_hom, simp only [‚Üê functor.map_comp],
  congr' 1, ext, simp [X_eq_to_iso] }

instance homotopy_category.has_shift : has_shift (homotopy_category V (complex_shape.up ‚Ñ§)) ‚Ñ§ :=
has_shift_mk _ _
{ F := homotopy_category.shift_functor V,
  Œµ := homotopy_category.shift_Œµ V,
  Œº := homotopy_category.shift_functor_add V,
  associativity := by simpa using homotopy_category.has_shift_associativity_aux _,
  left_unitality := by simpa using homotopy_category.has_shift_left_unitality_aux _,
  right_unitality := by simpa using homotopy_category.has_shift_right_unitality_aux _ }

@[simp] lemma homotopy_category.quotient_obj_shift (X : cochain_complex V ‚Ñ§) (n : ‚Ñ§) :
  ((homotopy_category.quotient V _).obj X)‚ü¶n‚üß = ‚ü®X‚ü¶n‚üß‚ü© := rfl

@[simp] lemma homotopy_category.shift_as (X : homotopy_category V (complex_shape.up ‚Ñ§)) (n : ‚Ñ§) :
  (X‚ü¶n‚üß).as = X.as‚ü¶n‚üß := rfl

@[simp] lemma homotopy_category.quotient_map_shift {X Y : cochain_complex V ‚Ñ§} (f : X ‚ü∂ Y) (n : ‚Ñ§) :
  ((homotopy_category.quotient V _).map f)‚ü¶n‚üß' = (homotopy_category.quotient V _).map (f‚ü¶n‚üß') := rfl

@[simp] lemma shift_Œµ_app (X : cochain_complex V ‚Ñ§) :
  (shift_monoidal_functor _ ‚Ñ§).Œµ.app ((homotopy_category.quotient _ _).obj X) =
    (homotopy_category.quotient _ _).map ((shift_monoidal_functor _ ‚Ñ§).Œµ.app X) := rfl

@[simp]
lemma shift_Œµ_inv_app (X : cochain_complex V ‚Ñ§) :
  (shift_monoidal_functor _ ‚Ñ§).Œµ_iso.inv.app ((homotopy_category.quotient _ _).obj X) =
    (homotopy_category.quotient _ _).map ((shift_monoidal_functor _ ‚Ñ§).Œµ_iso.inv.app X) :=
begin
  rw [‚Üê cancel_mono ((shift_monoidal_functor _ ‚Ñ§).Œµ.app ((homotopy_category.quotient _ _).obj X)),
    Œµ_inv_hom_app, shift_Œµ_app, ‚Üê functor.map_comp, Œµ_inv_hom_app],
  refl
end

@[simp] lemma shift_Œº_app (i j : ‚Ñ§) (X : cochain_complex V ‚Ñ§) :
  ((shift_monoidal_functor _ ‚Ñ§).Œº ‚ü®i‚ü© ‚ü®j‚ü©).app ((homotopy_category.quotient _ _).obj X) =
    (homotopy_category.quotient _ _).map (((shift_monoidal_functor _ ‚Ñ§).Œº ‚ü®i‚ü© ‚ü®j‚ü©).app X) := rfl

@[simp]
lemma shift_Œº_inv_app (i j : ‚Ñ§) (X : cochain_complex V ‚Ñ§) :
  ((shift_monoidal_functor _ ‚Ñ§).Œº_iso ‚ü®i‚ü© ‚ü®j‚ü©).inv.app ((homotopy_category.quotient _ _).obj X) =
    (homotopy_category.quotient _ _).map (((shift_monoidal_functor _ ‚Ñ§).Œº_iso ‚ü®i‚ü© ‚ü®j‚ü©).inv.app X) :=
begin
  rw [‚Üê cancel_mono (((shift_monoidal_functor _ ‚Ñ§).Œº ‚ü®i‚ü© ‚ü®j‚ü©).app
      ((homotopy_category.quotient _ _).obj X)),
    Œº_inv_hom_app, shift_Œº_app, ‚Üê functor.map_comp, Œº_inv_hom_app],
  refl
end
local attribute [reducible] discrete.add_monoidal

@[simp] lemma shift_Œº_hom_app_f (A : cochain_complex V ‚Ñ§) (i j k : ‚Ñ§) :
  hom.f (((shift_monoidal_functor _ ‚Ñ§).Œº ‚ü®i‚ü© ‚ü®j‚ü©).app A) k =
    (A.X_eq_to_iso $ by { dsimp, ring }).hom := rfl

@[simp] lemma shift_Œº_inv_app_f (A : cochain_complex V ‚Ñ§) (i j k : ‚Ñ§) :
  hom.f (((shift_monoidal_functor _ ‚Ñ§).Œº_iso ‚ü®i‚ü© ‚ü®j‚ü©).inv.app A) k =
    (A.X_eq_to_iso $ by { dsimp, ring }).hom :=
begin
  generalize_proofs h,
  rw ‚Üê cancel_epi (A.X_eq_to_iso h.symm).hom,
  conv_lhs { rw [‚Üê shift_Œº_hom_app_f, ‚Üê comp_f] },
  simpa [-comp_f]
end

@[simp] lemma shift_Œµ_hom_app_f (A : cochain_complex V ‚Ñ§) (i : ‚Ñ§) :
  hom.f ((shift_monoidal_functor _ ‚Ñ§).Œµ.app A) i = (A.X_eq_to_iso $ by { dsimp, ring }).hom :=
rfl

@[simp]
lemma shift_Œµ_inv_app_f (A : cochain_complex V ‚Ñ§) (i : ‚Ñ§) :
  hom.f ((shift_monoidal_functor _ ‚Ñ§).Œµ_iso.inv.app A) i =
    (A.X_eq_to_iso $ by { dsimp, ring }).hom :=
begin
  haveI : epi (hom.f ((shift_monoidal_functor _ ‚Ñ§).Œµ.app A) i),
  { rw shift_Œµ_hom_app_f, apply_instance },
  rw [‚Üê cancel_epi (hom.f ((shift_monoidal_functor _ ‚Ñ§).Œµ.app A) i), ‚Üê comp_f,
    category_theory.Œµ_hom_inv_app, homological_complex.id_f],
  dsimp, simpa
end

open category_theory.abelian
variables {A : Type u} [category.{v} A] [abelian A]

noncomputable
def homology_shift_obj_iso (X : cochain_complex A ‚Ñ§) (i j : ‚Ñ§) :
  (homology_functor _ _ j).obj (X‚ü¶i‚üß) ‚âÖ (homology_functor _ _ (j + i)).obj X :=
begin
  refine homology_iso _ (j-1) j (j+1) _ _ ‚â™‚â´ _ ‚â™‚â´
    (homology_iso _ (j - 1 + i) (j+i) (j+1+i) _ _).symm,
  { simp },
  { simp },
  { exact homology.map_iso _ _
      (int.neg_one_pow_arrow_iso_left _ _).symm (int.neg_one_pow_arrow_iso_right _ _).symm rfl },
  { dsimp, abel },
  { dsimp, abel },
end

@[simp, reassoc]
lemma homology.œÄ'_Œπ {X Y Z : A} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (w : f ‚â´ g = 0) :
  homology.œÄ' f g w ‚â´ homology.Œπ f g w = kernel.Œπ g ‚â´ cokernel.œÄ f :=
by { delta homology.œÄ' homology.Œπ homology_iso_kernel_desc, simp }

@[simp, reassoc]
lemma homology.desc'_Œπ {X X' Y Z Z' : A} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (w : f ‚â´ g = 0)
  (f' : X' ‚ü∂ Y) (g' : Y ‚ü∂ Z') (w' : f' ‚â´ g' = 0) (h‚ÇÅ) (h‚ÇÇ) (h‚ÇÉ) :
  homology.desc' _ _ w (kernel.lift _ (kernel.Œπ _) h‚ÇÅ ‚â´ homology.œÄ' _ _ _) h‚ÇÇ ‚â´
  homology.Œπ _ _ w' = homology.Œπ _ _ _ ‚â´ cokernel.desc _ (cokernel.œÄ _) h‚ÇÉ :=
by { ext, simp, }

@[simp, reassoc]
lemma homology.œÄ'_lift {X X' Y Z Z' : A} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (w : f ‚â´ g = 0)
  (f' : X' ‚ü∂ Y) (g' : Y ‚ü∂ Z') (w' : f' ‚â´ g' = 0) (h‚ÇÅ) (h‚ÇÇ) (h‚ÇÉ) :
  homology.œÄ' _ _ w ‚â´ homology.lift _ _ w' (homology.Œπ _ _ _ ‚â´
    cokernel.desc _ (cokernel.œÄ _) h‚ÇÅ) h‚ÇÇ =
  kernel.lift _ (kernel.Œπ _) h‚ÇÉ ‚â´ homology.œÄ' _ _ _ :=
by { ext, simp }

variable (A)

@[simp]
lemma shift_functor_eq (V : Type*) [category V] [preadditive V] (i) :
  homological_complex.shift_functor V i = category_theory.shift_functor _ i := rfl

noncomputable
def homology_shift_iso (i j : ‚Ñ§) :
  shift_functor _ i ‚ãô homology_functor A (complex_shape.up ‚Ñ§) j ‚âÖ
    homology_functor A (complex_shape.up ‚Ñ§) (j + i) :=
nat_iso.of_components (Œª X, homology_shift_obj_iso X i j : _)
begin
  intros X Y f,
  ext,
  dsimp [homology_shift_obj_iso, homology_iso, homology.map_iso],
  simp,
end

end homological_complex
