import rescale.basic
import locally_constant.Vhat

import category_theory.preadditive.additive_functor

import facts.nnreal

noncomputable theory
open_locale big_operators classical nnreal

namespace rescale

variables {N : ‚Ñù‚â•0} {V : Type*}

instance [has_norm V] : has_norm (rescale N V) :=
{ norm := Œª v, ‚à•of.symm v‚à•/N }

lemma norm_def [has_norm V] (v : rescale N V) : ‚à•v‚à• = ‚à•of.symm v‚à•/N := rfl

instance [hN : fact (0 < N)] [seminormed_add_comm_group V] : seminormed_add_comm_group (rescale N V) :=
seminormed_add_comm_group.of_core (rescale N V)
{ norm_zero := show ‚à•(0 : V)‚à•/N = 0, by rw [norm_zero, zero_div],
  triangle := Œª v w,
  begin
    simp only [norm_def, ‚Üê add_div],
    exact div_le_div_of_le hN.out.le (norm_add_le _ _), -- defeq abuse
  end,
  norm_neg := Œª v, by { simp only [norm_def], congr' 1, exact norm_neg _ /- defeq abuse -/ } }

instance [hN : fact (0 < N)] [normed_add_comm_group V] : normed_add_comm_group (rescale N V) :=
normed_add_comm_group.of_core (rescale N V)
{ norm_eq_zero_iff := Œª v,
  begin
    have aux : (N:‚Ñù) ‚â† 0 := ne_of_gt hN.out,
    simp only [norm_def, div_eq_zero_iff, aux, or_false],
    exact norm_eq_zero -- defeq abuse
  end,
  triangle := Œª v w,
  begin
    simp only [norm_def, ‚Üê add_div],
    exact div_le_div_of_le hN.out.le (norm_add_le _ _), -- defeq abuse
  end,
  norm_neg := Œª v, by { simp only [norm_def], congr' 1, exact norm_neg _ /- defeq abuse -/ } }

lemma nnnorm_def [hN : fact (0 < N)] [seminormed_add_comm_group V] (v : rescale N V) :
  ‚à•v‚à•‚Çä = ‚à•of.symm v‚à•‚Çä / N := rfl

end rescale

namespace SemiNormedGroup

variables (r r‚ÇÅ r‚ÇÇ : ‚Ñù‚â•0) [fact (0 < r‚ÇÅ)] [fact (0 < r‚ÇÇ)]

@[simps]
def rescale (r : ‚Ñù‚â•0) [hr : fact (0 < r)] : SemiNormedGroup ‚•§ SemiNormedGroup :=
{ obj := Œª V, of $ rescale r V,
  map := Œª V‚ÇÅ V‚ÇÇ f,
  { to_fun := Œª v, @rescale.of r V‚ÇÇ $ f ((@rescale.of r V‚ÇÅ).symm v),
    map_add' := f.map_add', -- defeq abuse
    bound' :=
    begin
      obtain ‚ü®C, C_pos, hC‚ü© := f.bound,
      use C,
      intro v,
      have := hC ((@rescale.of r V‚ÇÅ).symm v),
      rw [‚Üê div_le_div_right (show 0 < (r:‚Ñù), from hr.1), mul_div_assoc] at this,
      exact this,
    end },
  map_id' := Œª V, rfl, -- defeq abuse
  map_comp' := Œª V‚ÇÅ V‚ÇÇ V‚ÇÉ f g, rfl /- defeq abuse -/ }

instance rescale.additive [fact (0 < r)] : (rescale r).additive :=
{ map_add' := Œª V W f g, rfl /- defeq abuse -/ }

lemma norm_rescale_map_le [fact (0 < r)] {V‚ÇÅ V‚ÇÇ : SemiNormedGroup}
  {f : V‚ÇÅ ‚ü∂ V‚ÇÇ} {C : ‚Ñù} (hf : ‚à•f‚à• ‚â§ C) :
  ‚à•(rescale r).map f‚à• ‚â§ C :=
begin
  refine normed_add_group_hom.op_norm_le_bound _ (le_trans (norm_nonneg _) hf) (Œª v, _),
  dsimp,
  erw [rescale.norm_def, rescale.norm_def, equiv.symm_apply_apply, ‚Üê mul_div_assoc],
  refine div_le_div (mul_nonneg (le_trans (norm_nonneg _) hf) (norm_nonneg _))
    (normed_add_group_hom.le_of_op_norm_le _ hf _) _ le_rfl,
  rw nnreal.coe_pos, exact ‚Äπfact (0 < r)‚Ä∫.out
end

lemma rescale_map_isometry [fact (0 < r)]
  {V‚ÇÅ V‚ÇÇ : SemiNormedGroup} {f : V‚ÇÅ ‚ü∂ V‚ÇÇ} (hf : isometry f) :
  isometry ((rescale r).map f) :=
begin
  rw add_monoid_hom_class.isometry_iff_norm at hf ‚ä¢,
  intro v,
  erw [rescale.norm_def, rescale.norm_def, hf ((@rescale.of r _).symm v)],
end

lemma rescale_exact [fact (0 < r)] {V‚ÇÅ V‚ÇÇ V‚ÇÉ : SemiNormedGroup} (f : V‚ÇÅ ‚ü∂ V‚ÇÇ) (g : V‚ÇÇ ‚ü∂ V‚ÇÉ)
  (hfg : f.range = g.ker) :
  ((rescale r).map f).range = ((rescale r).map g).ker :=
begin
  ext x,
  calc x ‚àà ((rescale r).map f).range ‚Üî x ‚àà f.range : iff.rfl
  ... ‚Üî x ‚àà g.ker : by rw hfg
  ... ‚Üî x ‚àà ((rescale r).map g).ker : iff.rfl,
end

lemma rescale_exists_norm_le [fact (0 < r)] {V‚ÇÅ V‚ÇÇ : SemiNormedGroup} (f : V‚ÇÅ ‚ü∂ V‚ÇÇ) (C : ‚Ñù‚â•0)
  (hf : ‚àÄ y, ‚àÉ x, f x = y ‚àß ‚à•x‚à• ‚â§ C * ‚à•y‚à•) :
  ‚àÄ y, ‚àÉ x, (rescale r).map f x = y ‚àß ‚à•x‚à• ‚â§ C * ‚à•y‚à• :=
begin
  intro y,
  obtain ‚ü®x, h1, h2‚ü© := hf ((@rescale.of r _).symm y),
  refine ‚ü®@rescale.of r _ x, h1, _‚ü©,
  erw [rescale.norm_def, rescale.norm_def],
  simp only [div_eq_mul_inv, ‚Üê mul_assoc, equiv.symm_apply_apply, ‚Üê coe_nnnorm],
  norm_cast, exact mul_le_mul' h2 le_rfl,
end

lemma nnnorm_to_rescale {V : SemiNormedGroup} (v : V) : ‚à•(@rescale.of r V) v‚à• ‚â§ r‚Åª¬π * ‚à•v‚à• :=
by { rw ‚Üê div_eq_inv_mul, refl }

def to_rescale [fact (0 < r)] : ùü≠ _ ‚ü∂ rescale r :=
{ app := Œª V,
  add_monoid_hom.mk_normed_add_group_hom'
    (add_monoid_hom.mk' (@rescale.of r V) $ Œª _ _, rfl) r‚Åª¬π (Œª v, nnnorm_to_rescale _ v),
  naturality' := Œª V W f, rfl /- defeq abuse -/ }

def of_rescale [hr : fact (0 < r)] : rescale r ‚ü∂ ùü≠ _ :=
{ app := Œª V,
  add_monoid_hom.mk_normed_add_group_hom' (add_monoid_hom.mk' (@rescale.of r V) .symm $ Œª _ _, rfl) r
  begin
    intro v,
    erw [rescale.nnnorm_def, mul_div_cancel' _ hr.1.ne'],
    exact le_rfl
  end,
  naturality' := Œª V W f, rfl /- defeq abuse -/ }

@[simps]
def iso_rescale [fact (0 < r)] : ùü≠ _ ‚âÖ (rescale r) :=
{ hom := to_rescale r,
  inv := of_rescale r, }

open _root_.category_theory

lemma iso_rescale_isometry [fact (0 < r)] (h : r = 1) (V : SemiNormedGroup) :
  isometry ((iso_rescale r).app V).hom :=
begin
  unfreezingI { cases h },
  dsimp only [nat_iso.app_hom, iso_rescale_hom],
  apply add_monoid_hom_class.isometry_of_norm,
  intro v,
  erw [rescale.norm_def],
  simp only [div_one, subtype.coe_mk],
  refl
end

lemma norm_to_rescale_le [fact (0 < r)] (V : SemiNormedGroup) : ‚à•(to_rescale r).app V‚à• ‚â§ r‚Åª¬π :=
normed_add_group_hom.mk_normed_add_group_hom_norm_le _
  (inv_nonneg.2 (nnreal.zero_le_coe)) (Œª v, nnnorm_to_rescale _ v)

lemma nnnorm_rescale_rescale_symm {V : SemiNormedGroup} (v : (rescale r‚ÇÅ).obj V) :
  ‚à•(@rescale.of r‚ÇÇ V) ((@rescale.of r‚ÇÅ V).symm v)‚à•‚Çä ‚â§ r‚ÇÅ / r‚ÇÇ * ‚à•v‚à•‚Çä :=
begin
  apply le_of_eq,
  show _ = r‚ÇÅ / r‚ÇÇ * (‚à•(@rescale.of r‚ÇÅ V).symm v‚à•‚Çä / r‚ÇÅ),
  simp only [add_monoid_hom.mk'_apply, div_eq_inv_mul, rescale.nnnorm_def],
  rw [mul_assoc, mul_inv_cancel_left‚ÇÄ (show r‚ÇÅ ‚â† 0, from ne_of_gt $ fact.out _)],
  refl
end

def scale : rescale r‚ÇÅ ‚ü∂ rescale r‚ÇÇ :=
{ app := Œª V,
  add_monoid_hom.mk_normed_add_group_hom'
    (add_monoid_hom.mk' (Œª v, (@rescale.of r‚ÇÇ V) $ (@rescale.of r‚ÇÅ V).symm v) $
      Œª _ _, rfl) (r‚ÇÅ / r‚ÇÇ) (Œª v, nnnorm_rescale_rescale_symm r‚ÇÅ r‚ÇÇ v),
  naturality' := Œª V W f, rfl /- defeq abuse -/ }

lemma norm_scale_le (V : SemiNormedGroup) : ‚à•(scale r‚ÇÅ r‚ÇÇ).app V‚à• ‚â§ (r‚ÇÅ / r‚ÇÇ) :=
normed_add_group_hom.mk_normed_add_group_hom_norm_le _ (div_nonneg (nnreal.coe_nonneg _)
    (nnreal.coe_nonneg _)) (Œª v, nnnorm_rescale_rescale_symm r‚ÇÅ r‚ÇÇ v)

lemma scale_comm {V‚ÇÅ V‚ÇÇ W‚ÇÅ W‚ÇÇ : SemiNormedGroup}
  (f‚ÇÅ : V‚ÇÅ ‚ü∂ W‚ÇÅ) (f‚ÇÇ : V‚ÇÇ ‚ü∂ W‚ÇÇ) (œÜ : V‚ÇÅ ‚ü∂ V‚ÇÇ) (œà : W‚ÇÅ ‚ü∂ W‚ÇÇ) (h : f‚ÇÅ ‚â´ œà = œÜ ‚â´ f‚ÇÇ) :
  (rescale r‚ÇÅ).map f‚ÇÅ ‚â´ ((rescale r‚ÇÅ).map œà ‚â´ (scale r‚ÇÅ r‚ÇÇ).app W‚ÇÇ) =
  ((rescale r‚ÇÅ).map œÜ ‚â´ (scale r‚ÇÅ r‚ÇÇ).app V‚ÇÇ) ‚â´ (rescale r‚ÇÇ).map f‚ÇÇ :=
by rw [‚Üê category.assoc, ‚Üê category_theory.functor.map_comp, nat_trans.naturality,
    nat_trans.naturality, category.assoc, ‚Üê category_theory.functor.map_comp, h]

end SemiNormedGroup
