import category_theory.Fintype
import data.real.nnreal
import laurent_measures.basic
import order.filter.at_top_bot
import pseudo_normed_group.basic
import pseudo_normed_group.category
import real_measures
import ring_theory.principal_ideal_domain
import ring_theory.power_series.basic

/-- SECTIONS
Everything takes place in the `namespace theta`

* Section `aux_lemmas` contain some technicalities concerning convergent sequence
* Section `summability` shows that the series defining `œë` converges
* In Section `theta_surjective` We define the map œë : (laurent_measures r `S`) ‚Üí ‚Ñù and we
  show it is surjective.
* Section `ker_theta` studies the kernel of `œë`, in particular showing it is principal.

   VARIABLES
* The variable `Œæ : ‚Ñù` here corresponds to `r'` of `Analytic.pdf`, so that, for every `r`, `œë Œæ r`
  is`Œ∏_r'` as a map from `r`-convergent Laurent measures to `‚Ñù`. It is supposed to be positive almost
everywhere, and this is recorded as a `fact`.
* The variable `x : ‚Ñù` is defined globally in Sections `aux_lemmas` and `summability`.
* The variable `r : ‚Ñù‚â•0` (specifying the radius of convergency of `laurent_measures` makes its
  first appearance in Section `theta_surjective`, but it is not globally defined. Whenever it occurs
  it is assumed to be positive and strictly smaller than `1`, both recorded as facts.
-/

noncomputable theory

open set filter function classical finset nat
open_locale topological_space classical nnreal big_operators

-- def laurent_measures.to_Rfct (r : ‚Ñù‚â•0) :
--   (laurent_measures r (Fintype.of punit)) ‚Üí (‚Ñ§ ‚Üí ‚Ñ§) := Œª ‚ü®F, _‚ü©, (F punit.star)

namespace theta

variable (Œæ : ‚Ñù)

/--The basic function computing the **integer-valued** `Œæ`-adic expansion of `x` -/
noncomputable def y (x : ‚Ñù) : ‚Ñï ‚Üí ‚Ñù
| 0         := x
| (n + 1)   := (y n) - (‚åä(((y n) / Œæ ^ n) : ‚Ñù)‚åã : ‚Ñù) * Œæ ^ n

section aux_lemmas

variable (x : ‚Ñù)
variable [fact (0 < Œæ)]

lemma bdd_floor : bdd_above (range (Œª n : ‚Ñï, (‚åä y Œæ x n / Œæ ^ n‚åã : ‚Ñù))) :=
begin
  use (max x Œæ ‚Åª¬π : ‚Ñù),
  intros z hz,
  obtain ‚ü®m, h_mz‚ü© := (set.mem_range).mp hz,
    by_cases hm : m = 0,
  { rw [hm, pow_zero, div_one] at h_mz,
    rw [‚Üê h_mz, y, le_max_iff],
    apply or.intro_left,
    exact int.floor_le x },
  rw ‚Üê h_mz,
  apply (int.floor_le _).trans,
  obtain ‚ü®k, hk‚ü© : ‚àÉ k : ‚Ñï, m = k + 1 := nat.exists_eq_succ_of_ne_zero hm,
  rw [hk, y],
  have : Œæ ^ k ‚â† 0 := ne_of_gt (pow_pos (fact.out _) k),
  calc (y Œæ x k - ‚Üë‚åäy Œæ x k / Œæ ^ k‚åã * Œæ ^ k) / Œæ ^ (k + 1) =
              (y Œæ x k - ‚Üë‚åäy Œæ x k / Œæ ^ k‚åã * Œæ ^ k) / (Œæ ^ k * Œæ) : by {rw [pow_add, pow_one]}
        ... = (y Œæ x k - ‚Üë‚åäy Œæ x k / Œæ ^ k‚åã * Œæ ^ k) / Œæ ^ k / Œæ : by {field_simp}
        ... = (y Œæ x k / Œæ ^ k - ‚Üë‚åäy Œæ x k / Œæ ^ k‚åã * Œæ ^ k / Œæ ^ k) / Œæ : by {rw [sub_div]}
        ... = (y Œæ x k / Œæ ^ k - ‚Üë‚åäy Œæ x k / Œæ ^ k‚åã) / Œæ : by {simp only [mul_div_cancel,
                                                                      this, ne.def, not_false_iff]}
        ... ‚â§ 1 / Œæ : div_le_div_of_le (le_of_lt _) (le_of_lt _)
        ... ‚â§ max x Œæ ‚Åª¬π : by {field_simp},
  exact fact.out _,
  {rw [sub_lt_iff_lt_add, add_comm], from (int.lt_floor_add_one _)},
end

lemma eventually_pos_y : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí 0 ‚â§ y Œæ x n :=
begin
  have h_pos : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí Œæ ^ n > 0 := Œª n _, pow_pos (fact.out _) n,
  have : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí  (y Œæ x n) / Œæ ^ n ‚â• ‚åä(((y Œæ x n) / Œæ ^ n) : ‚Ñù)‚åã := Œª n _, int.floor_le _,
  intros n hn‚ÇÅ,
  by_cases hn‚ÇÄ : n = 1,
  { rw [hn‚ÇÄ, y,pow_zero, div_one, mul_one, sub_nonneg], apply int.floor_le },
  { replace hn‚ÇÅ : n > 1, {apply (lt_of_le_of_ne hn‚ÇÅ), tauto },
    obtain ‚ü®m, hm‚ü© : ‚àÉ m : ‚Ñï, m ‚â• 1 ‚àß n = m + 1,
    use ‚ü®n - 1, and.intro (nat.le_pred_of_lt hn‚ÇÅ) (nat.sub_add_cancel (le_of_lt hn‚ÇÅ)).symm‚ü©,
    rw [hm.2, y],
    replace this := (le_div_iff (h_pos m hm.1)).mp (this m hm.1),
    rwa ‚Üê sub_nonneg at this },
end

lemma eventually_pos_floor : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (‚åä((y Œæ x n) / Œæ ^ n )‚åã : ‚Ñù) ‚â• 0 :=
begin
  have h_pos : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí Œæ ^ n > 0 := Œª n _, pow_pos (fact.out _) n,
  intros n hn,
  norm_cast,
  apply int.floor_nonneg.mpr,
  exact div_nonneg (eventually_pos_y Œæ x n hn) (le_of_lt (h_pos n hn)),
end

lemma eventually_le : ‚àÄ n, n ‚â• 1 ‚Üí y Œæ x (n + 1) ‚â§ (y Œæ x n) :=
begin
  have h_pos : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí Œæ ^ n > 0 := Œª n _, pow_pos (fact.out _) n,
  intros n hn,
  rw y,
  apply sub_le_self (y Œæ x n),
  apply mul_nonneg _ (le_of_lt (h_pos n hn)),
  exact eventually_pos_floor Œæ x n hn,
end

lemma eventually_le_one {n : ‚Ñï} (hn : n ‚â• 1) : (y Œæ x n) ‚â§ (y Œæ x 1) :=
begin
  induction hn with n hn h_ind,
  exact le_of_eq (refl _),
  have := (eventually_le Œæ x n hn).trans h_ind,
  rwa nat.succ_eq_add_one,
end

def aux_y : ‚Ñï ‚Üí ‚Ñù := Œª n, if n = 0 then y Œæ x 1 else y Œæ x n

lemma eventually_antitone : antitone (aux_y Œæ x) :=
begin
  apply antitone_nat_of_succ_le,
  intro n,
  by_cases hn : n = 0,
  {rw [hn, zero_add, aux_y],
    simp only [nat.one_ne_zero, if_true, eq_self_iff_true, if_false] },
  { simp only [aux_y, if_neg hn, function.comp_app, nat.succ_ne_zero, if_false],
    replace hn : n ‚â• 1 := le_of_not_gt ((not_iff_not.mpr nat.lt_one_iff).mpr hn),
    exact eventually_le Œæ x n hn },
end

lemma limit_neg_geometric [fact (Œæ < 1)] : tendsto (Œª i : ‚Ñï, - Œæ ^ i) at_top (ùìù 0) :=
begin
  apply summable.tendsto_at_top_zero,
  rw summable_neg_iff,
  apply summable_geometric_of_abs_lt_1,
  rw abs_of_pos,
  all_goals {exact fact.out _},
end

end aux_lemmas

section summability

variable (x : ‚Ñù)

lemma finite_sum (n : ‚Ñï) : (y Œæ x (n + 1) : ‚Ñù) =
  x - ‚àë i in range(n + 1),  (‚åä(((y Œæ x i) / Œæ ^ i) : ‚Ñù)‚åã : ‚Ñù) * (Œæ ^ i) :=
begin
  induction n with n h_ind,
  { rw [zero_add, range_one, sum_singleton], refl },
  { replace h_ind : (x - (y Œæ x (n + 1)) : ‚Ñù) =
    ‚àë i in range(n + 1),  (‚åä(y Œæ x i / Œæ ^ i : ‚Ñù)‚åã : ‚Ñù) * Œæ ^ i := by {rw [sub_eq_iff_eq_add,
      ‚Üê sub_eq_iff_eq_add', h_ind] },
    nth_rewrite_rhs 2 [nat.succ_eq_add_one, ‚Üê nat.succ_eq_add_one, range_succ],
    rw [sum_insert, nat.succ_eq_add_one, ‚Üê sub_sub, ‚Üê h_ind, sub_sub, add_sub, add_comm _ x,
      ‚Üê add_sub, ‚Üê sub_sub, sub_self, zero_sub, neg_sub],
    refl,
    simp },
end

lemma finite_sum' (n : ‚Ñï) : x - (y Œæ x n : ‚Ñù) =
  ‚àë i in range (n),  (‚åä(((y Œæ x i) / Œæ ^ i) : ‚Ñù)‚åã : ‚Ñù) * (Œæ ^ i) :=
begin
  by_cases hn : n =0,
  { rw [hn, range_zero, sum_empty, sub_eq_zero], refl },
  { replace hn : n ‚â• 1 := le_of_not_gt ((not_iff_not.mpr nat.lt_one_iff).mpr hn),
    rw [‚Üê (nat.sub_add_cancel hn), finite_sum Œæ x (n - 1)],
    simp only [sub_sub_cancel] at * },
end

variable [fact (0 < Œæ)]

lemma exists_limit_y : ‚àÉ a, tendsto (Œª n, y Œæ x n) at_top (ùìù a) :=
begin
  have h_bdd : bdd_below (range (aux_y Œæ x)),
  { use 0,
    intros z hz,
    obtain ‚ü®m, h_mz‚ü© := (set.mem_range).mp hz,
    by_cases hm : m = 0,
    { simp_rw [hm, aux_y, if_pos] at h_mz,
      rw ‚Üê h_mz,
      exact eventually_pos_y Œæ x 1 (le_of_eq (refl _)), },
      simp_rw [aux_y, (if_neg hm)] at h_mz,
      rw ‚Üê h_mz,
      replace hm : m ‚â• 1 := le_of_not_gt ((not_iff_not.mpr nat.lt_one_iff).mpr hm),
      exact eventually_pos_y Œæ x m hm },
  have := tendsto_at_top_cinfi (eventually_antitone Œæ x) h_bdd,
  use (‚®Ö (i : ‚Ñï), aux_y Œæ x i),
  apply @tendsto.congr' _ _ (aux_y Œæ x) _ _ _ _ this,
  apply (filter.eventually_eq_iff_exists_mem).mpr,
  use {n | n ‚â• 1},
  simp only [mem_at_top_sets, ge_iff_le, mem_set_of_eq],
  use 1,
  simp only [imp_self, forall_const],
  intros n hn,
  replace hn : n ‚â• 1 := by {simp only [*, ge_iff_le, mem_set_of_eq] at * },
  have := ne_of_lt (lt_of_lt_of_le nat.zero_lt_one hn),
  rw [aux_y, ite_eq_right_iff],
  tauto,
end

lemma summable_norm (r : ‚Ñù‚â•0) (hr‚ÇÅ : r < 1) :
      summable (Œª i, ‚à•‚åä(y Œæ x i / Œæ ^ i : ‚Ñù)‚åã‚à• * (r ^ i)) :=
begin
  by_cases hr‚ÇÄ : r = 0,
  { rw hr‚ÇÄ,
    apply @summable_of_ne_finset_zero _ _ _ _ _ (range 1),
    simp only [int.cast_eq_zero, nnreal.coe_zero, zero_pow_eq_zero, finset.mem_singleton,
      mul_eq_zero, range_one],
    intros _ hb,
    exact or.intro_right _ (nat.pos_of_ne_zero hb) },
  have h_nonneg : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (r ^ n : ‚Ñù) ‚â• 0 := Œª n _, pow_nonneg (r.2) n,
  have H : ‚àÄ j : {i // i ‚àâ range 1}, j.1 ‚â• 1,
  { rintro ‚ü®n, h_n‚ü©,
    simp only [ge_iff_le, finset.mem_singleton, range_one] at h_n,
    exact le_of_not_gt ((not_iff_not.mpr nat.lt_one_iff).mpr h_n) },
  apply (finset.summable_compl_iff (finset.range 1)).mp,
  swap, apply_instance,
  have h_nonneg : ‚àÄ i : {i // i ‚àâ range 1}, (‚à•‚åä(y Œæ x i.1 / Œæ ^ i.1 : ‚Ñù)‚åã‚à•) * r ^ i.1 ‚â• 0,
    { intro i,
      apply mul_nonneg _ (h_nonneg i.1 (H i)),
      simp only [norm_nonneg] },
  obtain ‚ü®Œº, hŒº‚ü©  := bdd_floor Œæ x,
  have h_bdd : ‚àÄ i : {i // i ‚àâ range 1}, (‚à•‚åä(y Œæ x i.1 / Œæ ^ i.1 : ‚Ñù)‚åã‚à•) ‚â§ Œº,
  { rw upper_bounds at hŒº,
    simp only [*, forall_apply_eq_imp_iff', lt_one_iff, set.mem_range, forall_const,
      forall_exists_index, nnreal.zero_le_coe, ge_iff_le, set.mem_set_of_eq, implies_true_iff,
      nonempty_of_inhabited, subtype.forall, pow_nonneg, finset.mem_range, subtype.val_eq_coe] at *,
    intros a ha,
    rw [subtype.coe_mk, int.norm_eq_abs],
    replace ha : a ‚â• 1 := le_of_not_gt ((not_iff_not.mpr nat.lt_one_iff).mpr ha),
    rwa [abs_eq_self.mpr (eventually_pos_floor Œæ x a ha)],
    exact hŒº a },
  replace h_bdd : ‚àÄ i : {i // i ‚àâ range 1}, (‚à•‚åä(y Œæ x i.1 / Œæ ^ i.1 : ‚Ñù)‚åã‚à•) * r ^ i.1
      ‚â§ Œº * r ^ i.1,
    { intro i,
    rw mul_le_mul_right,
    exacts [h_bdd i, pow_pos ((ne.symm hr‚ÇÄ).le_iff_lt.mp r.2) i.1] },
  apply summable_of_nonneg_of_le h_nonneg h_bdd,
  apply (@finset.summable_compl_iff _ _ _ _ _ (Œª i, Œº * r ^ i) (finset.range 1)).mpr,
  apply summable.mul_left,
  apply summable_geometric_of_abs_lt_1,
  rwa [‚Üê nnreal.val_eq_coe, abs_eq_self.mpr r.2],
end

lemma summable_nnnorm (r : ‚Ñù‚â•0) (hr‚ÇÅ : r < 1) :
      summable (Œª i, ‚à•‚åä(y Œæ x i / Œæ ^ i : ‚Ñù)‚åã‚à•‚Çä * (r ^ i)) :=
by simpa only [‚Üê nnreal.summable_coe, nonneg.coe_mul, coe_nnnorm, nnreal.coe_pow]
  using summable_norm Œæ x r hr‚ÇÅ

lemma summable_floor (r : ‚Ñù‚â•0) (hr‚ÇÅ : r < 1) :
   summable (Œª i, (‚åä(y Œæ x i / Œæ ^ i : ‚Ñù)‚åã : ‚Ñù) * r ^ i) :=
begin
  have h_norm_eq : (Œª i : ‚Ñï, (‚à•‚åäy Œæ x i / Œæ ^ i‚åã‚à• * (r ^ i : ‚Ñù))) =
    (Œª i : ‚Ñï, (‚à•(‚åäy Œæ x i / Œæ ^ i‚åã : ‚Ñù) * (r ^ i)‚à•)),
    { funext,
      simp only [normed_field.norm_mul, nnreal.norm_eq, normed_field.norm_pow,
        mul_eq_mul_right_iff],
      rw [real.norm_eq_abs, int.norm_eq_abs],
      tauto },
  have := summable_norm Œæ x r hr‚ÇÅ,
  rw h_norm_eq at this,
  apply summable_of_summable_norm (this),
end

lemma limit_y [fact (Œæ < 1)]: tendsto (Œª n, y Œæ x n) at_top (ùìù 0) :=
begin
  have h_pos : 0 < Œæ := fact.out _,
  let Œæ‚ÇÄ : ‚Ñù‚â•0 := ‚ü®Œæ, le_of_lt (fact.out _)‚ü©,
  have h_right : ‚àÄ n, n ‚â• 1 ‚Üí (‚åä(y Œæ x n / Œæ ^ n)‚åã : ‚Ñù) ‚â§ (y Œæ x n / Œæ ^ n) :=
    (Œª _ _, int.floor_le _),
  replace h_right : ‚àÄ n, n ‚â• 1 ‚Üí (‚åä(y Œæ x n / Œæ ^ n)‚åã : ‚Ñù) * Œæ ^ n  ‚â§ y Œæ x n :=
    (Œª n hn, (le_div_iff (pow_pos h_pos n)).mp (h_right n hn)),
  replace h_right : ‚àÄ·∂† n in at_top, (‚åä(y Œæ x n / Œæ ^ n)‚åã : ‚Ñù) * Œæ ^ n  ‚â§ y Œæ x n,
  { simp only [ge_iff_le, eventually_at_top], use [1, h_right] },
  have h_left : ‚àÄ n, n ‚â• 1 ‚Üí (y Œæ x n / Œæ ^ n) - 1 ‚â§ ‚åä(y Œæ x n / Œæ ^ n)‚åã :=
    (Œª n hn, le_of_lt (int.sub_one_lt_floor _)),
  replace h_left : ‚àÄ n, n ‚â• 1 ‚Üí (y Œæ x n - Œæ ^ n) ‚â§ ‚åä(y Œæ x n / Œæ ^ n)‚åã * Œæ ^ n,
  { have h_one : ‚àÄ n : ‚Ñï, 0 < Œæ ^ n := (Œª n, pow_pos h_pos n),
    intros n hn,
    calc y Œæ x n -  Œæ ^ n = (y Œæ x n * Œæ ^ n / Œæ ^ n  - Œæ ^ n) :
                                                by {rw [mul_div_cancel _ (ne_of_lt (h_one n)).symm]}
                    ... = (y Œæ x n / Œæ ^ n * Œæ ^ n  - Œæ ^ n) :
                                                  by {rw [mul_div_assoc, ‚Üê div_mul_eq_mul_div_comm]}
                    ... = ((y Œæ x n / Œæ ^ n) - 1 ) * Œæ ^ n :
                                            by {nth_rewrite_lhs 2 [‚Üê one_mul (Œæ ^ n)], rw ‚Üê sub_mul}
                    ... ‚â§ ‚åä(y Œæ x n / Œæ ^ n)‚åã * Œæ ^ n :
                                                  (mul_le_mul_right (h_one n)).mpr (h_left n hn) },
  replace h_left : ‚àÄ·∂† n in at_top, y Œæ x n - Œæ ^ n ‚â§ (‚åä(y Œæ x n / Œæ ^ n)‚åã : ‚Ñù) * Œæ ^ n,
  { simp only [eventually_at_top], use [1, h_left] },
  have : tendsto (Œª n, y Œæ x n - Œæ ^ n) at_top (ùìù (exists_limit_y Œæ x).some),
  { convert tendsto.add (exists_limit_y Œæ x).some_spec (limit_neg_geometric Œæ),
    rw add_zero } ,
  have h‚ÇÅ := (le_of_tendsto_of_tendsto this
    (summable_floor Œæ x Œæ‚ÇÄ _).tendsto_at_top_zero h_left).antisymm (le_of_tendsto_of_tendsto
    (summable_floor Œæ x Œæ‚ÇÄ _).tendsto_at_top_zero (exists_limit_y Œæ x).some_spec h_right),
  have := (exists_limit_y Œæ x).some_spec,
  rwa h‚ÇÅ at this,
  all_goals {rw [‚Üê nnreal.coe_lt_coe, nnreal.coe_one, subtype.coe_mk], exact fact.out _},
end

lemma has_sum_x [fact (Œæ < 1)] : has_sum (Œª i, (‚åä(((y Œæ x i) / Œæ ^ i) : ‚Ñù)‚åã : ‚Ñù) * (Œæ ^ i)) x :=
begin
  let Œæ‚ÇÄ : ‚Ñù‚â•0 := ‚ü®Œæ, le_of_lt (fact.out _)‚ü©,
  apply (summable_floor Œæ x Œæ‚ÇÄ _).has_sum_iff_tendsto_nat.mpr,
  simp_rw [subtype.coe_mk, ‚Üê (finite_sum' Œæ x), sub_eq_add_neg],
  nth_rewrite_rhs 0 [‚Üê add_zero x],
  apply @tendsto.const_add ‚Ñï ‚Ñù _ _ _ x 0 _ at_top,
  rw ‚Üê neg_zero,
  refine tendsto.neg (limit_y Œæ x),
  { rw [‚Üê nnreal.coe_lt_coe, nnreal.coe_one, subtype.coe_mk],
    exact fact.out _},
end

end summability

section theta_surj


/--The map `œë` defined in Theorem 6.9 of Analytic.pdf. Given the definition of `tsum` we do not need
 to require that `r ‚â§ Œæ` to simply define `œë`.-/

def seval {r : ‚Ñù‚â•0} (S : Fintype) (s : S): (laurent_measures r S) ‚Üí
  (laurent_measures r (Fintype.of punit)) := Œª F, ‚ü®(Œª _, F s), (Œª _, F.2 s)‚ü©

def œë‚ÇÄ (r : ‚Ñù‚â•0) : (laurent_measures r (Fintype.of punit)) ‚Üí ‚Ñù :=
  Œª F, tsum (Œª n, (F punit.star n) * Œæ ^ n)--TODO: remove this

def œë (r p : ‚Ñù‚â•0) (S : Fintype) : (laurent_measures r S) ‚Üí real_measures p S :=
  Œª F s, tsum (Œª n, (F s n) * Œæ ^ n)

@[nolint unused_arguments]
def œë' (r p: ‚Ñù‚â•0) (S : Fintype) : (laurent_measures r S) ‚Üí (S ‚Üí ‚Ñù) :=
  Œª F s, (œë‚ÇÄ Œæ r) (seval S s F)


lemma œë_eq_œë' : œë = œë' := rfl

theorem œë_surjective (r p : ‚Ñù‚â•0) (S : Fintype) (g : real_measures p S) [fact (r < 1)] [fact (0 < Œæ)]
   [fact (Œæ < 1)] : ‚àÉ (F : laurent_measures r S), (œë Œæ r p S F) = g :=
begin
  let F‚ÇÄ : S ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª s m, int.rec_on m (Œª i, ‚åä((y Œæ (g s) i) / Œæ ^ i)‚åã) (0),
  have hinj : function.injective (coe : ‚Ñï ‚Üí ‚Ñ§) := by {apply int.coe_nat_inj},
  have h_aux : ‚àÄ s : S, ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí F‚ÇÄ s n = 0,
  { rintros s ( _ | _ ),
    simp only [forall_false_left, set.mem_range_self, not_true, int.of_nat_eq_coe],
    intro,
    refl },
  have h_range : ‚àÄ s : S, ‚àÄ n : ‚Ñ§,
    n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí (F‚ÇÄ s n : ‚Ñù) * Œæ ^ n = 0,
  swap,
  have h_range_norm : ‚àÄ s : S, ‚àÄ n : ‚Ñ§,
    n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí ‚à•F‚ÇÄ s n ‚à•‚Çä * r ^ n = 0,
  swap,
  { have HF‚ÇÄ : ‚àÄ s : S, summable (Œª (n : ‚Ñ§), ‚à•F‚ÇÄ s n‚à•‚Çä * r ^ n),
    { intro s,
      apply (@function.injective.summable_iff _ _ _ _ _ _ _ hinj (h_range_norm s)).mp,
      apply summable_nnnorm Œæ (g s) r (fact.out _) },
    let F : laurent_measures r S := ‚ü®F‚ÇÄ, HF‚ÇÄ‚ü©,
    use F,
    have : ‚àÄ s : S, has_sum (Œª n, ((F‚ÇÄ s n) : ‚Ñù) * Œæ ^ n) (g s),
    { intro s,
      apply (@function.injective.has_sum_iff _ _ _ _ _ _ (g s) _ hinj (h_range s)).mp,
      exact has_sum_x Œæ (g s) },
    funext,
    apply has_sum.tsum_eq,
    exact this s},
  all_goals { intros n hn,
    specialize h_aux n hn,
    simp only [h_aux, int.cast_eq_zero, mul_eq_zero, nnnorm_eq_zero],
    tauto },
end

end theta_surj




-- theorem œë‚ÇÄ_surjective (x : ‚Ñù) (r : ‚Ñù‚â•0) [fact (r < 1)] [fact (0 < Œæ)] [fact (Œæ < 1)] :
--   ‚àÉ (F : laurent_measures r (Fintype.of punit)), (œë‚ÇÄ Œæ r F) = x :=
-- begin
--   let f‚ÇÄ : ‚Ñ§ ‚Üí ‚Ñ§ := Œª m, int.rec_on m (Œª i, ‚åä((y Œæ x i) / Œæ ^ i)‚åã) (0),
--   let F‚ÇÄ : Fintype.of punit ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ := Œª a, f‚ÇÄ,
--   have hinj : function.injective (coe : ‚Ñï ‚Üí ‚Ñ§) := by {apply int.coe_nat_inj},
--   have h_aux : ‚àÄ n : ‚Ñ§, n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí f‚ÇÄ n = 0,
--   { rintro ( _ | _ ),
--     simp only [forall_false_left, set.mem_range_self, not_true, int.of_nat_eq_coe],
--     intro,
--     refl },
--   have h_range : ‚àÄ n : ‚Ñ§,
--     n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí (F‚ÇÄ punit.star n : ‚Ñù) * Œæ ^ n = 0,
--   swap,
--   have h_range_norm : ‚àÄ n : ‚Ñ§,
--     n ‚àâ set.range (coe : ‚Ñï ‚Üí ‚Ñ§) ‚Üí ‚à•F‚ÇÄ punit.star n ‚à• * r ^ n = 0,
--   swap,
--   { have HF‚ÇÄ : ‚àÄ (s : Fintype.of punit), summable (Œª (n : ‚Ñ§), ‚à•F‚ÇÄ s n‚à• * r ^ n),
--     { intro s,
--       apply (@function.injective.summable_iff _ _ _ _ _ _ _ hinj h_range_norm).mp,
--       apply summable_norm Œæ x r (fact.out _) },
--     let F : laurent_measures r (Fintype.of punit) := ‚ü®F‚ÇÄ, HF‚ÇÄ‚ü©,
--     use F,
--     have : has_sum (Œª n, ((F‚ÇÄ punit.star n) : ‚Ñù) * Œæ ^ n) x,
--     { apply (@function.injective.has_sum_iff _ _ _ _ _ _ x _ hinj h_range).mp,
--       exact has_sum_x Œæ x },
--     apply has_sum.tsum_eq,
--     exact this },
--   all_goals { intros n hn,
--     specialize h_aux n hn,
--     simp only [h_aux, int.cast_eq_zero, mul_eq_zero, norm_eq_zero],
--     tauto },
-- end

end theta
