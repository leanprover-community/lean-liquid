import pseudo_normed_group.breen_deligne
import analysis.normed.group.SemiNormedGroup.kernels

/-!

# Constructions on the filtration on a profinitely filtered pseudo-normed group

## Main definitions

- `FiltrationPow r' c n`: the functor sending a profinitely filtered `M` to `M_c^n`.
- `œÜ.eval_FP r' c‚ÇÅ c‚ÇÇ`: The map M_c‚ÇÅ^m ‚Üí M_c‚ÇÇ^n induced by a (c‚ÇÅ, c‚ÇÇ)-suitable œÜ.

-/
open_locale classical nnreal big_operators kronecker
noncomputable theory
local attribute [instance] type_pow

universe variables u

@[simps]
def pseudo_normed_group.filtration_obj
  (M) [profinitely_filtered_pseudo_normed_group M] (c) : Profinite :=
Profinite.of (pseudo_normed_group.filtration M c)

open profinitely_filtered_pseudo_normed_group category_theory
  comphaus_filtered_pseudo_normed_group

namespace Filtration
variables (M : Type u) [profinitely_filtered_pseudo_normed_group M]
@[simps]
def cast_le (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [h : fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  pseudo_normed_group.filtration_obj.{u} M c‚ÇÅ ‚ü∂ pseudo_normed_group.filtration_obj.{u} M c‚ÇÇ :=
{ to_fun := pseudo_normed_group.cast_le,
  continuous_to_fun := continuous_cast_le c‚ÇÅ c‚ÇÇ }

theorem cast_le_refl (c : ‚Ñù‚â•0) : cast_le M c c = ùüô _ := by { ext, refl }

theorem cast_le_comp (c‚ÇÅ c‚ÇÇ c‚ÇÉ : ‚Ñù‚â•0) [h‚ÇÅ : fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [h‚ÇÇ : fact (c‚ÇÇ ‚â§ c‚ÇÉ)] :
  cast_le M c‚ÇÅ c‚ÇÇ ‚â´ cast_le M c‚ÇÇ c‚ÇÉ = @cast_le M _ c‚ÇÅ c‚ÇÉ ‚ü®le_trans h‚ÇÅ.1 h‚ÇÇ.1‚ü© :=
by { ext, refl }

end Filtration

@[simps obj_obj obj_map_apply map_app {fully_applied := ff}]
def Filtration (r' : ‚Ñù‚â•0) : ‚Ñù‚â•0 ‚•§ ProFiltPseuNormGrpWithTinv.{u} r' ‚•§ Profinite.{u} :=
{ obj := Œª c,
  { obj := Œª M, pseudo_normed_group.filtration_obj M c,
    map := Œª M N f, ‚ü®f.level c, f.level_continuous c‚ü©,
    map_id' := by { intros, ext, refl },
    map_comp' := by { intros, ext, refl } },
  map := Œª c‚ÇÅ c‚ÇÇ h,
  { app := Œª M, @Filtration.cast_le _ _ c‚ÇÅ c‚ÇÇ ‚ü®le_of_hom h‚ü© },
  map_id' := by { intros, ext, refl },
  map_comp' := by { intros, ext, refl } }

open SemiNormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group
open profinitely_filtered_pseudo_normed_group_with_Tinv

/-- The functor that sends `A` to `A^n` -/
@[simps obj map]
def Pow (n : ‚Ñï) : Profinite ‚•§ Profinite :=
{ obj := Œª A, of (A^n),
  map := Œª A B f, {
    to_fun := Œª x j, f (x j),
    continuous_to_fun := continuous_pi $ Œª j, f.2.comp (continuous_apply j) } }

@[simps]
def Pow_Pow_X (N n : ‚Ñï) (X) : (Pow N ‚ãô Pow n).obj X ‚âÖ (Pow (N * n)).obj X :=
Profinite.iso_of_homeo
{ to_equiv := (equiv.curry _ _ _).symm.trans (((equiv.prod_comm _ _).trans fin_prod_fin_equiv).arrow_congr (equiv.refl X)),
  continuous_to_fun :=
  begin
    apply continuous_pi,
    intro ij,
    let k := ((equiv.prod_comm _ _).trans fin_prod_fin_equiv).symm ij,
    convert (@continuous_apply _ (Œª i, X) _ k.2).comp (@continuous_apply _ (Œª i, (X^N)) _ k.1),
  end,
  continuous_inv_fun :=
  begin
    apply continuous_pi,
    intro i,
    refine continuous_pi _,
    intro j,
    exact continuous_apply _,
  end }
.

@[simps hom inv]
def Pow_mul (N n : ‚Ñï) : Pow (N * n) ‚âÖ Pow N ‚ãô Pow n :=
nat_iso.of_components (Œª X, (Pow_Pow_X N n X).symm)
begin
  intros X Y f,
  ext x i j,
  refl,
end

@[simps]
def profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv‚ÇÄ_hom
  {r' : ‚Ñù‚â•0} (M : Type*) [profinitely_filtered_pseudo_normed_group_with_Tinv r' M]
  (c c‚ÇÇ : ‚Ñù‚â•0) [fact (c ‚â§ r' * c‚ÇÇ)] : filtration_obj M c ‚ü∂ filtration_obj M c‚ÇÇ :=
by exact ‚ü®Tinv‚ÇÄ c c‚ÇÇ, Tinv‚ÇÄ_continuous _ _‚ü©

open profinitely_filtered_pseudo_normed_group_with_Tinv

namespace Filtration

@[simps]
def res (r' c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [h : fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :
  (Filtration r').obj c‚ÇÅ ‚ü∂ (Filtration r').obj c‚ÇÇ :=
(Filtration r').map (hom_of_le h.1)

theorem res_refl (r' c : ‚Ñù‚â•0) : res r' c c = ùüô _ := by { ext, refl }

theorem res_comp (r' c‚ÇÅ c‚ÇÇ c‚ÇÉ : ‚Ñù‚â•0) [h‚ÇÅ : fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [h‚ÇÇ : fact (c‚ÇÇ ‚â§ c‚ÇÉ)] :
  res r' c‚ÇÅ c‚ÇÇ ‚â´ res r' c‚ÇÇ c‚ÇÉ = @res r' c‚ÇÅ c‚ÇÉ ‚ü®le_trans h‚ÇÅ.1 h‚ÇÇ.1‚ü© :=
by { ext, refl }

@[simps] def Tinv‚ÇÄ {r' : ‚Ñù‚â•0} (c c‚ÇÇ : ‚Ñù‚â•0) [fact (c ‚â§ r' * c‚ÇÇ)] :
  (Filtration.{u} r').obj c ‚ü∂ (Filtration r').obj c‚ÇÇ :=
{ app := Œª M, Tinv‚ÇÄ_hom M c c‚ÇÇ,
  naturality' := Œª M‚ÇÅ M‚ÇÇ f, by { ext x, exact (f.map_Tinv _).symm } }

theorem Tinv‚ÇÄ_comp_res {r' : ‚Ñù‚â•0} (c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0)
  [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ r' * c‚ÇÑ)] [fact (c‚ÇÇ ‚â§ c‚ÇÑ)] [fact (c‚ÇÅ ‚â§ c‚ÇÉ)] :
  Tinv‚ÇÄ c‚ÇÅ c‚ÇÇ ‚â´ res r' c‚ÇÇ c‚ÇÑ = res r' c‚ÇÅ c‚ÇÉ ‚â´ Tinv‚ÇÄ c‚ÇÉ c‚ÇÑ := rfl

def pi_iso (r' c : ‚Ñù‚â•0) (M : ProFiltPseuNormGrpWithTinv r') (N : ‚Ñï) :
  Profinite.of (filtration (M^N) c) ‚âÖ Profinite.of ((filtration M c)^N) :=
Profinite.iso_of_homeo $ filtration_pi_homeo _ _

end Filtration


/-- `FiltrationPow r' c n` is the functor sending a profinitely filtered `M` to `M_c^n`. -/
@[simps obj map {fully_applied := ff}]
def FiltrationPow (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  ProFiltPseuNormGrpWithTinv r' ‚•§ Profinite :=
ProFiltPseuNormGrpWithTinv.Pow r' n ‚ãô (Filtration r').obj c

namespace FiltrationPow

@[simps]
def cast_le (r' c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] (n : ‚Ñï) :
  FiltrationPow.{u} r' c‚ÇÅ n ‚ü∂ FiltrationPow r' c‚ÇÇ n :=
{ app := Œª M, (Filtration.cast_le _ c‚ÇÅ c‚ÇÇ),
  naturality' := Œª M N f, by { ext, refl } }

theorem cast_le_refl (r' c : ‚Ñù‚â•0) (n : ‚Ñï) : cast_le r' c c n = ùüô _ :=
by { ext, refl }

theorem cast_le_comp (r' c‚ÇÅ c‚ÇÇ c‚ÇÉ : ‚Ñù‚â•0) [h‚ÇÅ : fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [h‚ÇÇ : fact (c‚ÇÇ ‚â§ c‚ÇÉ)] (n : ‚Ñï) :
  cast_le r' c‚ÇÅ c‚ÇÇ n ‚â´ cast_le r' c‚ÇÇ c‚ÇÉ n =
  @cast_le r' c‚ÇÅ c‚ÇÉ ‚ü®le_trans h‚ÇÅ.1 h‚ÇÇ.1‚ü© n :=
by { ext, refl }

@[simps]
def Tinv (r' : ‚Ñù‚â•0) (c c‚ÇÇ) [fact (c ‚â§ r' * c‚ÇÇ)] (n) :
  FiltrationPow r' c n ‚ü∂ FiltrationPow r' c‚ÇÇ n :=
whisker_left _ (Filtration.Tinv‚ÇÄ c c‚ÇÇ)

lemma Tinv_app (r' : ‚Ñù‚â•0) (c c‚ÇÇ) [fact (c ‚â§ r' * c‚ÇÇ)] (n M) :
  (Tinv r' c c‚ÇÇ n).app M = (Tinv‚ÇÄ_hom _ c c‚ÇÇ) := rfl

lemma cast_le_vcomp_Tinv (r' c‚ÇÅ c‚ÇÇ c‚ÇÉ : ‚Ñù‚â•0)
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ c‚ÇÉ)] [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] [fact (c‚ÇÇ ‚â§ r' * c‚ÇÉ)] (n : ‚Ñï) :
  cast_le r' c‚ÇÅ c‚ÇÇ n ‚â´ Tinv r' c‚ÇÇ c‚ÇÉ n = Tinv r' c‚ÇÅ c‚ÇÇ n ‚â´ cast_le r' c‚ÇÇ c‚ÇÉ n :=
by { ext, refl }

@[simps hom inv]
def mul_iso (r' c : ‚Ñù‚â•0) (M : ProFiltPseuNormGrpWithTinv r') (N n : ‚Ñï) :
  (FiltrationPow r' c n).obj (ProFiltPseuNormGrpWithTinv.of r' (‚Ü•M ^ N)) ‚âÖ
  (FiltrationPow r' c (N * n)).obj M :=
((Filtration r').obj c).map_iso $ (ProFiltPseuNormGrpWithTinv.Pow_mul r' N n).symm.app _

end FiltrationPow

namespace breen_deligne
namespace basic_universal_map

variables (r' c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) {l m n : ‚Ñï} (œï : basic_universal_map m n)

open FiltrationPow comphaus_filtered_pseudo_normed_group_with_Tinv_hom

@[simps]
def eval_FP [œï.suitable c‚ÇÅ c‚ÇÇ] : FiltrationPow.{u} r' c‚ÇÅ m ‚ü∂ FiltrationPow r' c‚ÇÇ n :=
{ app := Œª M,
  { to_fun := œï.eval_png‚ÇÄ M c‚ÇÅ c‚ÇÇ,
    continuous_to_fun := œï.eval_png‚ÇÄ_continuous M c‚ÇÅ c‚ÇÇ },
  naturality' := Œª M‚ÇÅ M‚ÇÇ f, begin
    ext1 x,
    change œï.eval_png‚ÇÄ M‚ÇÇ c‚ÇÅ c‚ÇÇ ((FiltrationPow r' c‚ÇÅ m).map f x) =
      (FiltrationPow r' c‚ÇÇ n).map f (œï.eval_png‚ÇÄ M‚ÇÅ c‚ÇÅ c‚ÇÇ x),
    ext j,
    dsimp only [FiltrationPow_map, Filtration_obj_map_apply, basic_universal_map.eval_png‚ÇÄ_coe,
      comphaus_filtered_pseudo_normed_group_with_Tinv_hom.level_coe,
      comp_to_fun, coe_to_add_monoid_hom],
    simp only [basic_universal_map.eval_png_apply, pi_map_to_fun, f.map_sum, f.map_zsmul],
  end }

lemma eval_FP_comp (g : basic_universal_map m n) (f : basic_universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÉ] [hf : f.suitable c‚ÇÅ c‚ÇÇ]
  [(basic_universal_map.comp g f).suitable c‚ÇÅ c‚ÇÉ] :
  (basic_universal_map.comp g f).eval_FP r' c‚ÇÅ c‚ÇÉ = f.eval_FP r' c‚ÇÅ c‚ÇÇ ‚â´ g.eval_FP r' c‚ÇÇ c‚ÇÉ :=
by { ext, dsimp, rw eval_png_comp, refl }

lemma cast_le_comp_eval_FP
  [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
  cast_le r' c‚ÇÅ c‚ÇÇ m ‚â´ œï.eval_FP r' c‚ÇÇ c‚ÇÑ = œï.eval_FP r' c‚ÇÅ c‚ÇÉ ‚â´ cast_le r' c‚ÇÉ c‚ÇÑ n :=
by { ext, refl }

open FiltrationPow

lemma Tinv_comp_eval_FP (r' c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0)
  [fact (c‚ÇÅ ‚â§ r' * c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ r' * c‚ÇÑ)] [œï.suitable c‚ÇÅ c‚ÇÉ] [œï.suitable c‚ÇÇ c‚ÇÑ] :
  Tinv r' c‚ÇÅ c‚ÇÇ m ‚â´ œï.eval_FP r' c‚ÇÇ c‚ÇÑ = œï.eval_FP r' c‚ÇÅ c‚ÇÉ ‚â´ Tinv r' c‚ÇÉ c‚ÇÑ n :=
begin
  ext M x : 3,
  change œï.eval_png‚ÇÄ M c‚ÇÇ c‚ÇÑ ((Tinv r' c‚ÇÅ c‚ÇÇ m).app M x) =
    (Tinv r' c‚ÇÉ c‚ÇÑ n).app M (œï.eval_png‚ÇÄ M c‚ÇÅ c‚ÇÉ x),
  ext j,
  dsimp,
  simp only [eval_png_apply, comphaus_filtered_pseudo_normed_group_hom.map_sum,
    comphaus_filtered_pseudo_normed_group_hom.map_zsmul, pi_Tinv_apply],
end
.

lemma mul_iso_eval_FP (N : ‚Ñï) [œï.suitable c‚ÇÇ c‚ÇÅ] (M) :
  (FiltrationPow.mul_iso.{u u} r' c‚ÇÇ M N m).inv ‚â´
    (basic_universal_map.eval_FP r' c‚ÇÇ c‚ÇÅ œï).app (ProFiltPseuNormGrpWithTinv.of r' (M ^ N)) =
  (basic_universal_map.eval_FP r' c‚ÇÇ c‚ÇÅ ((basic_universal_map.mul N) œï)).app M ‚â´
    (FiltrationPow.mul_iso.{u u} r' c‚ÇÅ M N n).inv :=
begin
  ext x i j,
  dsimp [mul],
  simp only [eval_png_apply, equiv.symm_apply_apply, matrix.minor_apply, matrix.kronecker],
  rw [‚Üê fin_prod_fin_equiv.sum_comp, ‚Üê finset.univ_product_univ, finset.sum_product,
      finset.sum_comm],
  simp only [equiv.symm_apply_apply, matrix.one_apply, boole_mul, ite_smul, zero_smul,
    finset.sum_ite_eq, finset.mem_univ, if_true, matrix.kronecker_map, matrix.kronecker_apply],
  convert finset.sum_apply j (finset.univ : finset (fin m)) _ using 1,
end

end basic_universal_map

end breen_deligne
