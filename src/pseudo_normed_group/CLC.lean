import pseudo_normed_group.LC
import for_mathlib.normed_group_hom_completion
/-!

# V-hat(M_c^n)

One of the key players in the proof of the main theorem of this repo is
the normed group V-hat(M-bar_r'(S)_{‚â§c}^n). This file constructs

## Key defintions

- `CLCP V n`: the functor that sends a profinite set `S` to `V-hat(S^n)`
- `CLFCP v r' c n`: the functor sending a profinitely-filtered `T‚Åª¬π`-module `M`
   to `V-hat((M_c)^n)`

-/
open_locale classical nnreal
noncomputable theory
local attribute [instance] type_pow

open SemiNormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group

universe variable u
variables (r : ‚Ñù‚â•0) (V : SemiNormedGroup) (r' : ‚Ñù‚â•0)
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï)

/-- `CLC V n` is the functor that sends a profinite set `S` to `V-hat(S^n)` -/
def CLC (V : SemiNormedGroup) : Profinite·µí·µñ ‚•§ SemiNormedGroup :=
LC V ‚ãô Completion

namespace CLC

lemma map_norm_noninc {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : ((CLC V).map f).norm_noninc :=
Completion_map_norm_noninc _ $ LC.map_norm_noninc _ _

def T [normed_with_aut r V] : CLC V ‚âÖ CLC V :=
((whiskering_right _ _ _).obj _).map_iso (LC.T r V)

lemma norm_T_le [normed_with_aut r V] [fact (0 < r)] (A) : ‚à•(T r V).hom.app A‚à• ‚â§ r :=
le_trans (normed_group_hom.norm_completion_le _) $ LC.norm_T_le _ _ _

def T_inv [normed_with_aut r V] : CLC V ‚ü∂ CLC V :=
whisker_right (LC.T_inv r V) Completion

lemma T_inv_eq [normed_with_aut r V] : (T r V).inv = T_inv r V := rfl

lemma norm_T_inv_le [normed_with_aut r V] [fact (0 < r)] (A) : ‚à•(T_inv r V).app A‚à• ‚â§ r‚Åª¬π :=
le_trans (normed_group_hom.norm_completion_le _) $ LC.norm_T_inv_le _ _ _

end CLC

/-- `CLFCP v r' c n` is the functor sending a profinitely-filtered `T‚Åª¬π`-module `M`
   to `V-hat((M_c)^n)` -/
def CLCFP (V : SemiNormedGroup) (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ SemiNormedGroup :=
(FiltrationPow r' c n).op ‚ãô CLC V

theorem CLCFP_def (V : SemiNormedGroup) (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  CLCFP V r' c n = LCFP V r' c n ‚ãô Completion := rfl

namespace CLCFP

lemma map_norm_noninc {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : ((CLCFP V r' c n).map f).norm_noninc :=
CLC.map_norm_noninc _ _

@[simps app]
def res [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] : CLCFP V r' c‚ÇÅ n ‚ü∂ CLCFP V r' c‚ÇÇ n :=
(whisker_right (nat_trans.op $ FiltrationPow.cast_le r' c‚ÇÇ c‚ÇÅ n) (CLC V) : _)

lemma res_def [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n = whisker_right (nat_trans.op (FiltrationPow.cast_le r' c‚ÇÇ c‚ÇÅ n)) (CLC V) :=
rfl

lemma res_def' [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (M : ProFiltPseuNormGrpWithTinv r') :
  (res V r' c‚ÇÅ c‚ÇÇ n).app (op M) =
  (CLC V).map ((Filtration.cast_le ((ProFiltPseuNormGrpWithTinv.Pow r' n).obj M) c‚ÇÇ c‚ÇÅ)).op :=
rfl

lemma res_app' [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (M : (ProFiltPseuNormGrpWithTinv r')·µí·µñ) :
  (res V r' c‚ÇÅ c‚ÇÇ n).app M = (CLC V).map ((FiltrationPow.cast_le r' c‚ÇÇ c‚ÇÅ n).app (unop M)).op :=
rfl

@[simp] lemma res_refl : res V r' c c n = ùüô _ :=
by { rw [res, FiltrationPow.cast_le_refl, nat_trans.op_id, whisker_right_id'], refl }

lemma res_comp_res [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÉ ‚â§ c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ res V r' c‚ÇÇ c‚ÇÉ n = res V r' c‚ÇÅ c‚ÇÉ n :=
by simp only [res, ‚Üê whisker_right_comp, FiltrationPow.cast_le_comp, ‚Üê nat_trans.op_comp]

lemma res_norm_noninc [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (M) :
  ((res V r' c‚ÇÅ c‚ÇÇ n).app M).norm_noninc :=
Completion_map_norm_noninc _ $ LCFP.res_norm_noninc _ _ _ _ _ _

section Tinv
-- kmb commented out the next line
--open profinitely_filtered_pseudo_normed_group_with_Tinv
variables [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)]

-- @[simps obj {fully_applied := ff}]
def Tinv : CLCFP V r' c‚ÇÅ n ‚ü∂ CLCFP V r' c‚ÇÇ n :=
(whisker_right (nat_trans.op $ FiltrationPow.Tinv r' c‚ÇÇ c‚ÇÅ n)
  (LocallyConstant.obj V ‚ãô Completion) : _)
.

lemma Tinv_def : Tinv V r' c‚ÇÅ c‚ÇÇ n =
  (whisker_right (LCFP.Tinv V r' c‚ÇÅ c‚ÇÇ n) Completion : _) := rfl

lemma Tinv_def' : Tinv V r' c‚ÇÅ c‚ÇÇ n =
  whisker_right (nat_trans.op $ FiltrationPow.Tinv r' c‚ÇÇ c‚ÇÅ n) (CLC V) := rfl

lemma res_comp_Tinv [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÉ ‚â§ c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ r' * c‚ÇÇ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ Tinv V r' c‚ÇÇ c‚ÇÉ n = Tinv V r' c‚ÇÅ c‚ÇÇ n ‚â´ res V r' c‚ÇÇ c‚ÇÉ n :=
begin
  dsimp only [Tinv, res, CLC, LC],
  simp only [‚Üê whisker_right_comp, ‚Üê nat_trans.op_comp],
  refl
end

end Tinv

section T_inv

variables [normed_with_aut r V]

@[simps {fully_applied := ff}]
def T : CLCFP V r' c n ‚âÖ CLCFP V r' c n :=
((whiskering_left _ _ _).obj (FiltrationPow r' c n).op).map_iso (CLC.T r V)

@[simps app_apply {fully_applied := ff}]
def T_inv : CLCFP V r' c n ‚ü∂ CLCFP V r' c n :=
whisker_left (FiltrationPow r' c n).op (CLC.T_inv r V)

lemma T_inv_eq : (T r V r' c n).inv = T_inv r V r' c n := rfl

lemma T_inv_def : T_inv r V r' c n = (whisker_right (LCFP.T_inv r V r' c n) Completion : _) :=
rfl

lemma T_inv_app (M : (ProFiltPseuNormGrpWithTinv r')·µí·µñ) :
  (T_inv r V r' c n).app M =
    (CLC.T_inv r V).app ((FiltrationPow r' c n).op.obj M) :=
rfl

lemma res_comp_T_inv [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ T_inv r V r' c‚ÇÇ n =
    T_inv r V r' c‚ÇÅ n ‚â´ res V r' c‚ÇÅ c‚ÇÇ n :=
begin
  ext M : 2,
  simp only [nat_trans.comp_app, res_app', T_inv_app],
  exact (CLC.T_inv r V).naturality _,
end

end T_inv

end CLCFP

namespace breen_deligne

open CLCFP
variables {l m n}

namespace universal_map

variables (œï œà : universal_map m n)

def eval_CLCFP [œï.suitable c‚ÇÇ c‚ÇÅ] : CLCFP V r' c‚ÇÅ n ‚ü∂ CLCFP V r' c‚ÇÇ m :=
(whisker_right (œï.eval_LCFP V r' c‚ÇÅ c‚ÇÇ) Completion : _)

lemma eval_CLCFP_of (f : basic_universal_map m n) [f.suitable c‚ÇÇ c‚ÇÅ] :
  eval_CLCFP V r' c‚ÇÅ c‚ÇÇ (free_abelian_group.of f) =
  (whisker_right (nat_trans.op $ f.eval_FP r' c‚ÇÇ c‚ÇÅ) (CLC V)) :=
by { rw [eval_CLCFP, eval_LCFP_of, basic_universal_map.eval_LCFP, whisker_right_twice], refl }

@[simp] lemma eval_CLCFP_zero :
  (0 : universal_map m n).eval_CLCFP V r' c‚ÇÅ c‚ÇÇ = 0 :=
begin
  simp only [eval_CLCFP, eval_LCFP_zero],
  ext x : 2,
  exact Completion.map_zero _ _
end

@[simp] lemma eval_CLCFP_add [œï.suitable c‚ÇÇ c‚ÇÅ] [œà.suitable c‚ÇÇ c‚ÇÅ] :
  (œï + œà : universal_map m n).eval_CLCFP V r' c‚ÇÅ c‚ÇÇ =
  œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ + œà.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ :=
begin
  simp only [eval_CLCFP, eval_LCFP_add],
  ext x : 2,
  exact Completion.map_add
end

@[simp] lemma eval_CLCFP_sub [œï.suitable c‚ÇÇ c‚ÇÅ] [œà.suitable c‚ÇÇ c‚ÇÅ] :
  (œï - œà : universal_map m n).eval_CLCFP V r' c‚ÇÅ c‚ÇÇ =
  œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ - œà.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ :=
begin
  simp only [eval_CLCFP, eval_LCFP_sub],
  ext x : 2,
  exact Completion.map_sub
end

open category_theory.limits

lemma eval_CLCFP_comp (g : universal_map m n) (f : universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÅ] [hf : f.suitable c‚ÇÉ c‚ÇÇ] :
  @eval_CLCFP V r' c‚ÇÅ c‚ÇÉ _ _ (comp g f) (suitable.comp c‚ÇÇ) =
    g.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ f.eval_CLCFP V r' c‚ÇÇ c‚ÇÉ :=
by simp only [eval_CLCFP, ‚Üê whisker_right_comp, eval_LCFP_comp V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ]

lemma res_comp_eval_CLCFP
  [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [œï.suitable c‚ÇÑ c‚ÇÇ] [œï.suitable c‚ÇÉ c‚ÇÅ] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' c‚ÇÇ c‚ÇÑ =
    œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÉ ‚â´ res V r' c‚ÇÉ c‚ÇÑ m :=
by { dsimp only [CLC, res], simp only [eval_CLCFP, ‚Üê whisker_right_comp, ‚Üê whisker_right_twice],
     congr' 1, apply res_comp_eval_LCFP }

lemma Tinv_comp_eval_CLCFP [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)]
  [œï.suitable c‚ÇÉ c‚ÇÅ] [œï.suitable c‚ÇÑ c‚ÇÇ] :
  Tinv V r' c‚ÇÅ c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' c‚ÇÇ c‚ÇÑ =
    œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÉ ‚â´ Tinv V r' c‚ÇÉ c‚ÇÑ m :=
by simp only [eval_CLCFP, Tinv_def, ‚Üê whisker_right_comp]; congr' 1; apply Tinv_comp_eval_LCFP

lemma T_inv_comp_eval_CLCFP [normed_with_aut r V] [œï.suitable c‚ÇÇ c‚ÇÅ] :
  T_inv r V r' c‚ÇÅ n ‚â´ œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ T_inv r V r' c‚ÇÇ m :=
by simp only [eval_CLCFP, T_inv_def, ‚Üê whisker_right_comp, T_inv_comp_eval_LCFP]

lemma norm_eval_CLCFP_le [œï.suitable c‚ÇÇ c‚ÇÅ]
  (N : ‚Ñï) (h : œï.bound_by N) (M) :
  ‚à•(œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ).app M‚à• ‚â§ N :=
le_trans (normed_group_hom.norm_completion_le _) $ norm_eval_LCFP_le _ _ _ _ _ _ h _

end universal_map

end breen_deligne
