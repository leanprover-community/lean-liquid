import system_of_complexes.basic
import pseudo_normed_group.Tinv
import pseudo_normed_group.category

/-!

# The system of complexes in Theorem 9.4 of `analytic.pdf`

Theorem 9.4 is about a system of complexes built from Breen-Deligne data,
a seminormed group `V` with `T‚Åª¬π` (scaling by `r`) and a (certain explicit) profinitely filtered
pseudo-normed group `M` with `T‚Åª¬π` (scaling by `r'`). We do not specialise to Scholze's
`ùìú-bar_r'(S)` in this file, but allow general profinitely filtered `M`. This file
contains the construction of the system of complexes from this data.

## Main definitions

Let `BD = (n‚ÇÅ ‚ü∂ n‚ÇÇ ‚ü∂ ‚Ä¶)` be Breen-Deligne data, `Œ∫` a sequence of non-negative reals which are
suitable for `BD`, and say `r,c‚â•0` and `V` is a normed group with `T‚Åª¬π` scaling by `r`.

- `BD.complex Œ∫ r V r' c`: the functor taking a profinitely filtered pseudo-normed group `M`
  to the cochain complex `V-hat(M_{‚â§c}^n‚ÇÅ)^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^n‚ÇÇ)^{T‚Åª¬π} ‚ü∂ ‚Ä¶`
  induced by the data.

- `BD.system Œ∫ r V r'`: the functor sending a profinitely filtered pseudo-normed group `M`
  to the system of complexes whose component at `c`
  is `V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶`

-/
open_locale classical nnreal
noncomputable theory

open opposite pseudo_normed_group category_theory category_theory.limits breen_deligne


universe variable u

namespace breen_deligne
namespace data

section
variables (BD : breen_deligne.data) (Œ∫ : ‚Ñï ‚Üí ‚Ñù‚â•0)
variables (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (r' ‚â§ 1)]
variables (M : ProFiltPseuNormGrpWithTinv.{u} r') (c : ‚Ñù‚â•0)

/-- The object for the complex of seminormed groups
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex‚ÇÇ_X (a b : ‚Ñï ‚Üí ‚Ñù‚â•0) [‚àÄ i, fact (b i ‚â§ r' * a i)] (i : ‚Ñï) :
  (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ SemiNormedGroup :=
CLCFPTinv‚ÇÇ r V r' (a i) (b i) (BD.X i)
/-- The object for the complex of seminormed groups
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex_X (i : ‚Ñï) : (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ SemiNormedGroup :=
complex‚ÇÇ_X BD r V r' (Œª i, c * Œ∫ i) (Œª i, r' * (c * Œ∫ i)) i

variable [fact (0 < r')]
variables [BD.suitable Œ∫]

/-- The differential for the complex of seminormed groups
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex‚ÇÇ_d (a b : ‚Ñï ‚Üí ‚Ñù‚â•0) [‚àÄ i, fact (b i ‚â§ r' * a i)]
  [BD.suitable a] [BD.suitable b] (i j : ‚Ñï) :
  BD.complex‚ÇÇ_X r V r' a b i ‚ü∂ BD.complex‚ÇÇ_X r V r' a b j :=
(BD.d j i).eval_CLCFPTinv‚ÇÇ r V r' _ _ _ _

/-- The differential for the complex of seminormed groups
`V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex_d (i j : ‚Ñï) : BD.complex_X Œ∫ r V r' c i ‚ü∂ BD.complex_X Œ∫ r V r' c j :=
(BD.d j i).eval_CLCFPTinv r V r' (c * Œ∫ i) (c * Œ∫ j)

lemma complex_d_comp_d (i j k : ‚Ñï) :
  BD.complex_d Œ∫ r V r' c i j ‚â´ BD.complex_d Œ∫ r V r' c j k = 0 :=
by simp only [complex_d, ‚Üê universal_map.eval_CLCFPTinv_comp, BD.d_comp_d,
    universal_map.eval_CLCFPTinv_zero]

end

section

open homological_complex

variables (BD : breen_deligne.data) (Œ∫ : ‚Ñï ‚Üí ‚Ñù‚â•0) [BD.suitable Œ∫]
variables (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] (c : ‚Ñù‚â•0)

/-- The complex of seminormed groups `V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
@[simps]
def complex‚ÇÇ (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)]
   (a b : ‚Ñï ‚Üí ‚Ñù‚â•0) [‚àÄ i, fact (b i ‚â§ r' * a i)] [BD.suitable a] [BD.suitable b] :
  (ProFiltPseuNormGrpWithTinv.{u} r')·µí·µñ ‚•§ cochain_complex SemiNormedGroup ‚Ñï :=
{ obj := Œª M,
  { X := Œª i, (BD.complex‚ÇÇ_X r V r' a b i).obj M,
    d := Œª i j, (BD.complex‚ÇÇ_d r V r' a b i j).app M,
    d_comp_d' := Œª i j k _ _,
    begin
      rw [‚Üê nat_trans.comp_app],
      simp only [complex‚ÇÇ_d, ‚Üê universal_map.eval_CLCFPTinv‚ÇÇ_comp, BD.d_comp_d,
        universal_map.eval_CLCFPTinv‚ÇÇ_zero],
      refl
    end,
    shape' := Œª i j hij,
    begin
      simp only [complex‚ÇÇ_d, ‚Üê universal_map.eval_CLCFPTinv‚ÇÇ_comp, BD.shape _ _ hij,
        universal_map.eval_CLCFPTinv‚ÇÇ_zero],
      refl
    end },
  map := Œª M‚ÇÅ M‚ÇÇ f,
  { f := Œª i, ((CLCFPTinv‚ÇÇ r V r' (a i) (b i) (BD.X i)).map f : _),
    comm' := Œª i j _, nat_trans.naturality _ _ },
  map_id' := Œª M, by { ext i : 2, apply category_theory.functor.map_id, },
  map_comp' := Œª M‚ÇÅ M‚ÇÇ M‚ÇÉ f g, by { ext i : 2, apply category_theory.functor.map_comp } }

/-- The complex of seminormed groups `V-hat(M_{‚â§c})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^2)^{T‚Åª¬π} ‚ü∂ ‚Ä¶` -/
def complex (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] (c : ‚Ñù‚â•0) :
  (ProFiltPseuNormGrpWithTinv.{u} r')·µí·µñ ‚•§ cochain_complex SemiNormedGroup ‚Ñï :=
BD.complex‚ÇÇ r V r' (Œª i, c * Œ∫ i) (Œª i, r' * (c * Œ∫ i))

namespace complex

lemma map_norm_noninc {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) (n : ‚Ñï) :
  (((BD.complex Œ∫ r V r' c).map f).f n).norm_noninc :=
CLCFPTinv.map_norm_noninc _ _ _ _ _ _

end complex

lemma complex_obj_d (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] (c : ‚Ñù‚â•0) (i j : ‚Ñï) (M) :
  ((BD.complex Œ∫ r V r' c).obj M).d i j =
    ((BD.d j i).eval_CLCFPTinv r V r' _ _).app M :=
rfl

theorem comm_sq_app {C D} [category C] [category D]
  {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : C ‚•§ D} {f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ} {f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ} {œÜ : X‚ÇÅ ‚ü∂ X‚ÇÇ} {œà : Y‚ÇÅ ‚ü∂ Y‚ÇÇ}
  (hf : f‚ÇÅ ‚â´ œà = œÜ ‚â´ f‚ÇÇ) (c : C) : f‚ÇÅ.app c ‚â´ œà.app c = œÜ.app c ‚â´ f‚ÇÇ.app c :=
by rw [‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app, hf]

/-- The system of complexes
`V-hat(M_{‚â§c}^{n‚ÇÅ})^{T‚Åª¬π} ‚ü∂ V-hat(M_{‚â§c_1c}^{n‚ÇÇ})^{T‚Åª¬π} ‚ü∂ ...`
occurring in Theorems 9.4 and 9.5 of [Analytic], as a functor in `M`. -/
@[simps obj map]
def system (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] :
  (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ system_of_complexes :=
functor.flip {
  obj := Œª c, BD.complex Œ∫ r V r' (unop c),
  map := Œª c‚ÇÇ c‚ÇÅ h,
    { app := Œª M, begin
        haveI : fact ((unop c‚ÇÅ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÇ : ‚Ñù‚â•0)) := ‚ü®h.unop.down.down‚ü©,
        refine
        { f := Œª i, (CLCFPTinv‚ÇÇ.res r V r' _ _ _ _ (BD.X i)).app _,
          comm' := _ },
        { intros i j _, apply comm_sq_app,
          apply universal_map.res_comp_eval_CLCFPTinv‚ÇÇ },
      end,
      naturality' := Œª M N f, begin
        ext i : 2,
        erw [comp_f, comp_f],
        apply nat_trans.naturality,
      end },
  map_id' := by {
    intro c, ext M i : 4,
    refine nat_trans.congr_app (CLCFPTinv‚ÇÇ.res_refl r V r' _ _ _) M },
  map_comp' := begin
    intros c‚ÇÉ c‚ÇÇ c‚ÇÅ h h',
    haveI H' : fact ((unop c‚ÇÅ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÇ : ‚Ñù‚â•0)) := ‚ü®h'.unop.down.down‚ü©,
    haveI H : fact ((unop c‚ÇÇ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÉ : ‚Ñù‚â•0)) := ‚ü®h.unop.down.down‚ü©,
    haveI : fact ((unop c‚ÇÅ : ‚Ñù‚â•0) ‚â§ (unop c‚ÇÉ : ‚Ñù‚â•0)) := ‚ü®H'.out.trans H.out‚ü©,
    ext M i : 4, symmetry,
    exact nat_trans.congr_app (CLCFPTinv‚ÇÇ.res_comp_res r V r' _ _ _ _ _ _ _) _,
  end }
.

-- move this
instance fact_unop_op {c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  fact ((unop (op c‚ÇÇ)) ‚â§ (unop (op c‚ÇÅ))) :=
by { dsimp, apply_assumption }

lemma system_res_def (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] {M}
  {c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} {i : ‚Ñï} [h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  @system_of_complexes.res ((BD.system Œ∫ r V r').obj M) c‚ÇÅ c‚ÇÇ i _ =
    (CLCFPTinv.res r V r' _ _ _).app M :=
rfl

lemma system_obj_d (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
  (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)] {M}
  (c : ‚Ñù‚â•0) (i j : ‚Ñï) :
  @system_of_complexes.d ((BD.system Œ∫ r V r').obj M) c i j =
    ((BD.d j i).eval_CLCFPTinv r V r' _ _).app M :=
rfl

lemma system_map_iso_isometry {M‚ÇÅ M‚ÇÇ : (ProFiltPseuNormGrpWithTinv r')·µí·µñ}
  (f : M‚ÇÅ ‚âÖ M‚ÇÇ) (i : ‚Ñï) :
  isometry ((((BD.system Œ∫ r V r').map_iso f).hom.app (op c)).f i) :=
begin
  simp only [‚Üê iso.app_hom, ‚Üê homological_complex.hom.iso_app_hom],
  apply SemiNormedGroup.iso_isometry_of_norm_noninc;
  apply complex.map_norm_noninc,
end

instance system.separated_space (c : ‚Ñù‚â•0) (i : ‚Ñï) (M) :
  separated_space (((BD.system Œ∫ r V r').obj M) c i) :=
CLCFPTinv‚ÇÇ.separated_space _ _ _ _ _ _ _

instance system.complete_space (c : ‚Ñù‚â•0) (i : ‚Ñï) (M) :
  complete_space (((BD.system Œ∫ r V r').obj M) c i) :=
CLCFPTinv‚ÇÇ.complete_space _ _ _ _ _ _ _

end

section

variables (BD : breen_deligne.data)
variables (r : ‚Ñù‚â•0) (V : SemiNormedGroup) [normed_with_aut r V] [fact (0 < r)]
variables (r' : ‚Ñù‚â•0) [fact (0 < r')] [fact (r' ‚â§ 1)]
variables (Œ∫ : ‚Ñï ‚Üí ‚Ñù‚â•0) [BD.very_suitable r r' Œ∫]

variables {r V r' Œ∫}

lemma system_admissible {M} : ((BD.system Œ∫ r V r').obj M).admissible :=
{ d_norm_noninc' := Œª c i j hij,
  begin
    haveI : universal_map.very_suitable (BD.d j i) r r' (unop (op c) * Œ∫ j) (unop (op c) * Œ∫ i) :=
    by { dsimp only [unop_op], apply_instance },
    exact universal_map.eval_CLCFPTinv_norm_noninc _ _ _ _ _ _ _,
  end,
  res_norm_noninc := Œª c‚ÇÅ c‚ÇÇ i h, CLCFPTinv.res_norm_noninc _ _ _ _ _ _ _, }

end

end data

end breen_deligne

#lint- only unused_arguments def_lemma doc_blame
