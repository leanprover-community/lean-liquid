import pseudo_normed_group.FP2
import condensed.adjunctions
import free_pfpng.acyclic
import for_mathlib.derived.ext_coproducts
import for_mathlib.derived.example
import breen_deligne.eval2
import system_of_complexes.shift_sub_id
import for_mathlib.AddCommGroup.explicit_products
import condensed.Qprime_isoms
import condensed.short_exact
import condensed.bd_ses
import condensed.filtered_colimits

noncomputable theory

open_locale nnreal

universe u

open category_theory category_theory.limits breen_deligne

def ProFiltPseuNormGrpWithTinv‚ÇÅ.to_CHFPNG {r'} (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r') :
  CompHausFiltPseuNormGrp :=
(PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r' ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó).obj M

section step1

variables (r' : ‚Ñù‚â•0)
variables (BD : breen_deligne.data) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')

abbreviation freeCond := Profinite_to_Condensed.{u} ‚ãô CondensedSet_to_Condensed_Ab

def QprimeFP_nat : ‚Ñù‚â•0 ‚•§ chain_complex (Condensed.{u} Ab.{u+1}) ‚Ñï :=
FPsystem r' BD ‚ü®M‚ü© Œ∫ ‚ãô (freeCond.{u}.map_FreeAb ‚ãô FreeAb.eval _).map_homological_complex _

def QprimeFP_int : ‚Ñù‚â•0 ‚•§ cochain_complex (Condensed.{u} Ab.{u+1}) ‚Ñ§ :=
QprimeFP_nat r' BD Œ∫ M ‚ãô homological_complex.embed complex_shape.embedding.nat_down_int_up

def QprimeFP : ‚Ñù‚â•0 ‚•§ bounded_homotopy_category (Condensed.{u} Ab.{u+1}) :=
QprimeFP_nat r' BD Œ∫ M ‚ãô chain_complex.to_bounded_homotopy_category

end step1

section step2

variables {r' : ‚Ñù‚â•0}
variables (BD : breen_deligne.package) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')

def ProFiltPseuNormGrpWithTinv‚ÇÅ.to_Condensed : Condensed.{u} Ab.{u+1} :=
(PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r' ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{u} ‚ãô
  CompHausFiltPseuNormGrp.to_Condensed.{u}).obj M

-- move me
/-- `Tinv : M ‚Üí M` as hom of condensed abelian groups -/
def _root_.ProFiltPseuNormGrpWithTinv‚ÇÅ.Tinv_cond : M.to_Condensed ‚ü∂ M.to_Condensed :=
(CompHausFiltPseuNormGrp.to_Condensed.{u}).map
  profinitely_filtered_pseudo_normed_group_with_Tinv.Tinv

local attribute [instance] type_pow

set_option pp.universes true

def QprimeFP_incl_aux'' (c : ‚Ñù‚â•0) (n : ‚Ñï) (M : ProFiltPseuNormGrpWithTinv.{u} r') (i : fin n) :
  (FiltrationPow r' c n).obj M ‚ü∂ ((Filtration r').obj c).obj M :=
((Filtration r').obj c).map $
  profinitely_filtered_pseudo_normed_group_with_Tinv.pi_proj _ _ i

def QprimeFP_incl_aux'
  (c : ‚Ñù‚â•0) (n : ‚Ñï) (i : (fin n)) (S : Profinite.{u}·µí·µñ) :
  ulift_functor.{u+1 u}.obj (opposite.unop.{u+2} S ‚ü∂ pseudo_normed_group.filtration_obj.{u} (M ^ n) c) ‚ü∂
  ulift_functor.{u+1 u}.obj ((CompHausFiltPseuNormGrp.of.{u} ‚Ü•((PFPNGT‚ÇÅ_to_PFPNG‚ÇÅ‚Çë‚Çó.{u} r').obj M)).presheaf (opposite.unop.{u+2} S)) :=
ulift_functor.map $ Œª f, ‚ü®subtype.val ‚àò QprimeFP_incl_aux'' c n ‚ü®M‚ü© i ‚àò f,
  by refine ‚ü®_, _, continuous.comp _ _, rfl‚ü©; apply continuous_map.continuous‚ü©

-- move me
instance : preserves_limits (Condensed_Ab_to_CondensedSet.{u}) :=
adjunction.right_adjoint_preserves_limits Condensed_Ab_CondensedSet_adjunction

-- move me
instance : preserves_limits CondensedSet_to_presheaf :=
adjunction.right_adjoint_preserves_limits CondensedSet_presheaf_adjunction

universe v

lemma _root_.Ab.ulift_map_apply {A B : Ab.{u}} (f : A ‚ü∂ B) :
  ‚áë(Ab.ulift.{v}.map f) = ulift_functor.map f :=
by { ext, refl }

-- def QprimeFP_incl_aux_foo (c : ‚Ñù‚â•0) (n : ‚Ñï) :
--   (pseudo_normed_group.filtration_obj (M ^ n) c).to_Condensed ‚ü∂
--   (Condensed_Ab_to_CondensedSet.obj (‚®Å Œª (i : ulift (fin n)), M.to_Condensed)) :=
-- begin
--   let x := biproduct.is_bilimit (Œª (i : ulift (fin n)), M.to_Condensed),
--   let y := is_bilimit_of_preserves Condensed_Ab_to_presheaf x,
--   refine ‚ü®y.is_limit.lift ‚ü®_, ‚ü®Œª i, ‚ü®_, _‚ü©, _‚ü©‚ü©‚ü©,
--   { refine QprimeFP_incl_aux' _ _ _ i.down, },
--   { intros S T f,
--     dsimp [QprimeFP_incl_aux', ProFiltPseuNormGrpWithTinv‚ÇÅ.to_Condensed],
--     rw [‚Üê ulift_functor.map_comp, Ab.ulift_map_apply, ‚Üê ulift_functor.map_comp],
--     congr' 1, },
--   { clear y x,
--     rintros ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©,
--     ext S : 2,
--     dsimp [QprimeFP_incl_aux', ProFiltPseuNormGrpWithTinv‚ÇÅ.to_Condensed],
--     simp only [discrete.functor_map_id, category.id_comp],
--     symmetry, apply category.comp_id, }
-- end

def QprimeFP_incl_aux (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  (pseudo_normed_group.filtration_obj (M ^ n) c).to_Condensed ‚ü∂
  (Condensed_Ab_to_CondensedSet.obj (‚®Å Œª (i : ulift (fin n)), M.to_Condensed)) :=
begin
  let x := biproduct.is_limit (Œª (i : ulift (fin n)), M.to_Condensed),
  let y := is_limit_of_preserves (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf) x,
  refine ‚ü®y.lift ‚ü®_, ‚ü®Œª i, ‚ü®_, _‚ü©, _‚ü©‚ü©‚ü©,
  { refine QprimeFP_incl_aux' _ _ _ i.as.down, },
  { intros S T f,
    rcases i with ‚ü®‚ü®i‚ü©‚ü©,
    dsimp [QprimeFP_incl_aux', ProFiltPseuNormGrpWithTinv‚ÇÅ.to_Condensed],
    rw [‚Üê ulift_functor.map_comp, Ab.ulift_map_apply, ‚Üê ulift_functor.map_comp],
    congr' 1, },
  { clear y x,
    rintros ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®‚ü®‚ü©‚ü©‚ü©,
    ext S : 2,
    dsimp [QprimeFP_incl_aux', ProFiltPseuNormGrpWithTinv‚ÇÅ.to_Condensed],
    simp only [discrete.functor_map_id, category.id_comp],
    symmetry, apply category.comp_id, }
end
.

set_option pp.universes false

lemma lift_app {C ùìê Œπ : Type*} [category C] [category ùìê] [preadditive ùìê]
  {F G : C ‚•§ ùìê} (f : Œπ ‚Üí (F ‚ü∂ G)) (x) (T) :
  (free_abelian_group.lift f x).app T = free_abelian_group.lift (Œª i, (f i).app T) x :=
begin
  simp only [‚Üê nat_trans.app_hom_apply, ‚Üê add_monoid_hom.comp_apply],
  congr' 1, clear x, ext x,
  simp only [add_monoid_hom.coe_comp, function.comp_app, free_abelian_group.lift.of],
end

lemma map_FreeAb_comp_map {X Y Z : Type*} [category X] [category Y] [category Z]
  (F : X ‚•§ Y) (G : Y ‚•§ Z) {Œ± Œ≤ : FreeAb X} (f : Œ± ‚ü∂ Œ≤) :
  (F ‚ãô G).map_FreeAb.map f = G.map_FreeAb.map (F.map_FreeAb.map f) :=
begin
  dsimp only [functor.map_FreeAb, functor.comp_map],
  rw [‚Üê add_monoid_hom.comp_apply], congr' 1, clear f,
  ext f,
  simp only [free_abelian_group.map_of_apply, functor.comp_map, add_monoid_hom.coe_comp, function.comp_app],
end

open category_theory.preadditive
open_locale big_operators

lemma biproduct.desc_eq_sum {ùìê Œπ : Type*} [category ùìê] [abelian ùìê] [fintype Œπ] [decidable_eq Œπ]
  (M : Œπ ‚Üí ùìê) (X : ùìê) (f : Œ† i, M i ‚ü∂ X) :
  biproduct.desc f = ‚àë i : Œπ, (biproduct.œÄ _ _) ‚â´ (f i) :=
begin
  ext i, simp only [biproduct.Œπ_desc, comp_sum],
  rw finset.sum_eq_single_of_mem i (finset.mem_univ _),
  { rw [biproduct.Œπ_œÄ_assoc, dif_pos rfl, eq_to_hom_refl, category.id_comp], },
  { rintro j - hj, rw [biproduct.Œπ_œÄ_ne_assoc, zero_comp], exact hj.symm }
end

instance group_of_sections (A : Condensed.{u} Ab.{u+1})
  (S : Profinite.{u}·µí·µñ) :
  add_comm_group (((Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).obj A).obj S) :=
AddCommGroup.add_comm_group_instance
  ((@Sheaf.val Profinite Profinite.category proetale_topology Ab AddCommGroup.large_category A).obj S)

instance group_of_homs (X A : Type u) [add_comm_group A] :
  add_comm_group (X ‚ü∂ A) :=
@pi.add_comm_group X _ _

instance ulift_functor_group (A : Type u) [add_comm_group A] :
  add_comm_group (ulift_functor.obj A) :=
ulift.add_comm_group

lemma QprimeFP_incl_aux3 {X A : Type u} [add_comm_group A] {Œπ : Type*}
  (s : finset Œπ) (n : Œπ ‚Üí ‚Ñ§) (f : Œπ ‚Üí (X ‚ü∂ A)) :
  (‚àë i in s, n i ‚Ä¢ (ulift_functor.{v}).map (f i)) = ulift_functor.map (‚àë i in s, n i ‚Ä¢ (f i)) :=
begin
  let œÜ := add_monoid_hom.mk' (Œª g : X ‚ü∂ A, ulift_functor.{v}.map g) _,
  { show ‚àë i in s, n i ‚Ä¢ œÜ (f i) = _, simp only [‚Üê œÜ.map_sum, ‚Üê œÜ.map_zsmul], refl },
  intros g‚ÇÅ g‚ÇÇ, refl,
end

instance group_of_sheaf_homs (X) (A : Condensed.{u} Ab.{u+1}) :
  add_comm_group (X ‚ü∂ (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).obj A) :=
{ add := Œª f g, ‚ü®Œª S, f.app S + g.app S,
    by { intros S T œÜ, show X.map œÜ ‚â´ f.app T + X.map œÜ ‚â´ g.app T = _,
      simp only [nat_trans.naturality], ext1 x, symmetry,
      exact (A.val.map œÜ).map_add (f.app S x) (g.app S x) }‚ü©,
  add_assoc := by { intros, ext : 2, apply add_assoc },
  zero := ‚ü®Œª S, 0, by { intros S T œÜ, ext1 x, symmetry, exact (A.val.map œÜ).map_zero }‚ü©,
  zero_add := by { intros, ext : 2, apply zero_add },
  add_zero := by { intros, ext : 2, apply add_zero },
  nsmul := Œª n f, ‚ü®Œª S, n ‚Ä¢ f.app S,
    by { intros S T œÜ, show n ‚Ä¢ (X.map œÜ ‚â´ f.app T) = _,
      simp only [nat_trans.naturality], ext1 x, symmetry,
      exact (A.val.map œÜ).map_nsmul (f.app S x) n }‚ü©,
  nsmul_zero' := by { intros, ext : 2, apply add_comm_group.nsmul_zero' },
  nsmul_succ' := by { intros, ext : 2, apply add_comm_group.nsmul_succ' },
  neg := Œª f, ‚ü®Œª S, -f.app S,
    by { intros S T œÜ, show -(X.map œÜ ‚â´ f.app T) = _,
      simp only [nat_trans.naturality], ext1 x, symmetry,
      exact (A.val.map œÜ).map_neg (f.app S x) }‚ü©,
  sub := Œª f g, ‚ü®Œª S, f.app S - g.app S,
    by { intros S T œÜ, show X.map œÜ ‚â´ f.app T - X.map œÜ ‚â´ g.app T = _,
      simp only [nat_trans.naturality], ext1 x, symmetry,
      exact (A.val.map œÜ).map_sub (f.app S x) (g.app S x) }‚ü©,
  sub_eq_add_neg := by { intros, ext : 2, apply sub_eq_add_neg },
  zsmul := Œª n f, ‚ü®Œª S, n ‚Ä¢ f.app S,
    by { intros S T œÜ, show n ‚Ä¢ (X.map œÜ ‚â´ f.app T) = _,
      simp only [nat_trans.naturality], ext1 x, symmetry,
      exact (A.val.map œÜ).map_zsmul (f.app S x) n }‚ü©,
  zsmul_zero' := by { intros, ext : 2, apply add_comm_group.zsmul_zero' },
  zsmul_succ' := by { intros, ext : 2, apply add_comm_group.zsmul_succ' },
  zsmul_neg' := by { intros, ext : 2, apply add_comm_group.zsmul_neg' },
  add_left_neg := by { intros, ext : 2, apply add_left_neg },
  add_comm := by { intros, ext : 2, apply add_comm } }

lemma QprimeFP_incl_aux1 {A B : Condensed.{u} Ab.{u+1}} {Œπ : Type*} {X}
  (f : X ‚ü∂ (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).obj A)
  (s : finset Œπ) (n : Œπ ‚Üí ‚Ñ§) (g : Œπ ‚Üí (A ‚ü∂ B)) :
  f ‚â´ (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).map (‚àë i in s, n i ‚Ä¢ g i) =
  ‚àë i in s, n i ‚Ä¢ (f ‚â´ (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).map (g i)) :=
begin
  let œÜ := add_monoid_hom.mk' (Œª g : A ‚ü∂ B, f ‚â´ (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).map g) _,
  { show œÜ _ = _, simp only [œÜ.map_sum, œÜ.map_zsmul], refl },
  intros g‚ÇÅ g‚ÇÇ, refl,
end

lemma QprimeFP_incl_aux2 {A : Condensed.{u} Ab.{u+1}} {Œπ : Type*} {X}
  (s : finset Œπ) (n : Œπ ‚Üí ‚Ñ§)
  (f : Œπ ‚Üí (X ‚ü∂ (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).obj A)) (S) :
  (‚àë i in s, n i ‚Ä¢ f i).app S = ‚àë i in s, n i ‚Ä¢ ((f i).app S) :=
begin
  let œÜ := add_monoid_hom.mk' (Œª g : X ‚ü∂ (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).obj A, nat_trans.app g S) _,
  { show œÜ _ = _, simp only [œÜ.map_sum, œÜ.map_zsmul], refl },
  intros g‚ÇÅ g‚ÇÇ, refl,
end

-- move me
-- lemma _root_.comphaus_filtered_pseudo_normed_group_hom.coe_to_add_monoid_hom
--   {M N : Type*} [comphaus_filtered_pseudo_normed_group M] [comphaus_filtered_pseudo_normed_group N]
--   (f : comphaus_filtered_pseudo_normed_group_hom M N) :
--   ‚áëf.to_add_monoid_hom = f := rfl

@[simps] def _root_.CompHausFiltPseuNormGrp.presheaf_incl
  (A : CompHausFiltPseuNormGrp.{u}) (S : Profinite.{u}) :
  CompHausFiltPseuNormGrp.presheaf A S ‚Üí+ (S ‚Üí A) :=
add_monoid_hom.mk' subtype.val $ Œª _ _, rfl

def QprimeFP_incl (c : ‚Ñù‚â•0) :
  (QprimeFP_int r' BD.data Œ∫ M).obj c ‚ü∂
  (BD.eval' freeCond').obj M.to_Condensed :=
(homological_complex.embed complex_shape.embedding.nat_down_int_up).map
{ f := Œª n, CondensedSet_to_Condensed_Ab.map $ QprimeFP_incl_aux _ _ _,
  comm' := begin
    rintro _ n (rfl : _ = _),
    rw [package.eval_functor_obj_d],
    dsimp only [universal_map.eval_Pow],
    dsimp only [QprimeFP_nat, FPsystem, functor.comp_obj, functor.map_homological_complex_obj_d],
    rw [chain_complex.of_d],
    delta freeCond freeCond',
    rw [functor.comp_map, map_FreeAb_comp_map, lift_app],
    dsimp only [FreeAb.eval, functor.map_FreeAb, FPsystem.d,
      universal_map.eval_FP2],
    simp only [whisker_right_app, free_abelian_group.lift_map, function.comp.left_id,
      nat_trans.app_sum, map_sum, basic_universal_map.eval_Pow_app,
      nat_trans.app_zsmul, basic_universal_map.eval_FP2, map_zsmul],
    dsimp only [FreeAb.of_functor],
    simp only [free_abelian_group.lift.of, function.comp_app],
    rw [free_abelian_group.lift_eq_sum, comp_sum, sum_comp, ‚Üê finset.sum_coe_sort],
    apply finset.sum_congr rfl,
    rintro t -,
    rw [comp_zsmul, zsmul_comp], refine congr_arg2 _ rfl _,
    rw [functor.comp_map, ‚Üê functor.map_comp, ‚Üê functor.map_comp],
    congr' 1,
    ext1,
    let x := Œª n, biproduct.is_limit (Œª (i : ulift (fin (BD.data.X n))), M.to_Condensed),
    let y := Œª n, is_limit_of_preserves (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf) (x n),
    apply (y _).hom_ext, rintro ‚ü®j‚ü©,
    rw [‚Üê CondensedSet_to_presheaf_map, ‚Üê CondensedSet_to_presheaf_map, functor.map_comp,
      ‚Üê functor.comp_map, category.assoc, functor.map_comp, category.assoc],
    erw [‚Üê functor.map_comp, biproduct.matrix_œÄ],
    dsimp only [QprimeFP_incl_aux, CondensedSet_to_presheaf_map],
    rw (y _).fac,
    simp only [biproduct.desc_eq_sum, comp_zsmul, category.comp_id],
    rw [QprimeFP_incl_aux1],
    have help : ‚àÄ n i,
      ((Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).map_cone
        (biproduct.bicone (Œª (i : ulift (fin (BD.data.X n))), M.to_Condensed)).to_cone).œÄ.app ‚ü®i‚ü© =
      (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).map
        (biproduct.œÄ (Œª (i : ulift (fin (BD.data.X n))), M.to_Condensed) i),
    { intros, refl },
    simp only [‚Üê help, (y _).fac], clear help,
    dsimp only [basic_universal_map.eval_FP, Profinite_to_Condensed_map_val,
      basic_universal_map.eval_png‚ÇÄ],
    ext S : 2,
    erw QprimeFP_incl_aux2,
    dsimp only [nat_trans.comp_app, whisker_right_app, QprimeFP_incl_aux'],
    rw [‚Üê ulift_functor.map_comp, types_comp, QprimeFP_incl_aux3],
    congr' 1,
    dsimp only [function.comp, yoneda_map_app, yoneda_obj_obj, chain_complex.of_X,
      Profinite.coe_comp_apply, continuous_map.coe_mk, QprimeFP_incl_aux''],
    ext f s, clear y x,
    dsimp only [subtype.coe_mk, Filtration_obj_map_to_fun, add_monoid_hom.mk'_apply,
      comphaus_filtered_pseudo_normed_group_with_Tinv_hom.level, pseudo_normed_group.level,
      profinitely_filtered_pseudo_normed_group_with_Tinv.pi_proj,
      comphaus_filtered_pseudo_normed_group_with_Tinv_hom.coe_mk,
      pi.eval_add_monoid_hom_apply, breen_deligne.basic_universal_map.eval_png‚ÇÄ,
      breen_deligne.basic_universal_map.eval_png,
      comphaus_filtered_pseudo_normed_group.pi_lift,
      comphaus_filtered_pseudo_normed_group_hom.coe_mk, add_monoid_hom.mk_to_pi_apply],
    simp only [‚Üê comphaus_filtered_pseudo_normed_group_hom.to_add_monoid_hom_hom_apply,
      add_monoid_hom.map_sum],
    rw [fintype.sum_apply, ‚Üê add_monoid_hom.eval_apply_apply, add_monoid_hom.map_sum,
      ‚Üê CompHausFiltPseuNormGrp.presheaf_incl_apply, add_monoid_hom.map_sum, fintype.sum_apply],
    rw [‚Üê equiv.ulift.{u+1 0}.sum_comp],
    refine finset.sum_congr rfl _,
    intros t ht, refl,
  end }

variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

def QprimeFP_sigma_proj :
  ‚àê (Œª k, (QprimeFP_int r' BD.data Œ∫ M).obj (Œπ k)) ‚ü∂
  (BD.eval' freeCond').obj M.to_Condensed :=
sigma.desc $ Œª n, QprimeFP_incl BD Œ∫ M _

instance QprimeFP.uniformly_bounded :
  bounded_homotopy_category.uniformly_bounded (Œª k, (QprimeFP r' BD.data Œ∫ M).obj (Œπ k)) :=
begin
  use 1, intro k, apply chain_complex.bounded_by_one,
end

end step2

section step3
open bounded_homotopy_category

variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)
variables {C : Type*} [category C] [preadditive C]
variables (A B : ‚Ñù‚â•0 ‚•§ C)
variables [has_coproduct (Œª (k : ulift ‚Ñï), A.obj (Œπ k))]
variables [has_coproduct (Œª (k : ulift ‚Ñï), B.obj (Œπ k))]

include hŒπ

def sigma_shift_cone (c : cofan (Œª k, A.obj (Œπ k))) :
  cofan (Œª k, A.obj (Œπ k)) :=
{ X := c.X,
  Œπ := discrete.nat_trans $ Œª ‚ü®(j: ulift ‚Ñï)‚ü©,
        A.map (hom_of_le $ hŒπ $ (by { cases j, apply nat.le_succ } : j ‚â§ ‚ü®j.down+1‚ü©)) ‚â´
          c.Œπ.app ‚ü®‚ü®j.down + 1‚ü©‚ü© }

omit hŒπ

def sigma_shift' (c : cofan (Œª k, A.obj (Œπ k))) (hc : is_colimit c) :
  c.X ‚ü∂ (sigma_shift_cone Œπ hŒπ A c).X := hc.desc _

def sigma_shift : ‚àê (Œª k, A.obj (Œπ k)) ‚ü∂ ‚àê (Œª k, A.obj (Œπ k)) :=
sigma_shift' _ hŒπ _ _ (colimit.is_colimit _)

def QprimeFP.shift_sub_id : ‚àê (Œª k, A.obj (Œπ k)) ‚ü∂ ‚àê (Œª k, A.obj (Œπ k)) :=
sigma_shift _ hŒπ _ - ùüô _

variables {A B}

def sigma_map (f : A ‚ü∂ B) : ‚àê (Œª k, A.obj (Œπ k)) ‚ü∂ ‚àê (Œª k, B.obj (Œπ k)) :=
sigma.desc $ Œª k, f.app _ ‚â´ sigma.Œπ _ k

end step3

section step4

variables {r' : ‚Ñù‚â•0}
variables (BD : breen_deligne.package) (Œ∫ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ c, BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

open opposite category_theory.preadditive

open_locale classical

set_option pp.universes true

def coproduct_eval_iso
  {Œ± : Type (u+1)} (X : Œ± ‚Üí homological_complex (Condensed.{u} Ab.{u+1}) (complex_shape.up ‚Ñ§))
  (n : ‚Ñ§) (T : ExtrDisc.{u}) :
  ((‚àê X).X n).val.obj (op T.val) ‚âÖ
  AddCommGroup.of (direct_sum Œ± (Œª a, ((X a).X n).val.obj (op T.val))) :=
begin
  refine preserves_colimit_iso
    ((homological_complex.eval (Condensed.{u} Ab.{u+1}) (complex_shape.up ‚Ñ§) n
    ‚ãô Condensed.evaluation Ab.{u+1} T.val)) _ ‚â™‚â´ _,
  refine _ ‚â™‚â´ (colimit.is_colimit $ discrete.functor
    (Œª a, ((X a).X n).val.obj (op T.val))).cocone_point_unique_up_to_iso
    (AddCommGroup.is_colimit_direct_sum_cofan.{u+1 u+1} (Œª a, ((X a).X n).val.obj (op T.val))),
  refine has_colimit.iso_of_nat_iso (discrete.nat_iso _),
  intros i, exact iso.refl _,
end

lemma sigma_Œπ_coproduct_eval_iso
  {Œ± : Type (u+1)} (X : Œ± ‚Üí homological_complex (Condensed.{u} Ab.{u+1}) (complex_shape.up ‚Ñ§))
  (n : ‚Ñ§) (T : ExtrDisc.{u}) (a : Œ±) :
  ((sigma.Œπ X a : X a ‚ü∂ _).f n).val.app (op T.val) ‚â´
  (coproduct_eval_iso _ _ _).hom =
  direct_sum.of ((Œª a, ((X a).X n).val.obj (op T.val))) a :=
begin
  dsimp only [coproduct_eval_iso],
  erw (is_colimit_of_preserves (homological_complex.eval.{u+1 u+2 0}
    (Condensed.{u u+1 u+2} Ab.{u+1}) (complex_shape.up.{0} ‚Ñ§) n ‚ãô
    Condensed.evaluation.{u+2 u+1 u} Ab.{u+1} T.val) _).fac_assoc,
  dsimp,
  erw colimit.Œπ_desc_assoc,
  dsimp, simpa only [category.id_comp, colimit.comp_cocone_point_unique_up_to_iso_hom],
end

-- Move this!
instance CondensedSet_to_Condensed_Ab_preserves_colimits :
  preserves_colimits CondensedSet_to_Condensed_Ab.{u} :=
adjunction.left_adjoint_preserves_colimits Condensed_Ab_CondensedSet_adjunction

section ses_setup

local attribute [instance] type_pow

def Condensed_prod_val_iso {Œ± : Type (u+1)} (X : Œ± ‚Üí CondensedSet.{u}) :
  (‚àè X).val ‚âÖ ‚àè (Œª i, (X i).val) :=
preserves_limit_iso CondensedSet_to_presheaf _ ‚â™‚â´
has_limit.iso_of_nat_iso (discrete.nat_iso $ Œª p, iso.refl _)

@[simp, reassoc]
lemma Condensed_prod_val_iso_spec {Œ± : Type (u+1)} (X : Œ± ‚Üí CondensedSet.{u}) (i : Œ±) :
  (Condensed_prod_val_iso X).hom ‚â´ pi.œÄ _ i =
  (pi.œÄ X i : ‚àè X ‚ü∂ X i).val :=
begin
  dsimp [Condensed_prod_val_iso],
  simp only [category.assoc],
  erw limit.lift_œÄ,
  dsimp,
  erw limit.lift_œÄ_assoc,
  erw category.comp_id,
  refl,
end

@[simp, reassoc]
lemma Condensed_prod_val_iso_spec' {Œ± : Type (u+1)} (X : Œ± ‚Üí CondensedSet.{u}) (i : Œ±) :
  (Condensed_prod_val_iso X).inv ‚â´ (pi.œÄ X i : ‚àè X ‚ü∂ X i).val = pi.œÄ _ _ :=
by { rw iso.inv_comp_eq, rw Condensed_prod_val_iso_spec }

def functor_prod_eval_iso {Œ± : Type (u+1)} (X : Œ± ‚Üí (Profinite.{u}·µí·µñ ‚•§ Type (u+1))) (T) :
  (‚àè X).obj T ‚âÖ ‚àè (Œª i, (X i).obj T) :=
preserves_limit_iso ((evaluation _ _).obj T) _ ‚â™‚â´
has_limit.iso_of_nat_iso (discrete.nat_iso $ Œª p, iso.refl _)

@[simp, reassoc]
lemma functor_prod_eval_iso_spec
  {Œ± : Type (u+1)} (X : Œ± ‚Üí (Profinite.{u}·µí·µñ ‚•§ Type (u+1))) (T) (i : Œ±) :
  (functor_prod_eval_iso X T).hom ‚â´ pi.œÄ _ i =
  (pi.œÄ X i : ‚àè X ‚ü∂ X i).app _ :=
begin
  dsimp [functor_prod_eval_iso],
  simp only [category.assoc],
  erw limit.lift_œÄ,
  dsimp,
  erw limit.lift_œÄ_assoc,
  erw category.comp_id,
  refl,
end

@[simp, reassoc]
lemma functor_prod_eval_iso_spec'
  {Œ± : Type (u+1)} (X : Œ± ‚Üí (Profinite.{u}·µí·µñ ‚•§ Type (u+1))) (T) (i : Œ±) :
  (functor_prod_eval_iso X T).inv ‚â´ (pi.œÄ X i : ‚àè X ‚ü∂ X i).app _ =
  pi.œÄ _ i :=
by { rw iso.inv_comp_eq, rw functor_prod_eval_iso_spec }

def filtration_pow_iso_aux (j : ‚Ñï) (r : ‚Ñù‚â•0) :
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).obj
    (‚àè Œª i : ulift.{u} (fin j), (PFPNGT‚ÇÅ_to_PFPNG‚ÇÅ‚Çë‚Çó _).obj M) ‚âÖ
  (‚àè Œª i : ulift.{u} (fin j), pseudo_normed_group.filtration_obj M r) :=
preserves_limit_iso (ProFiltPseuNormGrp‚ÇÅ.level.obj r) _ ‚â™‚â´
has_limit.iso_of_nat_iso (discrete.nat_iso $ Œª q, iso.refl _)

@[simp, reassoc]
lemma filtration_pow_iso_aux_spec (j : ‚Ñï) (r : ‚Ñù‚â•0) (i) :
  (filtration_pow_iso_aux M j r).hom ‚â´ pi.œÄ
    (Œª i : ulift.{u} (fin j), pseudo_normed_group.filtration_obj M r) i =
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).map (pi.œÄ _ i) :=
begin
  dsimp [filtration_pow_iso_aux],
  simp only [category.assoc],
  erw limit.lift_œÄ,
  dsimp,
  erw limit.lift_œÄ_assoc,
  erw category.comp_id,
  refl,
end

@[simp, reassoc]
lemma filtration_pow_iso_aux_spec' (j : ‚Ñï) (r : ‚Ñù‚â•0) (i) :
  (filtration_pow_iso_aux M j r).inv ‚â´
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).map (pi.œÄ _ i) =
  pi.œÄ _ i :=
by { rw iso.inv_comp_eq, rw filtration_pow_iso_aux_spec }

def ProFiltPseuNormGrp‚ÇÅ.product_fan {Œ± : Type u} [fintype Œ±] (X : Œ± ‚Üí ProFiltPseuNormGrp‚ÇÅ.{u}) :
  fan X :=
fan.mk (ProFiltPseuNormGrp‚ÇÅ.product X) $ Œª i, ProFiltPseuNormGrp‚ÇÅ.product.œÄ _ _

def ProFiltPseuNormGrp‚ÇÅ.is_limit_product_fan {Œ± : Type u} [fintype Œ±]
  (X : Œ± ‚Üí ProFiltPseuNormGrp‚ÇÅ.{u}) :
  is_limit (ProFiltPseuNormGrp‚ÇÅ.product_fan X) :=
{ lift := Œª S, ProFiltPseuNormGrp‚ÇÅ.product.lift _ _ $ Œª i, S.œÄ.app ‚ü®i‚ü©,
  fac' := begin
    rintro S ‚ü®j‚ü©,
    dsimp,
    erw ProFiltPseuNormGrp‚ÇÅ.product.lift_œÄ,
  end,
  uniq' := begin
    intros S m hm,
    apply ProFiltPseuNormGrp‚ÇÅ.product.hom_ext,
    rintro j,
    erw hm ‚ü®j‚ü©,
    erw ProFiltPseuNormGrp‚ÇÅ.product.lift_œÄ,
  end }

def ProFiltPseuNormGrp‚ÇÅ.product_pow_iso {Œ± : Type u} [fintype Œ±]
  (X : Œ± ‚Üí ProFiltPseuNormGrp‚ÇÅ.{u}) :
  ‚àè X ‚âÖ ProFiltPseuNormGrp‚ÇÅ.product X :=
(limit.is_limit _).cone_point_unique_up_to_iso (ProFiltPseuNormGrp‚ÇÅ.is_limit_product_fan _)

@[simp, reassoc]
lemma ProFiltPseuNormGrp‚ÇÅ.product_pow_iso_spec {Œ± : Type u} [fintype Œ±]
  (X : Œ± ‚Üí ProFiltPseuNormGrp‚ÇÅ.{u}) (i) :
  (ProFiltPseuNormGrp‚ÇÅ.product_pow_iso X).hom ‚â´
  ProFiltPseuNormGrp‚ÇÅ.product.œÄ _ _ = pi.œÄ _ i :=
begin
  erw ProFiltPseuNormGrp‚ÇÅ.product.lift_œÄ,
  refl,
end

@[simp, reassoc]
lemma ProFiltPseuNormGrp‚ÇÅ.product_pow_iso_spec' {Œ± : Type u} [fintype Œ±]
  (X : Œ± ‚Üí ProFiltPseuNormGrp‚ÇÅ.{u}) (i) :
  (ProFiltPseuNormGrp‚ÇÅ.product_pow_iso X).inv ‚â´ pi.œÄ _ i =
  ProFiltPseuNormGrp‚ÇÅ.product.œÄ _ _ :=
by { rw iso.inv_comp_eq, rw ProFiltPseuNormGrp‚ÇÅ.product_pow_iso_spec }

def filtration_pow_proj (j : ‚Ñï) (r : ‚Ñù‚â•0) (i : fin j) :
  pseudo_normed_group.filtration_obj.{u} (‚Ü•M ^ j) r ‚ü∂
  pseudo_normed_group.filtration_obj.{u} M r :=
{ to_fun := Œª t, ‚ü®t.1 i, t.2 _‚ü©,
  continuous_to_fun := begin
    let e := (comphaus_filtered_pseudo_normed_group.filtration_pi_homeo
      (Œª i : (fin j), M) r),
    let t := _, change continuous t,
    suffices : continuous (t ‚àò e.symm), by simpa using this,
    convert continuous_apply i,
    ext, refl,
  end }

def filtration_pow_iso_aux'‚ÇÄ (j : ‚Ñï) (r : ‚Ñù‚â•0) :
  pseudo_normed_group.filtration_obj.{u} (‚Ü•M ^ j) r ‚âÖ
  (ProFiltPseuNormGrp‚ÇÅ.level.{u}.obj r).obj
  (ProFiltPseuNormGrp‚ÇÅ.product.{u} (Œª (i : ulift.{u 0} (fin j)),
    (PFPNGT‚ÇÅ_to_PFPNG‚ÇÅ‚Çë‚Çó.{u} r').obj M)) :=
-- This can't be the best way to do this, but at this point I'm quite annoyed.
{ hom :=
  { to_fun := Œª q, ‚ü®Œª i, q.1 i.down, begin
      intros i,
      apply q.2,
    end‚ü©,
    continuous_to_fun := begin
      rw (comphaus_filtered_pseudo_normed_group.filtration_pi_homeo
        (Œª i : ulift.{u} (fin j), M) r).inducing.continuous_iff,
      apply continuous_pi,
      intros i, dsimp,
      let e := (comphaus_filtered_pseudo_normed_group.filtration_pi_homeo
        (Œª i : (fin j), M) r),
      let t := _, change continuous t,
      suffices : continuous (t ‚àò e.symm), by simpa using this,
      convert continuous_apply i.down,
      ext, refl,
    end },
  inv :=
  { to_fun := Œª q, ‚ü®Œª i, q.1 ‚ü®i‚ü©, begin
      intros i,
      apply q.2,
    end‚ü©,
    continuous_to_fun := begin
      let e‚ÇÅ := (comphaus_filtered_pseudo_normed_group.filtration_pi_homeo
        (Œª i : (fin j), M) r),
      let e‚ÇÇ := (comphaus_filtered_pseudo_normed_group.filtration_pi_homeo
        (Œª i : ulift.{u} (fin j), M) r),
      let t := _, change continuous t,
      suffices : continuous (e‚ÇÅ ‚àò t ‚àò e‚ÇÇ.symm), by simpa using this,
      apply continuous_pi,
      intros i, convert continuous_apply (ulift.up i),
      ext, refl,
    end },
  hom_inv_id' := by { ext, refl },
  inv_hom_id' := by { ext _ ‚ü®‚ü©, refl } }

@[simp, reassoc]
lemma filtration_pow_iso_aux'‚ÇÄ_spec (j : ‚Ñï) (r : ‚Ñù‚â•0) (i) :
  (filtration_pow_iso_aux'‚ÇÄ M j r).hom ‚â´
  ((ProFiltPseuNormGrp‚ÇÅ.level.obj r).map $ ProFiltPseuNormGrp‚ÇÅ.product.œÄ _ i) =
  filtration_pow_proj M j r i.down := by { ext, refl }

@[simp, reassoc]
lemma filtration_pow_iso_aux'‚ÇÄ_spec' (j : ‚Ñï) (r : ‚Ñù‚â•0) (i : ulift.{u} (fin j)) :
  (filtration_pow_iso_aux'‚ÇÄ M j r).inv ‚â´ filtration_pow_proj M j r i.down =
  ((ProFiltPseuNormGrp‚ÇÅ.level.obj r).map $ ProFiltPseuNormGrp‚ÇÅ.product.œÄ _ i) :=
by { cases i, ext _ ‚ü®k‚ü©, refl }

def filtration_pow_iso_aux' (j : ‚Ñï) (r : ‚Ñù‚â•0) :
  pseudo_normed_group.filtration_obj.{u} (‚Ü•M ^ j) r ‚âÖ
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).obj
    (‚àè Œª i : ulift.{u} (fin j), (PFPNGT‚ÇÅ_to_PFPNG‚ÇÅ‚Çë‚Çó _).obj M) :=
filtration_pow_iso_aux'‚ÇÄ _ _ _ ‚â™‚â´
(ProFiltPseuNormGrp‚ÇÅ.level.obj r).map_iso (ProFiltPseuNormGrp‚ÇÅ.product_pow_iso _).symm

@[simp, reassoc]
lemma filtration_pow_iso_aux'_spec (j : ‚Ñï) (r : ‚Ñù‚â•0) (i) :
  (filtration_pow_iso_aux' M j r).hom ‚â´
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).map (pi.œÄ _ i) =
  filtration_pow_proj _ _ _ i.down :=
begin
  dsimp [filtration_pow_iso_aux'],
  simp only [category.assoc],
  simp only [‚Üê functor.map_comp, ProFiltPseuNormGrp‚ÇÅ.product_pow_iso_spec'],
  simp,
end

@[simp, reassoc]
lemma filtration_pow_iso_aux'_spec' (j : ‚Ñï) (r : ‚Ñù‚â•0) (i : ulift.{u} (fin j)) :
  (filtration_pow_iso_aux' M j r).inv ‚â´ filtration_pow_proj _ _ _ i.down =
  (ProFiltPseuNormGrp‚ÇÅ.level.obj r).map (pi.œÄ _ i) :=
by { rw iso.inv_comp_eq, rw filtration_pow_iso_aux'_spec }

def filtration_pow_iso (j : ‚Ñï) (r : ‚Ñù‚â•0) :
  pseudo_normed_group.filtration_obj.{u} (M ^ j) r ‚âÖ
  ‚àè Œª i : ulift.{u} (fin j), pseudo_normed_group.filtration_obj M r :=
filtration_pow_iso_aux' _ _ _ ‚â™‚â´ filtration_pow_iso_aux _ _ _

@[simp, reassoc]
lemma filtration_pow_iso_spec (j : ‚Ñï) (r : ‚Ñù‚â•0) (i : ulift.{u} (fin j)) :
  (filtration_pow_iso M j r).hom ‚â´ pi.œÄ _ i =
  filtration_pow_proj _ _ _ i.down :=
begin
  dsimp [filtration_pow_iso],
  simp,
end

@[simp, reassoc]
lemma filtration_pow_iso_spec' (j : ‚Ñï) (r : ‚Ñù‚â•0) (i : ulift.{u} (fin j)) :
  (filtration_pow_iso M j r).inv ‚â´ filtration_pow_proj _ _ _ i.down =
  pi.œÄ _ i :=
by { rw iso.inv_comp_eq, rw filtration_pow_iso_spec }

def profinite_pow_filtration_iso_component (j : ‚Ñï) (r : ‚Ñù‚â•0) (T : Profinite.{u}) :
  ulift.{u+1} (T ‚ü∂ pseudo_normed_group.filtration_obj.{u} (‚Ü•M ^ j) r) ‚âÖ
  ‚àè Œª (i : ulift.{u+1} (fin j)), ulift.{u+1}
    (T ‚ü∂ (ProFiltPseuNormGrp‚ÇÅ.level.{u}.obj r).obj ((PFPNGT‚ÇÅ_to_PFPNG‚ÇÅ‚Çë‚Çó.{u} r').obj M)) :=
ulift_functor.map_iso
((yoneda.flip.obj (op T)).map_iso $ filtration_pow_iso _ _ _) ‚â™‚â´
{ hom := pi.lift $ Œª i f, ulift.up $ ulift.down f ‚â´ pi.œÄ _ (ulift.up i.down),
  inv := Œª t, ulift.up $ pi.lift $ Œª i,
    let q := pi.œÄ (Œª (i : ulift.{u+1 0} (fin j)),
      ulift.{u+1 u}
      (T ‚ü∂ (ProFiltPseuNormGrp‚ÇÅ.level.{u}.obj r).obj
      ((PFPNGT‚ÇÅ_to_PFPNG‚ÇÅ‚Çë‚Çó.{u} r').obj M))) (ulift.up $ ulift.down i) t in q.down,
  hom_inv_id' := begin
    ext ‚ü®t‚ü© : 2, dsimp,
    apply limit.hom_ext, rintros ‚ü®‚ü®q‚ü©‚ü©,
    simp,
  end,
  inv_hom_id' := begin
    apply limit.hom_ext, rintro ‚ü®‚ü®q‚ü©‚ü©,
    simp only [category.assoc, limit.lift_œÄ, fan.mk_œÄ_app, category.id_comp],
    ext t,
    dsimp,
    rw [‚Üê comp_apply, limit.lift_œÄ],
    refl,
  end }

.

@[simp, reassoc]
lemma profinite_pow_filtration_iso_component_spec (j : ‚Ñï) (r : ‚Ñù‚â•0) (T : Profinite.{u})
  (i : ulift.{u+1} (fin j)) :
  (profinite_pow_filtration_iso_component M j r T).hom ‚â´ pi.œÄ _ i =
  ulift_functor.map ((yoneda.flip.obj (op T)).map $ filtration_pow_proj _ _ _ i.down) :=
begin
  dsimp [profinite_pow_filtration_iso_component],
  simp,
  ext ‚ü®t‚ü© : 2,
  dsimp,
  simp,
end

@[simp, reassoc]
lemma profinite_pow_filtration_iso_component_spec' (j : ‚Ñï) (r : ‚Ñù‚â•0) (T : Profinite.{u})
  (i : ulift.{u+1} (fin j)) :
  (profinite_pow_filtration_iso_component M j r T).inv ‚â´
  ulift_functor.map ((yoneda.flip.obj (op T)).map $ filtration_pow_proj _ _ _ i.down) =
  pi.œÄ _ i :=
by { rw iso.inv_comp_eq, rw profinite_pow_filtration_iso_component_spec }

def profinite_pow_filtration_iso (j : ‚Ñï) (r : ‚Ñù‚â•0) :
  (pseudo_normed_group.filtration_obj.{u} (‚Ü•M ^ j) r).to_Condensed ‚âÖ
  ‚àè Œª (k : ulift.{u+1 0} (fin j)), ((ProFiltPseuNormGrp‚ÇÅ.level.obj r).obj
    ((PFPNGT‚ÇÅ_to_PFPNG‚ÇÅ‚Çë‚Çó _).obj M)).to_Condensed :=
begin
  refine Sheaf.iso.mk _ _ _,
  refine _ ‚â™‚â´ (Condensed_prod_val_iso _).symm,
  refine nat_iso.of_components _ _,
  { intros T,
    refine _ ‚â™‚â´ (functor_prod_eval_iso _ _).symm,
    refine profinite_pow_filtration_iso_component _ _ _ _ },
  { intros X Y f, dsimp,
    apply (is_limit_of_preserves ((evaluation _ _).obj Y) (limit.is_limit _)).hom_ext,
    rintro ‚ü®i‚ü©, swap, apply_instance,
    dsimp, simp only [category.assoc],
    erw [functor_prod_eval_iso_spec', nat_trans.naturality,
      functor_prod_eval_iso_spec'_assoc, profinite_pow_filtration_iso_component_spec,
      profinite_pow_filtration_iso_component_spec_assoc],
    ext, refl }
end

@[simp, reassoc]
lemma profinite_pow_filtration_iso_spec (j : ‚Ñï) (r : ‚Ñù‚â•0) (i : ulift.{u+1} (fin j)) :
  (profinite_pow_filtration_iso M j r).hom ‚â´ pi.œÄ _ i =
  Profinite_to_Condensed.map (filtration_pow_proj _ _ _ i.down) :=
begin
  dsimp [profinite_pow_filtration_iso, Sheaf.iso.mk],
  ext1, dsimp,
  simp only [category.assoc],
  rw Condensed_prod_val_iso_spec',
  ext T : 2,
  dsimp,
  simp only [category.assoc],
  rw functor_prod_eval_iso_spec',
  erw profinite_pow_filtration_iso_component_spec,
  refl,
end

@[simp, reassoc]
lemma profinite_pow_filtration_iso_spec' (j : ‚Ñï) (r : ‚Ñù‚â•0) (i : ulift.{u+1} (fin j)) :
  (profinite_pow_filtration_iso M j r).inv ‚â´
  Profinite_to_Condensed.map (filtration_pow_proj _ _ _ i.down) = pi.œÄ _ i :=
by { rw iso.inv_comp_eq, rw profinite_pow_filtration_iso_spec }

def combine (hŒπ : monotone Œπ) (n : ‚Ñï) : ‚Ñï ‚Üío ‚Ñù‚â•0 :=
{ to_fun := Œª t, Œ∫ (Œπ $ ulift.up t) n,
  monotone' := begin
    intros a b h,
    apply (fact.out (monotone (function.swap Œ∫ n))),
    apply hŒπ,
    exact h
  end }

def iso_on_the_left_zero‚ÇÄ :
 (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X 0 ‚âÖ
 (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X 0) :=
begin
  refine preserves_colimit_iso (homological_complex.eval _ _ 0) _ ‚â™‚â´ _,
  refine has_colimit.iso_of_nat_iso (discrete.nat_iso $ Œª i, iso.refl _),
end

@[simp, reassoc]
lemma iso_on_the_left_zero‚ÇÄ_spec' (i : ulift.{u+1} ‚Ñï) :
  sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X 0) i ‚â´
  (iso_on_the_left_zero‚ÇÄ BD Œ∫ M Œπ).inv =
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) i).f 0 :=
begin
  dsimp [iso_on_the_left_zero‚ÇÄ],
  erw colimit.Œπ_desc_assoc, dsimp, simp only [category.id_comp],
  erw colimit.Œπ_desc, refl,
end

@[simp, reassoc]
lemma iso_on_the_left_zero‚ÇÄ_spec (i : ulift.{u+1} ‚Ñï) :
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) i).f 0 ‚â´
  (iso_on_the_left_zero‚ÇÄ BD Œ∫ M Œπ).hom =
  sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X 0) i :=
by { rw ‚Üê iso.eq_comp_inv, rw iso_on_the_left_zero‚ÇÄ_spec', }

def iso_on_the_left_zero  :
 (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X 0 ‚âÖ
  ‚àê Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
      (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X 0))),
      (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ 0)).obj i) :=
begin
  refine iso_on_the_left_zero‚ÇÄ BD Œ∫ M _ ‚â™‚â´ _,
  refine sigma.map_iso _,
  rintros ‚ü®j‚ü©,
  dsimp [QprimeFP_int, QprimeFP_nat, FreeAb.eval, functor.map_FreeAb,
    FPsystem, FPsystem.X],
  refine CondensedSet_to_Condensed_Ab.map_iso _,
  refine profinite_pow_filtration_iso M (BD.data.X 0) (Œ∫ (Œπ ‚ü®j‚ü©) 0), --‚â™‚â´ _,
end

@[simp, reassoc]
lemma iso_on_the_left_zero_spec' (k : ‚Ñï) :
  sigma.Œπ (Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
    (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X 0))),
    (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ 0)).obj i))
    ‚ü®k‚ü© ‚â´ (iso_on_the_left_zero _ _ _ _ _).inv =
  CondensedSet_to_Condensed_Ab.map (profinite_pow_filtration_iso M
    (BD.data.X 0) (Œ∫ (Œπ ‚ü®k‚ü©) 0)).inv ‚â´
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) ‚ü®k‚ü©).f 0 :=
begin
  dsimp [iso_on_the_left_zero],
  erw colimit.Œπ_desc_assoc, dsimp,
  rw [category.assoc],
  slice_lhs 2 3
  { rw iso_on_the_left_zero‚ÇÄ_spec' },
end

@[simp, reassoc]
lemma iso_on_the_left_zero_spec (k : ‚Ñï) :
  CondensedSet_to_Condensed_Ab.map (profinite_pow_filtration_iso M
    (BD.data.X 0) (Œ∫ (Œπ ‚ü®k‚ü©) 0)).inv ‚â´
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) ‚ü®k‚ü©).f 0 ‚â´
  (iso_on_the_left_zero _ _ _ _ _).hom =
  sigma.Œπ (Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
    (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X 0))),
    (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ 0)).obj i))
    ‚ü®k‚ü© :=
begin
  rw [‚Üê category.assoc, ‚Üê iso.eq_comp_inv, iso_on_the_left_zero_spec'],
end

@[simp, reassoc]
lemma iso_on_the_left_zero_spec_alt (k : ‚Ñï) :
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) ‚ü®k‚ü©).f 0 ‚â´
  (iso_on_the_left_zero _ _ _ _ _).hom =
  CondensedSet_to_Condensed_Ab.map (profinite_pow_filtration_iso M
    (BD.data.X 0) (Œ∫ (Œπ ‚ü®k‚ü©) 0)).hom ‚â´
  sigma.Œπ (Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
    (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X 0))),
    (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ 0)).obj i))
    ‚ü®k‚ü© :=
begin
  rw [‚Üê functor.map_iso_hom, ‚Üê iso.inv_comp_eq,
    functor.map_iso_inv, iso_on_the_left_zero_spec],
end

def pseudo_normed_group.map_filtration (M : Type*) [profinitely_filtered_pseudo_normed_group M]
  (a b : ‚Ñù‚â•0) (h : a ‚â§ b) :
  pseudo_normed_group.filtration_obj M a ‚ü∂ pseudo_normed_group.filtration_obj M b :=
{ to_fun := pseudo_normed_group.cast_le' h,
  continuous_to_fun := begin
    haveI : fact (a ‚â§ b) := ‚ü®h‚ü©,
    apply comphaus_filtered_pseudo_normed_group.continuous_cast_le,
  end }

lemma pow_filtration_hom_ext {T : Profinite.{u}} (j : ‚Ñï) (r : ‚Ñù‚â•0)
  (f g : T ‚ü∂ pseudo_normed_group.filtration_obj (M^j) r)
  (h : ‚àÄ k, f ‚â´ filtration_pow_proj M j r k = g ‚â´ filtration_pow_proj M j r k) : f = g :=
begin
  ext t x,
  specialize h x,
  apply_fun (Œª e, (e t).1) at h,
  exact h,
end

lemma iso_on_the_left_zero_conj_aux (j : ‚Ñï) :
  ((profinite_pow_filtration_iso.{u} M (BD.data.X 0) (Œ∫ (Œπ {down := j}) 0)).hom ‚â´
    (Condensed.as_nat_diagram_pow.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ 0) (BD.data.X 0)).map
    (as_small.up.{0 0 u+1}.map (hom_of_le.{0} (nat.le_succ _)))) ‚â´
  (profinite_pow_filtration_iso.{u} M (BD.data.X 0) (Œ∫ (Œπ {down := j + 1}) 0)).inv =
  Profinite_to_Condensed.map (pseudo_normed_group.map_filtration _ _ _
    (fact.out (monotone (function.swap Œ∫ 0)) (hŒπ $ by { exact_mod_cast j.le_succ }))) :=
begin
  rw iso.comp_inv_eq,
  apply limit.hom_ext, rintro ‚ü®k‚ü©,
  dsimp [Condensed.as_nat_diagram_pow, pow_functor], simp only [category.assoc],
  erw profinite_pow_filtration_iso_spec,
  simp only [lim_map_œÄ, discrete.nat_trans_app],
  erw profinite_pow_filtration_iso_spec_assoc,
  dsimp [Condensed.as_nat_diagram, restrict_diagram,
    CompHausFiltPseuNormGrp.level_Condensed_diagram,
    CompHausFiltPseuNormGrp.level_Condensed_diagram'],
  rw ‚Üê Profinite_to_Condensed.map_comp,
  have h : Œ∫ (Œπ ‚ü®j‚ü©) 0 ‚â§ Œ∫ (Œπ ‚ü®j+1‚ü©) 0,
  { apply fact.out (monotone (function.swap Œ∫ 0)),
    apply hŒπ,
    exact_mod_cast j.le_succ },
  change _ ‚â´ Profinite_to_Condensed.map (pseudo_normed_group.map_filtration M _ _ h) = _,
  rw ‚Üê Profinite_to_Condensed.map_comp,
  congr' 1,
end

lemma iso_on_the_left_zero_conj :
  ((QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD.data Œ∫ M)).f 0) =
  (iso_on_the_left_zero _ _ _ _ hŒπ).hom ‚â´
  (Condensed.coproduct_to_coproduct (Condensed.as_nat_diagram_pow M.to_CHFPNG
    (combine Œ∫ Œπ hŒπ 0) _ ‚ãô _) - ùüô _) ‚â´ (iso_on_the_left_zero _ _ _ _ hŒπ).inv :=
begin
  dsimp [QprimeFP.shift_sub_id],
  simp only [comp_sub, sub_comp, category.id_comp, iso.hom_inv_id,
    category.assoc], congr' 1,
  apply (is_colimit_of_preserves (homological_complex.eval _ _ _)
    (colimit.is_colimit _)).hom_ext, swap, apply_instance,
  rintros ‚ü®‚ü®j‚ü©‚ü©, dsimp,
  erw [‚Üê homological_complex.comp_f, colimit.Œπ_desc],
  dsimp [sigma_shift_cone],
  rw iso_on_the_left_zero_spec_alt_assoc,
  erw colimit.Œπ_desc_assoc, dsimp,
  simp only [category.assoc],
  slice_rhs 3 4
  { erw iso_on_the_left_zero_spec' },
  simp only [‚Üê category.assoc],
  congr' 1,
  dsimp [CondensedSet_to_Condensed_Ab],
  simp only [‚Üê functor.map_comp],
  dsimp [QprimeFP_int, QprimeFP_nat, FreeAb.eval, functor.map_FreeAb,
    FPsystem, FPsystem.X, FreeAb.of_functor],
  rw free_abelian_group.lift.of, dsimp,
  congr' 1,
  ext S : 2,
  dsimp,
  simp only [‚Üê functor.map_comp], congr' 1,
  simp only [‚Üê nat_trans.comp_app, ‚Üê Sheaf.hom.comp_val],
  rw iso_on_the_left_zero_conj_aux,
  ext, refl,
end

def iso_on_the_left_neg‚ÇÄ (q : ‚Ñï) :
 (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X (-[1+q]) ‚âÖ
 (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X (-[1+q])) :=
begin
  refine preserves_colimit_iso (homological_complex.eval _ _ _) _ ‚â™‚â´ _,
  refine has_colimit.iso_of_nat_iso (discrete.nat_iso $ Œª i, iso.refl _),
end

@[simp, reassoc]
lemma iso_on_the_left_neg‚ÇÄ_spec' (q : ‚Ñï) (i : ulift.{u+1} ‚Ñï) :
  sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X (-[1+q])) i ‚â´
  (iso_on_the_left_neg‚ÇÄ BD Œ∫ M Œπ q).inv =
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) i).f (-[1+q]) :=
begin
  dsimp [iso_on_the_left_neg‚ÇÄ],
  erw colimit.Œπ_desc_assoc, dsimp, simp only [category.id_comp],
  erw colimit.Œπ_desc, refl,
end

@[simp, reassoc]
lemma iso_on_the_left_neg‚ÇÄ_spec (q : ‚Ñï) (i : ulift.{u+1} ‚Ñï) :
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) i).f (-[1+q]) ‚â´
  (iso_on_the_left_neg‚ÇÄ BD Œ∫ M Œπ q).hom =
  sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X (-[1+q])) i :=
by { rw ‚Üê iso.eq_comp_inv, rw iso_on_the_left_neg‚ÇÄ_spec', }

def iso_on_the_left_neg (q : ‚Ñï) :
 (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)).X (-[1+q]) ‚âÖ
  ‚àê Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
      (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X (q+1)))),
      (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ (q+1))).obj i) :=
begin
  refine iso_on_the_left_neg‚ÇÄ BD Œ∫ M _ q ‚â™‚â´ _,
  refine sigma.map_iso _,
  rintros ‚ü®j‚ü©,
  dsimp [QprimeFP_int, QprimeFP_nat, FreeAb.eval, functor.map_FreeAb,
    FPsystem, FPsystem.X],
  refine CondensedSet_to_Condensed_Ab.map_iso _,
  refine profinite_pow_filtration_iso M (BD.data.X (q+1)) (Œ∫ (Œπ ‚ü®j‚ü©) (q+1)),
end

@[simp, reassoc]
lemma iso_on_the_left_neg_spec' (q : ‚Ñï) (k : ‚Ñï) :
  sigma.Œπ (Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
    (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X (q+1)))),
    (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ (q+1))).obj i))
    ‚ü®k‚ü© ‚â´ (iso_on_the_left_neg _ _ _ _ _ q).inv =
  CondensedSet_to_Condensed_Ab.map (profinite_pow_filtration_iso M
    (BD.data.X (q+1)) (Œ∫ (Œπ ‚ü®k‚ü©) (q+1))).inv ‚â´
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) ‚ü®k‚ü©).f (-[1+q]) :=
begin
  dsimp [iso_on_the_left_neg],
  erw colimit.Œπ_desc_assoc, dsimp,
  rw [category.assoc],
  slice_lhs 2 3
  { rw iso_on_the_left_neg‚ÇÄ_spec' },
end

@[simp, reassoc]
lemma iso_on_the_left_neg_spec (q : ‚Ñï) (k : ‚Ñï) :
  CondensedSet_to_Condensed_Ab.map (profinite_pow_filtration_iso M
    (BD.data.X (q+1)) (Œ∫ (Œπ ‚ü®k‚ü©) (q+1))).inv ‚â´
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) ‚ü®k‚ü©).f (-[1+q]) ‚â´
  (iso_on_the_left_neg _ _ _ _ _ q).hom =
  sigma.Œπ (Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
    (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X (q+1)))),
    (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ (q+1))).obj i))
    ‚ü®k‚ü© :=
begin
  rw [‚Üê category.assoc, ‚Üê iso.eq_comp_inv, iso_on_the_left_neg_spec'],
end

@[simp, reassoc]
lemma iso_on_the_left_neg_spec_alt (q : ‚Ñï) (k : ‚Ñï) :
  (sigma.Œπ (Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)) ‚ü®k‚ü©).f (-[1+q]) ‚â´
  (iso_on_the_left_neg _ _ _ _ _ q).hom =
  CondensedSet_to_Condensed_Ab.map (profinite_pow_filtration_iso M
    (BD.data.X (q+1)) (Œ∫ (Œπ ‚ü®k‚ü©) (q+1))).hom ‚â´
  sigma.Œπ (Œª (i : as_small.{u+1 0 0} ‚Ñï), CondensedSet_to_Condensed_Ab.{u}.obj
    (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X (q+1)))),
    (Condensed.as_nat_diagram.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ (q+1))).obj i))
    ‚ü®k‚ü© :=
begin
  rw [‚Üê functor.map_iso_hom, ‚Üê iso.inv_comp_eq,
    functor.map_iso_inv, iso_on_the_left_neg_spec],
end

lemma iso_on_the_left_neg_conj_aux (q : ‚Ñï) (j : ‚Ñï) :
  ((profinite_pow_filtration_iso.{u} M (BD.data.X (q+1)) (Œ∫ (Œπ {down := j}) (q+1))).hom ‚â´
    (Condensed.as_nat_diagram_pow.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ (q+1)) (BD.data.X (q+1))).map
    (as_small.up.{0 0 u+1}.map (hom_of_le.{0} (nat.le_succ _)))) ‚â´
  (profinite_pow_filtration_iso.{u} M (BD.data.X (q+1)) (Œ∫ (Œπ {down := j + 1}) (q+1))).inv =
  Profinite_to_Condensed.map (pseudo_normed_group.map_filtration _ _ _
    (fact.out (monotone (function.swap Œ∫ (q+1))) (hŒπ $ by { exact_mod_cast j.le_succ }))) :=
begin
  rw iso.comp_inv_eq,
  apply limit.hom_ext, rintro ‚ü®k‚ü©,
  dsimp [Condensed.as_nat_diagram_pow, pow_functor], simp only [category.assoc],
  erw profinite_pow_filtration_iso_spec,
  simp only [lim_map_œÄ, discrete.nat_trans_app],
  erw profinite_pow_filtration_iso_spec_assoc,
  dsimp [Condensed.as_nat_diagram, restrict_diagram,
    CompHausFiltPseuNormGrp.level_Condensed_diagram,
    CompHausFiltPseuNormGrp.level_Condensed_diagram'],
  rw ‚Üê Profinite_to_Condensed.map_comp,
  have h : Œ∫ (Œπ ‚ü®j‚ü©) (q+1) ‚â§ Œ∫ (Œπ ‚ü®j+1‚ü©) (q+1),
  { apply fact.out (monotone (function.swap Œ∫ (q+1))),
    apply hŒπ,
    exact_mod_cast j.le_succ },
  change _ ‚â´ Profinite_to_Condensed.map (pseudo_normed_group.map_filtration M _ _ h) = _,
  rw ‚Üê Profinite_to_Condensed.map_comp,
  congr' 1,
end

lemma iso_on_the_left_neg_conj (q : ‚Ñï) :
  ((QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD.data Œ∫ M)).f (-[1+q])) =
  (iso_on_the_left_neg _ _ _ _ hŒπ _).hom ‚â´
  (Condensed.coproduct_to_coproduct (Condensed.as_nat_diagram_pow M.to_CHFPNG
    (combine Œ∫ Œπ hŒπ (q+1)) _ ‚ãô _) - ùüô _) ‚â´ (iso_on_the_left_neg _ _ _ _ hŒπ _).inv :=
begin
  dsimp [QprimeFP.shift_sub_id],
  simp only [comp_sub, sub_comp, category.id_comp, iso.hom_inv_id,
    category.assoc], congr' 1,
  apply (is_colimit_of_preserves (homological_complex.eval _ _ _)
    (colimit.is_colimit _)).hom_ext, swap, apply_instance,
  rintros ‚ü®‚ü®j‚ü©‚ü©, dsimp,
  erw [‚Üê homological_complex.comp_f, colimit.Œπ_desc],
  dsimp [sigma_shift_cone],
  rw iso_on_the_left_neg_spec_alt_assoc,
  erw colimit.Œπ_desc_assoc, dsimp,
  simp only [category.assoc],
  slice_rhs 3 4
  { erw iso_on_the_left_neg_spec' },
  simp only [‚Üê category.assoc],
  congr' 1,
  dsimp [CondensedSet_to_Condensed_Ab],
  simp only [‚Üê functor.map_comp],
  dsimp [QprimeFP_int, QprimeFP_nat, FreeAb.eval, functor.map_FreeAb,
    FPsystem, FPsystem.X, FreeAb.of_functor],
  rw free_abelian_group.lift.of, dsimp,
  congr' 1,
  ext S : 2,
  dsimp,
  simp only [‚Üê functor.map_comp], congr' 1,
  simp only [‚Üê nat_trans.comp_app, ‚Üê Sheaf.hom.comp_val],
  rw iso_on_the_left_neg_conj_aux,
  ext, refl,
end

.

def product_iso_biproduct {A : Type (u+2)} [category.{u+1} A]
  [abelian A] {Œ± : Type (u+1)} [fintype Œ±] (X : Œ± ‚Üí A) :
  ‚àè X ‚âÖ biproduct X :=
(limit.is_limit _).cone_point_unique_up_to_iso (biproduct.is_limit _)

@[simp, reassoc]
lemma product_iso_biproduct_spec' {A : Type (u+2)} [category.{u+1} A]
  [abelian A] {Œ± : Type (u+1)} [fintype Œ±] (X : Œ± ‚Üí A) (t) :
  (product_iso_biproduct X).inv ‚â´ pi.œÄ _ t =
  biproduct.œÄ _ t :=
begin
  erw limit.lift_œÄ, refl,
end

@[simp, reassoc]
lemma product_iso_biproduct_spec {A : Type (u+2)} [category.{u+1} A]
  [abelian A] {Œ± : Type (u+1)} [fintype Œ±] (X : Œ± ‚Üí A) (t) :
  (product_iso_biproduct X).hom ‚â´ biproduct.œÄ _ t = pi.œÄ _ t :=
begin
  rw [‚Üê iso.eq_inv_comp, product_iso_biproduct_spec'],
end

def Condensed_product_iso_biproduct (q : ‚Ñï) :
  Condensed_Ab_to_CondensedSet.{u}.obj
  (‚àè Œª (i : ulift.{u+1 0} (fin (q))), M.to_Condensed) ‚âÖ
  Condensed_Ab_to_CondensedSet.{u}.obj
  (‚®Å Œª (i : ulift.{u+1 0} (fin (q))), M.to_Condensed) :=
Condensed_Ab_to_CondensedSet.map_iso $
(limit.is_limit _).cone_point_unique_up_to_iso (biproduct.is_limit _)

@[simp, reassoc]
lemma Condensed_product_iso_biproduct_spec' (q : ‚Ñï) (i : ulift.{u+1} (fin q)) :
  (Condensed_product_iso_biproduct M q).inv ‚â´
  Condensed_Ab_to_CondensedSet.map (pi.œÄ _ i) =
  Condensed_Ab_to_CondensedSet.map (biproduct.œÄ _ i) :=
begin
  dsimp only [Condensed_product_iso_biproduct, functor.map_iso_inv, functor.map_iso_hom],
  rw ‚Üê Condensed_Ab_to_CondensedSet.map_comp,
  erw limit.lift_œÄ,
  refl,
end

@[simp, reassoc]
lemma Condensed_product_iso_biproduct_spec (q : ‚Ñï) (i : ulift.{u+1} (fin q)) :
  (Condensed_product_iso_biproduct M q).hom ‚â´
  Condensed_Ab_to_CondensedSet.map (biproduct.œÄ _ i) =
  Condensed_Ab_to_CondensedSet.map (pi.œÄ _ i) :=
begin
  rw ‚Üê iso.eq_inv_comp, rw Condensed_product_iso_biproduct_spec',
end

def Condensed_product_iso_product (q : ‚Ñï) :
  Condensed_Ab_to_CondensedSet.{u}.obj
  (‚àè Œª (i : ulift.{u+1 0} (fin (q))), M.to_Condensed) ‚âÖ
  ‚àè Œª i : ulift.{u+1} (fin q), Condensed_Ab_to_CondensedSet.obj M.to_Condensed :=
preserves_limit_iso Condensed_Ab_to_CondensedSet _ ‚â™‚â´
has_limit.iso_of_nat_iso (discrete.nat_iso $ Œª i, iso.refl _)

@[simp, reassoc]
lemma Condensed_product_iso_product_spec (q : ‚Ñï) (i : ulift.{u+1} (fin q)) :
  (Condensed_product_iso_product M q).hom ‚â´ pi.œÄ _ i =
  Condensed_Ab_to_CondensedSet.map (pi.œÄ _ i) :=
begin
  dsimp [Condensed_product_iso_product], simp only [category.assoc],
  erw limit.lift_œÄ,
  dsimp,
  erw [category.comp_id, limit.lift_œÄ], refl,
end

@[simp, reassoc]
lemma Condensed_product_iso_product_spec' (q : ‚Ñï) (i : ulift.{u+1} (fin q)) :
  (Condensed_product_iso_product M q).inv ‚â´ Condensed_Ab_to_CondensedSet.map (pi.œÄ _ i) =
  pi.œÄ _ i :=
by { rw iso.inv_comp_eq, rw Condensed_product_iso_product_spec }

def iso_on_the_right_zero :
  CondensedSet_to_Condensed_Ab.{u}.obj
  (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X 0))),
  (Condensed.as_nat_cocone.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ 0)).X) ‚âÖ
  ((BD.eval' freeCond'.{u}).obj M.to_Condensed).X 0 :=
begin
  refine CondensedSet_to_Condensed_Ab.map_iso _,
  dsimp,
  refine _ ‚â™‚â´ Condensed_product_iso_biproduct _ _,
  refine (Condensed_product_iso_product _ _).symm,
end

-- Why is this thing tagged with simp in the first place!?
local attribute [-simp] forget_map_eq_coe

@[simp, reassoc]
lemma iso_on_the_right_zero_spec' (i : ulift.{u+1} (fin (BD.data.X 0))) :
  (iso_on_the_right_zero BD Œ∫ M Œπ hŒπ).inv ‚â´
  CondensedSet_to_Condensed_Ab.map (pi.œÄ _ i) =
  CondensedSet_to_Condensed_Ab.map (Condensed_Ab_to_CondensedSet.map $ biproduct.œÄ _ i) :=
begin
  dsimp [iso_on_the_right_zero], simp only [‚Üê functor.map_comp], congr' 1, ext S : 2,
  dsimp, simp_rw [‚Üê functor.map_comp, ‚Üê nat_trans.comp_app, ‚Üê Sheaf.hom.comp_val, category.assoc],
  erw Condensed_product_iso_product_spec,
  erw Condensed_product_iso_biproduct_spec',
  refl,
end

@[simp, reassoc]
lemma iso_on_the_right_zero_spec (i : ulift.{u+1} (fin (BD.data.X 0))) :
  (iso_on_the_right_zero BD Œ∫ M Œπ hŒπ).hom ‚â´
  CondensedSet_to_Condensed_Ab.map (Condensed_Ab_to_CondensedSet.map $ biproduct.œÄ _ i) =
  CondensedSet_to_Condensed_Ab.map (pi.œÄ _ i) :=
by { rw ‚Üê iso.eq_inv_comp, rw iso_on_the_right_zero_spec' }

lemma iso_on_the_right_zero_conj :
  ((QprimeFP_sigma_proj BD Œ∫ M Œπ).f 0) =
  (iso_on_the_left_zero _ _ _ _ hŒπ).hom ‚â´
  Condensed.coproduct_presentation_with_pow CondensedSet_to_Condensed_Ab M.to_CHFPNG
    (combine _ _ _ _) _ ‚â´ (iso_on_the_right_zero _ _ _ _ _).hom :=
begin
  dsimp [QprimeFP_sigma_proj],
  apply (is_colimit_of_preserves (homological_complex.eval _ _ 0)
    (colimit.is_colimit (discrete.functor $
    Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)))).hom_ext,
  rintros ‚ü®‚ü®i‚ü©‚ü©, dsimp, rw [‚Üê homological_complex.comp_f, colimit.Œπ_desc], dsimp,
  slice_rhs 1 2 { erw iso_on_the_left_zero_spec_alt BD Œ∫ M Œπ hŒπ i },
  dsimp [Condensed.coproduct_presentation_with_pow,
    -CondensedSet_to_Condensed_Ab_map], simp only [category.assoc, colimit.Œπ_desc],
  dsimp [-CondensedSet_to_Condensed_Ab_map],
  dsimp [QprimeFP_incl, -CondensedSet_to_Condensed_Ab_map, iso_on_the_right_zero],
  simp only [‚Üê functor.map_comp], congr' 1,
  simp_rw ‚Üê category.assoc, rw [‚Üê iso.comp_inv_eq, iso.eq_comp_inv],
  apply limit.hom_ext, rintro ‚ü®j‚ü©,
  simp only [category.assoc, lim_map_œÄ],
  erw Condensed_product_iso_product_spec,
  erw Condensed_product_iso_biproduct_spec',
  erw profinite_pow_filtration_iso_spec_assoc,
  ext S : 3,
  dsimp [QprimeFP_incl_aux],
  rw [‚Üê whisker_right_app, ‚Üê nat_trans.comp_app],
  have := (is_limit_of_preserves.{u+1 u+1 u+1 u+1 u+2 u+2}
    (Condensed_Ab_to_CondensedSet.{u} ‚ãô CondensedSet_to_presheaf.{u})
    (biproduct.is_limit.{u+1 u+2} (Œª (i : ulift.{u+1 0} (fin (BD.data.X 0))),
    M.to_Condensed))).fac,
  dsimp at this, erw this _ ‚ü®j‚ü©,
  ext, refl,
end

.

def iso_on_the_right_neg (q : ‚Ñï) :
  CondensedSet_to_Condensed_Ab.{u}.obj
  (‚àè Œª (j : ulift.{u+1 0} (fin (BD.data.X (q+1)))),
  (Condensed.as_nat_cocone.{u} M.to_CHFPNG (combine.{u} Œ∫ Œπ hŒπ (q+1))).X) ‚âÖ
  ((BD.eval' freeCond'.{u}).obj M.to_Condensed).X (-[1+q]) :=
begin
  refine CondensedSet_to_Condensed_Ab.map_iso _,
  dsimp,
  refine _ ‚â™‚â´ Condensed_product_iso_biproduct _ _,
  refine (Condensed_product_iso_product _ _).symm,
end

@[simp, reassoc]
lemma iso_on_the_right_neg_spec' (q : ‚Ñï) (i : ulift.{u+1} (fin (BD.data.X (q+1)))) :
  (iso_on_the_right_neg BD Œ∫ M Œπ hŒπ q).inv ‚â´
  CondensedSet_to_Condensed_Ab.map (pi.œÄ _ i) =
  CondensedSet_to_Condensed_Ab.map (Condensed_Ab_to_CondensedSet.map $ biproduct.œÄ _ i) :=
begin
  dsimp [iso_on_the_right_neg], simp only [‚Üê functor.map_comp], congr' 1, ext S : 2,
  dsimp, simp_rw [‚Üê functor.map_comp, ‚Üê nat_trans.comp_app, ‚Üê Sheaf.hom.comp_val, category.assoc],
  erw Condensed_product_iso_product_spec,
  erw Condensed_product_iso_biproduct_spec',
  refl,
end

@[simp, reassoc]
lemma iso_on_the_right_neg_spec (q : ‚Ñï) (i : ulift.{u+1} (fin (BD.data.X (q+1)))) :
  (iso_on_the_right_neg BD Œ∫ M Œπ hŒπ q).hom ‚â´
  CondensedSet_to_Condensed_Ab.map (Condensed_Ab_to_CondensedSet.map $ biproduct.œÄ _ i) =
  CondensedSet_to_Condensed_Ab.map (pi.œÄ _ i) :=
by { rw ‚Üê iso.eq_inv_comp, rw iso_on_the_right_neg_spec' }

lemma iso_on_the_right_neg_conj (q : ‚Ñï) :
  ((QprimeFP_sigma_proj BD Œ∫ M Œπ).f (-[1+q])) =
  (iso_on_the_left_neg _ _ _ _ hŒπ q).hom ‚â´
  Condensed.coproduct_presentation_with_pow CondensedSet_to_Condensed_Ab M.to_CHFPNG
    (combine _ _ _ _) _ ‚â´ (iso_on_the_right_neg _ _ _ _ _ _).hom :=
begin
  dsimp [QprimeFP_sigma_proj],
  apply (is_colimit_of_preserves (homological_complex.eval _ _ (-[1+q]))
    (colimit.is_colimit (discrete.functor $
    Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj (Œπ k)))).hom_ext,
  rintros ‚ü®‚ü®i‚ü©‚ü©, dsimp, rw [‚Üê homological_complex.comp_f, colimit.Œπ_desc], dsimp,
  slice_rhs 1 2 { erw iso_on_the_left_neg_spec_alt BD Œ∫ M Œπ hŒπ q i },
  dsimp [Condensed.coproduct_presentation_with_pow,
    -CondensedSet_to_Condensed_Ab_map], simp only [category.assoc, colimit.Œπ_desc],
  dsimp [-CondensedSet_to_Condensed_Ab_map],
  dsimp [QprimeFP_incl, -CondensedSet_to_Condensed_Ab_map, iso_on_the_right_neg],
  simp only [‚Üê functor.map_comp], congr' 1,
  simp_rw ‚Üê category.assoc, rw [‚Üê iso.comp_inv_eq, iso.eq_comp_inv],
  apply limit.hom_ext, rintro ‚ü®j‚ü©,
  simp only [category.assoc, lim_map_œÄ],
  erw Condensed_product_iso_product_spec,
  erw Condensed_product_iso_biproduct_spec',
  erw profinite_pow_filtration_iso_spec_assoc,
  ext S : 3,
  dsimp [QprimeFP_incl_aux],
  rw [‚Üê whisker_right_app, ‚Üê nat_trans.comp_app],
  erw (is_limit_of_preserves.{u+1 u+1 u+1 u+1 u+2 u+2} (Condensed_Ab_to_CondensedSet.{u} ‚ãô
    CondensedSet_to_presheaf.{u})
    (biproduct.is_limit.{u+1 u+2} (Œª (i : ulift.{u+1 0} (fin (BD.data.X (q+1)))),
    M.to_Condensed))).fac _ ‚ü®j‚ü©,
  ext, refl,
end

end ses_setup

lemma QprimeFP.mono (n : ‚Ñ§) :
  mono ((QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD.data Œ∫ M)).f n) :=
begin
  rcases n with (_|q)|q,
  { erw iso_on_the_left_zero_conj,
    apply_with mono_comp { instances := ff }, apply_instance,
    apply_with mono_comp { instances := ff }, swap, apply_instance,
    apply Condensed.mono_coproduct_to_coproduct },
  { apply mono_of_is_zero_object,
    let e :
      (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj
        (Œπ k)).X (int.of_nat q.succ) ‚âÖ
      ‚àê Œª k : ulift.{u+1} ‚Ñï, ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj
        (Œπ k)).X (int.of_nat q.succ) :=
      preserves_colimit_iso (homological_complex.eval _ _ _) _ ‚â™‚â´
      has_colimit.iso_of_nat_iso (discrete.nat_iso $ Œª p, iso.refl _),
    apply is_zero_of_iso_of_zero _ e.symm,
    apply is_zero_colimit, intros j,
    exact is_zero_zero _ },
  { erw iso_on_the_left_neg_conj,
    apply_with mono_comp { instances := ff }, apply_instance,
    apply_with mono_comp { instances := ff }, swap, apply_instance,
    apply Condensed.mono_coproduct_to_coproduct },

  /-
  rw Condensed.mono_iff_ExtrDisc, intros T,
  let Q := QprimeFP_int r' BD.data Œ∫ M,
  let e : ((‚àê Œª (k : ulift.{u+1 0} ‚Ñï), Q.obj (Œπ k)).X n).val.obj
    (op T.val) ‚âÖ _ := coproduct_eval_iso _ _ _,
  let œÜ : ulift.{u+1} ‚Ñï ‚Üí Ab.{u+1} := Œª k, ((Q.obj (Œπ k)).X n).val.obj (op T.val),
  let D := AddCommGroup.direct_sum_cofan.{u+1 u+1} œÜ,
  let hD := AddCommGroup.is_colimit_direct_sum_cofan.{u+1 u+1} œÜ,
  let g : D.X ‚ü∂ D.X := sigma_shift'.{u u+2 u+1} _ hŒπ (Q ‚ãô (homological_complex.eval
    (Condensed.{u} Ab.{u+1}) (complex_shape.up ‚Ñ§) n) ‚ãô Condensed.evaluation _ T.val) D hD,
  let f := _, change mono f,
  have hf : f = e.hom ‚â´ (g - ùüô _) ‚â´ e.inv,
  { rw [‚Üê category.assoc, iso.eq_comp_inv],
    dsimp [f, QprimeFP.shift_sub_id],
    change (_ - _) ‚â´ _ = _,
    simp only [comp_sub, sub_comp, category.id_comp, category.comp_id, Sheaf.hom.id_val,
      nat_trans.id_app], congr' 1,
    refine ((is_colimit_of_preserves (homological_complex.eval.{u+1 u+2 0}
      (Condensed.{u u+1 u+2} Ab.{u+1}) (complex_shape.up.{0} ‚Ñ§) n ‚ãô
      Condensed.evaluation.{u+2 u+1 u} Ab.{u+1} T.val) (colimit.is_colimit _))).hom_ext (Œª j, _),
    dsimp [sigma_shift],
    slice_lhs 1 2
    { erw [‚Üê nat_trans.comp_app, ‚Üê Sheaf.hom.comp_val, ‚Üê homological_complex.comp_f,
        colimit.Œπ_desc] },
    slice_rhs 1 2
    { erw sigma_Œπ_coproduct_eval_iso },
    dsimp [sigma_shift_cone],
    rw category.assoc,
    slice_lhs 2 3
    { erw sigma_Œπ_coproduct_eval_iso },
    erw hD.fac, refl },
  suffices : mono (g - ùüô _),
  { rw hf,
    apply_with mono_comp { instances := ff },
    apply_instance,
    apply_with mono_comp { instances := ff },
    exact this,
    apply_instance },
  rw [AddCommGroup.mono_iff_injective, injective_iff_map_eq_zero],
  intros x hx,
  erw [sub_eq_zero, id_apply] at hx,
  ext ‚ü®i‚ü©,
  classical,
  induction i with i IH,
  { rw ‚Üê hx,
    dsimp [g, sigma_shift', sigma_shift_cone, hD, AddCommGroup.is_colimit_direct_sum_cofan,
      AddCommGroup.direct_sum_desc, discrete.nat_trans, direct_sum.to_add_monoid],
    rw [dfinsupp.sum_add_hom_apply, dfinsupp.sum_apply],
    apply finset.sum_eq_zero,
    rintro ‚ü®j‚ü© -,
    convert dif_neg _,
    rw [finset.mem_singleton],
    intro H, rw ulift.ext_iff at H, revert H, apply nat.no_confusion, },
  { rw ‚Üê hx,
    classical,
    dsimp [g, sigma_shift', sigma_shift_cone, hD, AddCommGroup.is_colimit_direct_sum_cofan,
      AddCommGroup.direct_sum_desc, discrete.nat_trans, direct_sum.to_add_monoid],
    rw [dfinsupp.sum_add_hom_apply, dfinsupp.sum_apply],
    rw dfinsupp.zero_apply at IH,
    convert finset.sum_eq_single (ulift.up $ i) _ _,
    { rw [IH, add_monoid_hom.map_zero, dfinsupp.zero_apply], },
    { rintro ‚ü®j‚ü© - hj, convert dif_neg _, rw [finset.mem_singleton],
      intro H, apply hj, rw ulift.ext_iff at H ‚ä¢, change i+1 = j+1 at H,
      change j = i, linarith only [H] },
    { intro, rw [IH, add_monoid_hom.map_zero, dfinsupp.zero_apply], }, },
  recover, all_goals { classical; apply_instance }
  -/
end
.

lemma QprimeFP_sigma_proj_eq_0 (n : ‚Ñï) : ((QprimeFP_sigma_proj BD Œ∫ M Œπ).f (n+1:‚Ñ§)) = 0 :=
by { apply is_zero.eq_of_tgt, apply is_zero_zero }

-- move me
lemma AddCommGroup.eq_of_is_zero (A : AddCommGroup) (hA : is_zero A) (x y : A) : x = y :=
begin
  rw [‚Üê Ab.pt_apply' x, ‚Üê Ab.pt_apply' y], congr' 1, apply hA.eq_of_tgt,
end

attribute [simps] Condensed_Ab_to_presheaf

lemma QprimeFP.epi (hŒπ : monotone Œπ)
  (hŒ∫Œπ : ‚àÄ (r : ‚Ñù‚â•0) q, ‚àÉ (n : ‚Ñï), r ‚â§ (combine.{u} Œ∫ Œπ hŒπ q) n)
  (n : ‚Ñ§) : epi ((QprimeFP_sigma_proj BD Œ∫ M Œπ).f n) :=
begin
  rcases n with (_|q)|q,
  { erw iso_on_the_right_zero_conj,
    swap, assumption,
    apply_with epi_comp { instances := ff }, apply_instance,
    apply_with epi_comp { instances := ff }, swap, apply_instance,
    rw Condensed.coproduct_presentation_with_pow_eq,
    apply_with epi_comp { instances := ff }, swap, apply_instance,
    swap, { intros r, apply hŒ∫Œπ },
    exact Condensed.epi_coproduct_to_colimit (Condensed.as_nat_diagram_pow.{u} M.to_CHFPNG
      (combine.{u} Œ∫ Œπ hŒπ 0) (BD.data.X 0) ‚ãô CondensedSet_to_Condensed_Ab.{u}) },
  { apply epi_of_is_zero,
    exact is_zero_zero _ },
  { erw iso_on_the_right_neg_conj, swap, assumption,
    apply_with epi_comp { instances := ff }, apply_instance,
    apply_with epi_comp { instances := ff }, swap, apply_instance,
    rw Condensed.coproduct_presentation_with_pow_eq,
    apply_with epi_comp { instances := ff }, swap, apply_instance,
    swap, { intros r, apply hŒ∫Œπ },
    exact Condensed.epi_coproduct_to_colimit (Condensed.as_nat_diagram_pow.{u} M.to_CHFPNG
      (combine.{u} Œ∫ Œπ hŒπ (q + 1)) (BD.data.X (q + 1)) ‚ãô CondensedSet_to_Condensed_Ab.{u}) }

  /-
  rw is_epi_iff_forall_surjective,
  intros S,
  rcases n with ((_|n)|n),
  swap,
  { intro f,
    refine ‚ü®0, _‚ü©, apply AddCommGroup.eq_of_is_zero,
    rw [‚Üê evaluation_obj_obj, ‚Üê Condensed_Ab_to_presheaf_obj],
    apply functor.map_is_zero, apply functor.map_is_zero, exact is_zero_zero _, },
  { admit },
  { admit },
  -/
end

lemma QprimeFP.exact (n : ‚Ñ§)
  (hŒ∫Œπ : ‚àÄ (r : ‚Ñù‚â•0) q, ‚àÉ (n : ‚Ñï), r ‚â§ (combine.{u} Œ∫ Œπ hŒπ q) n) :
  exact
    ((QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD.data Œ∫ M)).f n)
    ((QprimeFP_sigma_proj BD Œ∫ M Œπ).f n) :=
begin
  rcases n with (_|q)|q,
  { erw iso_on_the_left_zero_conj,
    erw iso_on_the_right_zero_conj, swap, assumption,
    rw ‚Üê category.assoc,
    apply category_theory.exact_comp_inv_hom_comp,
    rw exact_iso_comp, rw exact_comp_iso,
    apply (Condensed.short_exact_sequence_with_pow _ _ _ _ _).exact,
    intros r, apply hŒ∫Œπ },
  { apply exact_of_is_zero,
    let e :
      (‚àê Œª (k : ulift.{u+1 0} ‚Ñï), (QprimeFP_int.{u} r' BD.data Œ∫ M).obj
        (Œπ k)).X (int.of_nat q.succ) ‚âÖ
      ‚àê Œª k : ulift.{u+1} ‚Ñï, ((QprimeFP_int.{u} r' BD.data Œ∫ M).obj
        (Œπ k)).X (int.of_nat q.succ) :=
      preserves_colimit_iso (homological_complex.eval _ _ _) _ ‚â™‚â´
      has_colimit.iso_of_nat_iso (discrete.nat_iso $ Œª p, iso.refl _),
    apply is_zero_of_iso_of_zero _ e.symm,
    apply is_zero_colimit, intros j,
    exact is_zero_zero _ },
  { erw iso_on_the_left_neg_conj,
    erw iso_on_the_right_neg_conj, swap, assumption,
    rw ‚Üê category.assoc,
    apply category_theory.exact_comp_inv_hom_comp,
    rw exact_iso_comp, rw exact_comp_iso,
    apply (Condensed.short_exact_sequence_with_pow _ _ _ _ _).exact,
    intros r, apply hŒ∫Œπ },
end

lemma QprimeFP.short_exact
  (hŒ∫Œπ : ‚àÄ (r : ‚Ñù‚â•0) q, ‚àÉ (n : ‚Ñï), r ‚â§ (combine.{u} Œ∫ Œπ hŒπ q) n) (n : ‚Ñ§) :
  short_exact
    ((QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD.data Œ∫ M)).f n)
    ((QprimeFP_sigma_proj BD Œ∫ M Œπ).f n) :=
begin
  apply_with short_exact.mk {instances:=ff},
  { apply QprimeFP.mono },
  { apply QprimeFP.epi, assumption, },
  { apply QprimeFP.exact, assumption },
end

end step4

section step5

variables {r' : ‚Ñù‚â•0} [fact (0 < r')] [fact (r' ‚â§ 1)]
variables (BD : breen_deligne.data)
variables (Œ∫ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ (c : ‚Ñù‚â•0), BD.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables [‚àÄ (c : ‚Ñù‚â•0), BD.suitable (Œ∫‚ÇÇ c)] [‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

def QprimeFP_nat.Tinv [‚àÄ c n, fact (Œ∫ c n ‚â§ r' * Œ∫‚ÇÇ c n)] :
  (QprimeFP_nat r' BD Œ∫ M) ‚ü∂ (QprimeFP_nat r' BD Œ∫‚ÇÇ M) :=
whisker_right (FPsystem.Tinv.{u} r' BD ‚ü®M‚ü© _ _) _

def QprimeFP_int.Tinv [‚àÄ c n, fact (Œ∫ c n ‚â§ r' * Œ∫‚ÇÇ c n)] :
  (QprimeFP_int r' BD Œ∫ M) ‚ü∂ (QprimeFP_int r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Tinv _ _ _ _)
  (homological_complex.embed complex_shape.embedding.nat_down_int_up)

def QprimeFP.Tinv [‚àÄ c n, fact (Œ∫ c n ‚â§ r' * Œ∫‚ÇÇ c n)] :
  (QprimeFP r' BD Œ∫ M) ‚ü∂ (QprimeFP r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Tinv _ _ _ _) chain_complex.to_bounded_homotopy_category

/-- The natural inclusion map -/
def QprimeFP_nat.Œπ [‚àÄ c n, fact (Œ∫ c n ‚â§ Œ∫‚ÇÇ c n)] :
  (QprimeFP_nat r' BD Œ∫ M) ‚ü∂ (QprimeFP_nat r' BD Œ∫‚ÇÇ M) :=
whisker_right (FPsystem.res r' BD ‚ü®M‚ü© _ _) _

/-- The natural inclusion map -/
def QprimeFP_int.Œπ [‚àÄ c n, fact (Œ∫ c n ‚â§ Œ∫‚ÇÇ c n)] :
  (QprimeFP_int r' BD Œ∫ M) ‚ü∂ (QprimeFP_int r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Œπ _ _ _ _)
  (homological_complex.embed complex_shape.embedding.nat_down_int_up)

/-- The natural inclusion map -/
def QprimeFP.Œπ [‚àÄ c n, fact (Œ∫ c n ‚â§ Œ∫‚ÇÇ c n)] :
  (QprimeFP r' BD Œ∫ M) ‚ü∂ (QprimeFP r' BD Œ∫‚ÇÇ M) :=
whisker_right (QprimeFP_nat.Œπ _ _ _ _) chain_complex.to_bounded_homotopy_category

open category_theory.preadditive

lemma commsq_shift_sub_id_Tinv [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)] :
  commsq (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫‚ÇÇ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Tinv BD Œ∫‚ÇÇ Œ∫ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Tinv BD Œ∫‚ÇÇ Œ∫ M))
  (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫ M)) :=
commsq.of_eq begin
  delta QprimeFP.shift_sub_id,
  rw [sub_comp, comp_sub, category.id_comp, category.comp_id],
  refine congr_arg2 _ _ rfl,
  apply colimit.hom_ext, rintro ‚ü®‚ü®j‚ü©‚ü©,
  dsimp [sigma_shift, sigma_shift', sigma_shift_cone, sigma_map],
  rw [colimit.Œπ_desc_assoc, colimit.Œπ_desc_assoc],
  dsimp [sigma_shift_cone],
  simp only [category.assoc, colimit.Œπ_desc],
  dsimp [sigma_shift_cone],
  simp only [sigma_shift, sigma_shift', sigma_shift_cone, sigma_map, colimit.Œπ_desc_assoc,
     colimit.Œπ_desc, cofan.mk_Œπ_app, category.assoc, nat_trans.naturality_assoc,
     discrete.nat_trans_app],
end

lemma commsq_shift_sub_id_Œπ [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] :
  commsq (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫‚ÇÇ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Œπ BD Œ∫‚ÇÇ Œ∫ M))
  (sigma_map (Œª (k : ulift ‚Ñï), Œπ k) (QprimeFP_int.Œπ BD Œ∫‚ÇÇ Œ∫ M))
  (QprimeFP.shift_sub_id Œπ hŒπ (QprimeFP_int r' BD Œ∫ M)) :=
commsq.of_eq begin
  delta QprimeFP.shift_sub_id,
  rw [sub_comp, comp_sub, category.id_comp, category.comp_id],
  refine congr_arg2 _ _ rfl,
  apply colimit.hom_ext, rintro ‚ü®‚ü®j‚ü©‚ü©,
  dsimp [sigma_shift, sigma_shift', sigma_shift_cone],
  simp only [sigma_shift_cone, sigma_map, colimit.Œπ_desc_assoc, colimit.Œπ_desc, cofan.mk_Œπ_app,
    category.assoc, nat_trans.naturality_assoc, discrete.nat_trans_app, colimit.cocone_Œπ],
end

end step5

section step6

variables {r' : ‚Ñù‚â•0} [fact (0 < r')] [fact (r' ‚â§ 1)]
variables (BD : breen_deligne.package)
variables (Œ∫ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫‚ÇÇ c)] [‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')
variables (Œπ : ulift.{u+1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ)

open category_theory.preadditive

-- lemma commsq_sigma_proj_Tinv' (j) (n : ‚Ñï) [fact (Œ∫‚ÇÇ (Œπ j) n ‚â§ r' * Œ∫ (Œπ j) n)] :
-- QprimeFP_incl_aux M (Œ∫‚ÇÇ (Œπ j) n) (BD.data.X n) ‚â´
--     Condensed_Ab_to_CondensedSet.map (biproduct.map (Œª (i : ulift (fin (BD.data.X n))), M.Tinv_cond)) =
--   Profinite_to_Condensed.map
--       ((FiltrationPow.Tinv r' (Œ∫‚ÇÇ (Œπ j) n) (Œ∫ (Œπ j) n) (BD.data.X n)).app ‚ü®M‚ü©) ‚â´
--     QprimeFP_incl_aux M (Œ∫ (Œπ j) n) (BD.data.X n) :=
-- by admit

lemma commsq_sigma_proj_Tinv [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ r' * Œ∫ c n)] :
  commsq (QprimeFP_sigma_proj BD Œ∫‚ÇÇ M Œπ) (sigma_map (Œª (k : ulift ‚Ñï), Œπ k)
    (QprimeFP_int.Tinv BD.data Œ∫‚ÇÇ Œ∫ M))
  ((BD.eval' freeCond').map M.Tinv_cond)
  (QprimeFP_sigma_proj BD Œ∫ M Œπ) :=
commsq.of_eq begin
  apply colimit.hom_ext, rintro ‚ü®j‚ü©,
  simp only [QprimeFP_sigma_proj, sigma_map, colimit.Œπ_desc_assoc, colimit.Œπ_desc,
    cofan.mk_Œπ_app, category.assoc, nat_trans.naturality_assoc],
  dsimp only [QprimeFP_incl, QprimeFP_int.Tinv, whisker_right_app,
    package.eval', functor.comp_map],
  rw [‚Üê functor.map_comp, ‚Üê functor.map_comp],
  refine congr_arg _ _,
  ext n : 2,
  dsimp only [homological_complex.comp_f, data.eval_functor, functor.comp_obj, functor.flip_obj_map,
    homological_complex.functor_eval_map_app_f, data.eval_functor'_obj_X_map, functor.comp_map,
    QprimeFP_nat.Tinv, whisker_right_app, functor.map_homological_complex_map_f],
  rw [map_FreeAb_comp_map],
  dsimp only [FreeAb.eval, functor.map_FreeAb, FPsystem.Tinv, FP2.Tinv_app, FreeAb.of_functor],
  simp only [free_abelian_group.lift_map, function.comp, function.comp.left_id],
  rw [free_abelian_group.lift.of],
  simp only [‚Üê functor.map_comp],
  congr' 1,
  ext1,
  let x := biproduct.is_limit (Œª (i : ulift (fin (BD.data.X n))), M.to_Condensed),
  let y := is_limit_of_preserves (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf) x,
  apply y.hom_ext, rintro ‚ü®k‚ü©,
  simp only [Sheaf.hom.comp_val, category.assoc, QprimeFP_incl_aux, y.fac],
  rw [‚Üê CondensedSet_to_presheaf_map, ‚Üê functor.comp_map],
  simp only [functor.map_cone_œÄ_app, bicone.to_cone_œÄ_app, biproduct.bicone_œÄ],
  rw [‚Üê functor.map_comp, biproduct.map_œÄ, functor.map_comp],
  have : ((Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).map_cone
    (biproduct.bicone (Œª (i : ulift (fin (BD.data.X n))), M.to_Condensed)).to_cone).œÄ.app ‚ü®k‚ü© =
    (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf).map
    (biproduct.œÄ (Œª (j : ulift (fin (BD.data.X n))), M.to_Condensed) k) := rfl,
  rw [‚Üê this, ‚Üê category.assoc, y.fac], clear this y x,
  ext S : 2,
  dsimp only [nat_trans.comp_app, QprimeFP_incl_aux', functor.comp_map,
    Condensed_Ab_to_CondensedSet_map, CondensedSet_to_presheaf_map,
    Profinite_to_Condensed_map_val, whisker_right_app, ProFiltPseuNormGrpWithTinv‚ÇÅ.Tinv_cond,
    forget_map_eq_coe, yoneda_map_app, CompHausFiltPseuNormGrp.to_Condensed_map,
    Ab.ulift_map_apply],
  simp only [‚Üê ulift_functor.map_comp],
  refl
end

lemma commsq_sigma_proj_Œπ [‚àÄ (c : ‚Ñù‚â•0) (n : ‚Ñï), fact (Œ∫‚ÇÇ c n ‚â§ Œ∫ c n)] :
  commsq (QprimeFP_sigma_proj BD Œ∫‚ÇÇ M Œπ) (sigma_map (Œª (k : ulift ‚Ñï), Œπ k)
    (QprimeFP_int.Œπ BD.data Œ∫‚ÇÇ Œ∫ M)) (ùüô _) (QprimeFP_sigma_proj BD Œ∫ M Œπ) :=
commsq.of_eq begin
  simp only [category.comp_id],
  apply colimit.hom_ext, intro j,
  simp only [QprimeFP_sigma_proj, sigma_map, colimit.Œπ_desc_assoc, colimit.Œπ_desc,
    cofan.mk_Œπ_app, category.assoc, nat_trans.naturality_assoc],
  dsimp only [QprimeFP_incl, QprimeFP_int.Œπ, whisker_right_app,
    package.eval', functor.comp_map],
  rw [‚Üê functor.map_comp],
  refine congr_arg _ _,
  ext n : 2,
  dsimp only [homological_complex.comp_f, data.eval_functor, functor.comp_obj, functor.flip_obj_map,
    homological_complex.functor_eval_map_app_f, data.eval_functor'_obj_X_map, functor.comp_map,
    QprimeFP_nat.Œπ, whisker_right_app, functor.map_homological_complex_map_f],
  rw [map_FreeAb_comp_map],
  dsimp only [FreeAb.eval, functor.map_FreeAb, FPsystem.res, FP2.res_app, FreeAb.of_functor],
  simp only [free_abelian_group.lift_map, function.comp, function.comp.left_id],
  rw [free_abelian_group.lift.of, ‚Üê functor.map_comp],
  refine congr_arg _ _,
  ext1,
  let x := biproduct.is_limit (Œª (i : ulift (fin (BD.data.X n))), M.to_Condensed),
  let y := is_limit_of_preserves (Condensed_Ab_to_CondensedSet ‚ãô CondensedSet_to_presheaf) x,
  apply y.hom_ext, intro k,
  simp only [Sheaf.hom.comp_val, category.assoc, QprimeFP_incl_aux, y.fac],
  rw [‚Üê CondensedSet_to_presheaf_map, ‚Üê functor.comp_map],
  ext S : 2,
  dsimp only [nat_trans.comp_app, QprimeFP_incl_aux', functor.comp_map,
    Condensed_Ab_to_CondensedSet_map, CondensedSet_to_presheaf_map,
    Profinite_to_Condensed_map_val, whisker_right_app,
    forget_map_eq_coe, yoneda_map_app, CompHausFiltPseuNormGrp.to_Condensed_map,
    Ab.ulift_map_apply],
  simp only [‚Üê ulift_functor.map_comp],
  refl,
end

end step6
