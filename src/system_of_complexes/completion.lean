import analysis.specific_limits.basic
import system_of_complexes.basic
import locally_constant.Vhat

/-!

# A technical lemma

This file has the definition of the completion of a system of
complexes of seminormed groups, and it proves a technical lemma
saying that a system of complexes of seminormed groups is admissible
and weak bounded exact, and if the groups in the complex are complete,
then it's bounded exact (for some slightly different constants).
-/

open finset filter
open_locale nnreal big_operators topological_space

namespace system_of_complexes

universe variables u

noncomputable def completion (C : system_of_complexes) : system_of_complexes :=
C ‚ãô SemiNormedGroup.Completion.map_homological_complex _

namespace is_weak_bounded_exact

variables (C C‚ÇÅ C‚ÇÇ : system_of_complexes.{u})
variables {k k' K K' : ‚Ñù‚â•0} {m m' : ‚Ñï} {c‚ÇÄ c‚ÇÄ' : ‚Ñù‚â•0}

-- === We don't need the following two lemmas anytime soon

-- lemma controlled_y (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) :
-- ‚àÄ c ‚â• c‚ÇÄ, ‚àÄ i < m,
-- ‚àÄ x : C (k^2 * c) (i+1),
-- ‚àÄ (Œµ > 0) (Œ¥ > 0), ‚àÉ y : C c i, ‚à•res x - C.d _ _ y‚à•
--                    ‚â§ K * ‚à•C.d _ (i+1) x‚à• + Œµ ‚àß ‚à•y‚à• ‚â§ K*(K + 1)*‚à•x‚à• + Œ¥ :=
-- by admit

-- lemma completion (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) :
--   C.completion.is_weak_bounded_exact (k^2) K m c‚ÇÄ :=
-- by admit

lemma strong_of_complete [hk : fact (1 ‚â§ k)]
  [‚àÄ c i, separated_space (C c i)]
  (hC : C.is_weak_bounded_exact k K m c‚ÇÄ)
  (hC' : admissible C) [‚àÄ c i, complete_space (C c i)] :
  ‚àÄ Œ¥ > 0, C.is_bounded_exact (k^2) (K + Œ¥) m c‚ÇÄ :=
begin
  intros Œ¥ hŒ¥,
  refine (hC.of_le hC' _ ‚ü®le_rfl‚ü© le_rfl ‚ü®le_rfl‚ü©).to_exact hŒ¥ _,
  { constructor,
    calc k = k * 1 : by rw mul_one
    ... ‚â§ k * k : mul_le_mul' le_rfl hk.out
    ... = k ^ 2 : by rw pow_two },
  rintros c hc i hi x _ rfl hx,
  haveI : fact (k * c ‚â§ k ^ 2 * c) := by { rw [pow_two, mul_assoc], apply_instance },
  haveI : fact (k * (k * c) ‚â§ k ^ 2 * c) := by { rw [pow_two, mul_assoc], exact ‚ü®le_rfl‚ü© },
  -- we need to consider the case `i = 0` separately
  obtain (rfl|‚ü®i,rfl‚ü©) : i = 0 ‚à® ‚àÉ i', i = i' + 1,
  { cases i, { left, refl }, { right, exact ‚ü®_, rfl‚ü© } },
  { refine ‚ü®0, rfl, 0, _‚ü©,
    rw [map_zero, ‚Üê norm_le_zero_iff'],
    apply le_of_forall_pos_le_add,
    intros Œ≥ hŒ≥,
    rw zero_add,
    obtain ‚ü®_, _, rfl, rfl, y, hy‚ü© := hC c ‚ü®hc‚ü© 0 (nat.zero_le m) (res x) Œ≥ hŒ≥,
    rwa [res_res, d_eq_zero_apply, sub_zero, d_res, hx, map_zero, norm_zero, mul_zero, zero_add] at hy,
    dec_trivial },
  -- we continue with the case `i + 1`
  have hc‚ÇÄkc : k * c ‚â• c‚ÇÄ,
  calc c‚ÇÄ ‚â§ c : hc
  ... ‚â§ 1*c : by rw one_mul
  ... ‚â§ k*c : mul_le_mul' hk.out (le_refl _),
  let K' := if K = 0 then 1 else K,
  have hK' : (0 : ‚Ñù) < K',
  { dsimp [K'],
    split_ifs,
    norm_num,
    exact zero_lt_iff.mpr h },
  let Œµ : ‚Ñï ‚Üí ‚Ñù := Œª j, (2‚Åª¬π*2‚Åª¬π ^ j) / K' / 2,
  have Œµ_pos : ‚àÄ j, 0 < Œµ j,
  { intro j,
    dsimp [Œµ],
    refine div_pos (div_pos (mul_pos _ _) hK') zero_lt_two; norm_num },
  have Œµ_decr : ‚àÄ j, Œµ (j+1) ‚â§ Œµ j,
  { intros j,
    dsimp [Œµ],
    field_simp,
    apply one_div_le_one_div_of_le;
    norm_num [hK', pow_succ], },
  have seq : ‚àÄ j : ‚Ñï, ‚àÉ w : C (k*c) i, ‚à•res x - C.d i (i+1) w‚à• ‚â§ Œµ j,
  { intro j,
    specialize hC (k*c) ‚ü®hc‚ÇÄkc‚ü© _ hi (res x) (Œµ j) (Œµ_pos j),
    obtain ‚ü®_, _, rfl, rfl, y, hy‚ü© := hC,
    simp only [d_res, res_res, map_zero, hx, norm_zero, zero_add, mul_zero] at hy,
    refine ‚ü®y, hy‚ü© },
  choose w hw using seq,
  let Œ¥ : ‚Ñï ‚Üí ‚Ñù := Œª j, 2‚Åª¬π*2‚Åª¬π ^ j,
  have Œ¥_pos : ‚àÄ j, 0 < Œ¥ j, { norm_num [Œ¥] },
  have hŒµŒ¥ : ‚àÄ j, (K : ‚Ñù) * (2 * Œµ j) + Œ¥ j ‚â§ 1 * 2‚Åª¬π ^ j,
  { intro j,
    dsimp [Œµ, Œ¥],
    conv_rhs { congr, rw [show (1 : ‚Ñù) = 2‚Åª¬π + 2‚Åª¬π, by norm_num] },
    rw add_mul (2‚Åª¬π : ‚Ñù) 2‚Åª¬π,
    by_cases hK : K = 0,
    { simp only [hK, div_zero, nnreal.coe_zero, zero_div, zero_add, le_add_iff_nonneg_left, mul_zero, K', if_pos, zero_mul],
      apply mul_nonneg,
      norm_num,
      apply pow_nonneg,
      norm_num },
    { apply le_of_eq,
      congr' 1,
      simp only [K', if_neg hK],
      rw [mul_div_cancel' _ (two_ne_zero : (2 : ‚Ñù) ‚â† 0),
          mul_div_cancel' _ (nnreal.coe_ne_zero.mpr hK)]} },
  set i‚ÇÄ := i - 1 with hi‚ÇÄ,
  have seq : ‚àÄ j : ‚Ñï, ‚àÉ z : C c i‚ÇÄ, ‚à•res (w (j+1) - w j) - C.d i‚ÇÄ i z‚à•
                      ‚â§ K*‚à•C.d i (i+1) (w (j+1) - w j)‚à• + Œ¥ j,
  { intro j,
    have : i ‚â§ m, { exact i.le_succ.trans hi },
    obtain ‚ü®i', -, hi', rfl, hy‚ü© := hC c ‚ü®hc‚ü© i this (w (j+1) - w j) _ (Œ¥_pos j),
    rw [‚Üê hi‚ÇÄ] at hi', subst i', exact hy },
  choose z hz using seq,
  let y : ‚Ñï ‚Üí C c i := Œª j, res (w j) - ‚àë l in range j, C.d _ _ (z l),
  have cau_y : cauchy_seq y,
  { apply cauchy_seq_of_le_geometric (2‚Åª¬π : ‚Ñù) 1 (nnreal.two_inv_lt_one),
    intros j,
    have fact : ‚à•C.d _ (i+1) (w (j + 1) - w j)‚à• ‚â§ 2*Œµ j :=
    calc ‚à•C.d _ (i+1) (w (j + 1) - w j)‚à•
        = ‚à•(C.d _ _ (w (j + 1)) - res x) + (res x - C.d _ _ (w j))‚à• : by simp only [sub_add_sub_cancel, _root_.map_sub]
    ... ‚â§ ‚à•C.d _ _ (w (j + 1)) - res x‚à• + ‚à•res x - C.d _ _ (w j)‚à• : norm_add_le _ _
    ... = ‚à•res x - C.d _ _ (w (j + 1))‚à• + ‚à•res x - C.d _ _ (w j)‚à• : by { rw norm_sub_rev }
    ... ‚â§ Œµ (j+1) + Œµ j : add_le_add (hw $ j+1) (hw j)
    ... ‚â§ 2*Œµ j : by linarith [Œµ_decr j],
    calc dist (y j) (y (j + 1)) = ‚à•y (j+1) - y j‚à• : by rw dist_eq_norm'
    ... = ‚à•res (w (j + 1)) - res (w j) - (‚àë (l : ‚Ñï) in range (j + 1), C.d _ _ (z l)
                                - ‚àë (l : ‚Ñï) in range j, C.d _ _ (z l))‚à• : by { dsimp [y], congr' 1, abel }
    ... = ‚à•res (w (j + 1) - (w j)) - C.d _ _ (z j)‚à• : by simp [_root_.map_sub, sum_range_succ]
    ... ‚â§ K * ‚à•C.d _ _ (w (j + 1) - w j)‚à• + Œ¥ j : hz j
    ... ‚â§ K * (2* Œµ j) + Œ¥ j : by {apply add_le_add_right, apply mul_le_mul_of_nonneg_left fact (nnreal.coe_nonneg K)}
    ... ‚â§ 1 * 2‚Åª¬π ^ j : hŒµŒ¥ j },
  have hdyj : ‚àÄ j, C.d _ _ (y j) = res (C.d _ _ $ w j),
  { intro j,
    calc C.d _ _ (y j) = C.d _ _ (res (w j) - ‚àë l in range j, C.d _ i (z l)) : rfl
    ... = C.d _ _ (res (w j)) - ‚àë l in range j, C.d i (i+1) (C.d _ _ (z l)) : by rw [_root_.map_sub, map_sum]
    ... = res (C.d _ _ (w j))  : by simp only [d_res, d_d, sum_const_zero, sub_zero] },

  have hblop : ‚àÄ j, ‚à•res x - C.d _ _ (y j)‚à•  ‚â§ Œµ j,
  { intro j,
    calc ‚à•res x - C.d _ _ (y j)‚à• = ‚à•res x - res (C.d _ _ $ w j)‚à• : by rw hdyj
    ... = ‚à•(res (res x : C (k*c) (i+1)) - res (C.d _ _ $ w j) : C c _)‚à• : by { rw  C.res_res }
    ... = ‚à•res (res x - (C.d _ _ $ w j))‚à• : by simp only [_root_.map_sub]
    ... ‚â§ ‚à•res x - C.d _ _ (w j)‚à• : by apply hC'.res_norm_noninc
    ... ‚â§ Œµ j : hw _},

  rcases cauchy_seq_tendsto_of_complete cau_y with ‚ü®y‚ÇÄ, hy‚ÇÄ‚ü©,
  refine ‚ü®_, rfl, y‚ÇÄ, _‚ü©,
  refine sub_eq_zero.1 (norm_le_zero_iff'.1 _),
  have lim_norm : tendsto (Œª j, ‚à•res x - C.d _ _ (y j)‚à•) at_top (ùìù ‚à•res x - C.d _ _ y‚ÇÄ‚à•),
  { have cont : continuous (Œª y : C c i, ‚à•res x - C.d _ _ y‚à•),
      from continuous_norm.comp (continuous_const.sub $ normed_add_group_hom.continuous _),
    exact (cont.tendsto y‚ÇÄ).comp hy‚ÇÄ },
  have lim_Œµ : tendsto Œµ at_top (ùìù 0),
  { rw show (0 : ‚Ñù) = (2‚Åª¬π*0)/K'/2, by norm_num,
    refine (tendsto.const_mul 2‚Åª¬π (tendsto_pow_at_top_nhds_0_of_lt_1 _ _)).div_const.div_const;
    norm_num },
  exact le_of_tendsto_of_tendsto' lim_norm lim_Œµ hblop,
end

end is_weak_bounded_exact

end system_of_complexes
