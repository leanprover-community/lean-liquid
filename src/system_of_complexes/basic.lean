import category_theory.preadditive.functor_category
import algebra.homology.additive
import algebra.homology.homological_complex
import algebra.category.Group.limits
import analysis.normed.group.SemiNormedGroup.kernels
import analysis.normed.group.SemiNormedGroup.completion

import facts

universe variables v u
noncomputable theory
open opposite category_theory
open_locale nnreal

/-!

# Systems of complexes of seminormed groups

In this file we define systems of complexes of seminormed groups,
as in of Definition 9.3 of [Analytic].

## Main declarations

* `system_of_complexes`: a system of complexes of seminormed groups. See Definition 4.1
  of the blueprint.
* `admissible`: such a system is *admissible* if all maps that occur in the system
    are norm-nonincreasing. See Definition 4.2 of the blueprint.
* `is_bounded_exact`: an exactness criterion for such systems, See Definition 4.3 of the
  blueprint. It asks for a suitable interplay between the norms and the algebraic properties
  of the system.
* `is_weak_bounded_exact` : another exactness criterion for such systems. See Definition 4.4
   of the blueprint.

## TODO

It seems a bit ridiculous that this file has to import `locally_constant.Vhat`.

-/

-- TODO: at some point we can abstract the following definition over `SemiNormedGroup` and `‚Ñù‚â•0`.
-- But I don't think that is relevant for this project.

/-- A system of complexes of seminormed groups, indexed by `‚Ñù‚â•0`.
See also Definition 9.3 of [Analytic]. -/
@[derive [category_theory.category, category_theory.preadditive]]
def system_of_complexes : Type* := ‚Ñù‚â•0·µí·µñ ‚•§ (cochain_complex SemiNormedGroup ‚Ñï)

-- instance : has_shift system_of_complexes := has_shift.mk $ (shift _).congr_right

variables {M M' N : system_of_complexes.{u}} (f : M ‚ü∂ M') (g : M' ‚ü∂ N)

instance : has_coe_to_fun system_of_complexes (Œª C, ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí SemiNormedGroup) :=
‚ü®Œª C c i, (C.obj $ op c).X i‚ü©

/-- `f.apply c i` is application of the natural transformation `f`: $f_c^i : M_c^i ‚ü∂ N_c^i$. -/
def quiver.hom.apply (f : M ‚ü∂ N) {c : ‚Ñù‚â•0} {i : ‚Ñï} : M c i ‚ü∂ N c i :=
(f.app (op c)).f i

instance hom_to_fun : has_coe_to_fun (M ‚ü∂ N) (Œª f, Œ† {c : ‚Ñù‚â•0} {i : ‚Ñï}, M c i ‚Üí N c i) :=
‚ü®Œª f {c} {i} x, f.apply x‚ü©

lemma system_of_complexes.hom_apply (f : M ‚ü∂ N) {c : ‚Ñù‚â•0} {i : ‚Ñï} (x : M c i) : f x = f.apply x :=
rfl

lemma system_of_complexes.map_sub (f : M ‚ü∂ N) {c i} (m m' : M c i) : f (m-m') = f m - f m' :=
map_sub ((f.app (op c)).f i) m m'

/-- `f.apply c i` is application of the natural isomorphism `f`: $f_c^i : M_c^i ‚âÖ N_c^i$. -/
def category_theory.iso.apply (f : M ‚âÖ N) {c : ‚Ñù‚â•0} {i : ‚Ñï} : M c i ‚âÖ N c i :=
homological_complex.hom.iso_app (f.app (op c)) i

namespace system_of_complexes

variables (C C‚ÇÅ C‚ÇÇ : system_of_complexes.{u})

/-- `res` is the restriction map `C c' i ‚ü∂ C c i` for a system of complexes `C`,
and nonnegative reals `c ‚â§ c'`. -/
def res {C : system_of_complexes} {c' c : ‚Ñù‚â•0} {i : ‚Ñï} [h : fact (c ‚â§ c')] : C c' i ‚ü∂ C c i :=
(C.map (hom_of_le h.out).op).f i

variables {c‚ÇÅ c‚ÇÇ c‚ÇÉ : ‚Ñù‚â•0} (i j : ‚Ñï)

@[simp] lemma res_comp_res (h‚ÇÅ : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (h‚ÇÇ : fact (c‚ÇÉ ‚â§ c‚ÇÇ)) :
  @res C _ _ i h‚ÇÅ ‚â´ @res C _ _ i h‚ÇÇ = @res C _ _ i ‚ü®h‚ÇÇ.out.trans h‚ÇÅ.out‚ü© :=
begin
  have := (category_theory.functor.map_comp C (hom_of_le h‚ÇÅ.out).op (hom_of_le h‚ÇÇ.out).op),
  rw [‚Üê op_comp] at this,
  delta res,
  erw this,
  refl,
end

@[simp] lemma res_res (h‚ÇÅ : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (h‚ÇÇ : fact (c‚ÇÉ ‚â§ c‚ÇÇ)) (x : C c‚ÇÅ i) :
  @res C _ _ i h‚ÇÇ (@res C _ _ i h‚ÇÅ x) = @res C _ _ i ‚ü®h‚ÇÇ.out.trans h‚ÇÅ.out‚ü© x :=
by { rw ‚Üê (C.res_comp_res i h‚ÇÅ h‚ÇÇ), refl }

/-- `C.d` is the differential `C c i ‚ü∂ C c (i+1)` for a system of complexes `C`. -/
def d (C : system_of_complexes) {c : ‚Ñù‚â•0} (i j : ‚Ñï) : C c i ‚ü∂ C c j :=
(C.obj $ op c).d i j

lemma d_eq_zero (c : ‚Ñù‚â•0) (h : i + 1 ‚â† j) : (C.d i j : C c i ‚ü∂ C c j) = 0 :=
(C.obj $ op c).shape _ _ h

lemma d_eq_zero_apply (c : ‚Ñù‚â•0) (h : i + 1 ‚â† j) (x : C c i) : (C.d i j x) = 0 :=
by { rw [d_eq_zero C i j c h], refl }

@[simp] lemma d_self_apply (c : ‚Ñù‚â•0) (x : C c i) : (C.d i i x) = 0 :=
d_eq_zero_apply _ _ _ _ i.succ_ne_self _

lemma d_comp_d (c : ‚Ñù‚â•0) (i j k : ‚Ñï) : C.d i j ‚â´ (C.d j k : C c j ‚ü∂ _) = 0 :=
(C.obj $ op c).d_comp_d _ _ _

@[simp] lemma d_d (c : ‚Ñù‚â•0) (i j k : ‚Ñï) (x : C c i) :
  C.d j k (C.d i j x) = 0 :=
show ((C.d i j) ‚â´ C.d j k) x = 0, by { rw d_comp_d, refl }

lemma d_comp_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) :
  C.d i j ‚â´ @res C _ _ _ h = @res C _ _ _ _ ‚â´ C.d i j :=
((C.map (hom_of_le h.out).op).comm _ _).symm

lemma d_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (x) :
  C.d i j (@res C _ _ _ _ x) = @res C _ _ _ h (C.d i j x) :=
show (@res C _ _ _ _ ‚â´ C.d i j) x = (C.d i j ‚â´ @res C _ _ _ h) x,
by rw d_comp_res

section iso

variables (œï : M ‚âÖ N) (c : ‚Ñù‚â•0) (i)

lemma apply_hom_eq_hom_apply : (œï.apply.hom : M c i ‚ü∂ N c i) = œï.hom.apply := rfl

lemma apply_inv_eq_inv_apply : (œï.apply.inv : N c i ‚ü∂ M c i) = œï.inv.apply := rfl

@[simp] lemma hom_apply_comp_inv_apply :
  (œï.hom.apply : M c i ‚ü∂ N c i) ‚â´ œï.inv.apply = ùüô _ :=
by rw [‚Üê apply_hom_eq_hom_apply, ‚Üê apply_inv_eq_inv_apply, iso.hom_inv_id]

@[simp] lemma inv_apply_comp_hom_apply :
  (œï.inv.apply : N c i ‚ü∂ M c i) ‚â´ œï.hom.apply = ùüô _ :=
by rw [‚Üê apply_hom_eq_hom_apply, ‚Üê apply_inv_eq_inv_apply, iso.inv_hom_id]

@[simp] lemma inv_apply_hom_apply (x : M c i) :
  œï.inv.apply (œï.hom.apply x) = x :=
show ((œï.hom.apply : M c i ‚ü∂ N c i) ‚â´ œï.inv.apply) x = x,
by simp only [hom_apply_comp_inv_apply, coe_id, id.def]

@[simp] lemma hom_apply_inv_apply (x : N c i) :
  œï.hom (œï.inv x) = x :=
show ((œï.inv.apply : N c i ‚ü∂ M c i) ‚â´ œï.hom.apply) x = x,
by simp only [inv_apply_comp_hom_apply, coe_id, id.def]

end iso

/-- Convenience definition:
The identity morphism of an object in the system of complexes
when it is given by different indices that are not
definitionally equal. -/
def congr {c c' : ‚Ñù‚â•0} {i i' : ‚Ñï} (hc : c = c') (hi : i = i') :
  C c i ‚ü∂ C c' i' :=
eq_to_hom $ by { subst hc, subst hi }

variables (M M' N)

lemma d_apply (f : M ‚ü∂ N) {c : ‚Ñù‚â•0} {i j : ‚Ñï} (m : M c i) :
  N.d i j (f m) = f (M.d i j m) :=
begin
  show (_ ‚â´ N.d i j) m = (M.d i j ‚â´ _) m,
  congr' 1,
  exact (f.app (op c)).comm i j
end

lemma res_comp_apply (f : M ‚ü∂ N) (c c' : ‚Ñù‚â•0) [h : fact (c ‚â§ c')] (i : ‚Ñï) :
  @res M c' c i _ ‚â´ f.apply = f.apply ‚â´ res :=
congr_fun (congr_arg homological_complex.hom.f (f.naturality (hom_of_le h.out).op)) i

lemma res_apply (f : M ‚ü∂ N) (c c' : ‚Ñù‚â•0) [h : fact (c ‚â§ c')] {i : ‚Ñï} (m : M c' i) :
  @res N c' c _ _ (f m) = f (res m) :=
show (f.apply ‚â´ (@res N c' c _ _)) m = (@res M c' c _ _ ‚â´ (f.apply)) m,
by rw res_comp_apply

/-- A system of complexes is *admissible*
if all the differentials and restriction maps are norm-nonincreasing.

See Definition 9.3 of [Analytic]. -/
structure admissible (C : system_of_complexes) : Prop :=
(d_norm_noninc' : ‚àÄ c i j (h : i + 1 = j), (C.d i j : C c i ‚ü∂ C c j).norm_noninc)
(res_norm_noninc : ‚àÄ c' c i h, (@res C c' c i h).norm_noninc)

lemma admissible.d_norm_noninc (hC : C.admissible) (c : ‚Ñù‚â•0) (i j : ‚Ñï) :
  (C.d i j : C c i ‚ü∂ _).norm_noninc :=
begin
  by_cases h : i + 1 = j,
  { exact hC.d_norm_noninc' c i j h },
  { rw C.d_eq_zero i j c h, intro v, simp }
end

variables {M M'}

lemma admissible_of_isometry {f : M ‚ü∂ M'} (hadm : M'.admissible)
  (hiso : ‚àÄ c i, @isometry (M c i) (M' c i) _ _ f.apply) :
  M.admissible :=
begin
  refine ‚ü®Œª c i j h x, _, Œª c' c i h x, _‚ü©,
  { rw [‚Üê (add_monoid_hom_class.isometry_iff_norm _).1 (hiso c i) _,
      ‚Üê (add_monoid_hom_class.isometry_iff_norm _).1 (hiso c j) _, ‚Üê system_of_complexes.hom_apply f,
      ‚Üê d_apply],
    exact hadm.d_norm_noninc _ _ _ _ _ },
  { rw [‚Üê (add_monoid_hom_class.isometry_iff_norm _).1 (hiso c i) _,
      ‚Üê (add_monoid_hom_class.isometry_iff_norm _).1 (hiso c' i) _, ‚Üê system_of_complexes.hom_apply f,
      ‚Üê system_of_complexes.hom_apply f, ‚Üê res_apply],
    exact hadm.res_norm_noninc _ _ _ _ _  }
end

variables (M M')

/-- `is_bounded_exact k K m c‚ÇÄ` is a predicate on systems of complexes.

A system of complexes `C` is `(k,K)`-exact in degrees `‚â§ m` for `c ‚â• c‚ÇÄ`*
if the following condition is satisfied:
For all `c ‚â• c‚ÇÄ` and all `x : C (k * c) i` with `i ‚â§ m` there is some `y : C c (i-1)`
(which is defined to be `0` when `i = 0`) such that `‚à•(C.res x) - (C.d y)‚à• ‚â§ K * ‚à•C.d x‚à•`.

See Definition 9.3 of [Analytic] (which coalesces the roles of `k` and `K`).

Implementation details:
* Because we have a differential `d i j : C c i ‚ü∂ C c j` for all `i` and `j`,
  and because `d 0 0 = 0` and `0 - 1 = 0` in Lean's natural numbers,
  we automatically take care of the parenthetical condition about `i = 0`.
* We phrase the condition in a somewhat roundabout way, as
  ```
  ‚àÉ (i‚ÇÄ j : ‚Ñï) (hi‚ÇÄ : i‚ÇÄ = i - 1) (hj : i + 1 = j)
    (y : C c i‚ÇÄ), ‚à•res x - C.d _ _ y‚à• ‚â§ K * ‚à•C.d i j x‚à•
  ```
  This is a hack around an inconvenience known as dependent type theory hell. -/
def is_bounded_exact
  (k K : ‚Ñù‚â•0) (m : ‚Ñï) [hk : fact (1 ‚â§ k)] (c‚ÇÄ : ‚Ñù‚â•0) : Prop :=
‚àÄ c (hc : fact (c‚ÇÄ ‚â§ c)) i (hi : i ‚â§ m) (x : C (k * c) i),
‚àÉ (i‚ÇÄ j : ‚Ñï) (hi‚ÇÄ : i‚ÇÄ = i - 1) (hj : i + 1 = j)
  (y : C c i‚ÇÄ), ‚à•res x - C.d _ _ y‚à• ‚â§ K * ‚à•C.d i j x‚à•

/-- Weak version of `is_bounded_exact`. -/
def is_weak_bounded_exact
  (k K : ‚Ñù‚â•0) (m : ‚Ñï) [hk : fact (1 ‚â§ k)] (c‚ÇÄ : ‚Ñù‚â•0) : Prop :=
‚àÄ c (hc : fact (c‚ÇÄ ‚â§ c)) i (hi : i ‚â§ m) (x : C (k * c) i) (Œµ : ‚Ñù) (hŒµ : 0 < Œµ),
‚àÉ (i‚ÇÄ j : ‚Ñï) (hi‚ÇÄ : i‚ÇÄ = i - 1) (hj : i + 1 = j)
  (y : C c i‚ÇÄ), ‚à•res x - C.d _ _ y‚à• ‚â§ K * ‚à•C.d i j x‚à• + Œµ

namespace is_weak_bounded_exact

variables {C C‚ÇÅ C‚ÇÇ}
variables {k k' K K' : ‚Ñù‚â•0} {m m' : ‚Ñï} {c‚ÇÄ c‚ÇÄ' : ‚Ñù‚â•0} [fact (1 ‚â§ k)] [fact (1 ‚â§ k')]

lemma of_le (hC : C.is_weak_bounded_exact k K m c‚ÇÄ) (hC_adm : C.admissible)
  (hk : fact (k ‚â§ k')) (hK : fact (K ‚â§ K')) (hm : m' ‚â§ m) (hc‚ÇÄ : fact (c‚ÇÄ ‚â§ c‚ÇÄ')) :
  C.is_weak_bounded_exact k' K' m' c‚ÇÄ' :=
begin
  intros c hc i hi x Œµ Œµ_pos,
  haveI : fact (k ‚â§ k') := hk,
  obtain ‚ü®i', j, hi', hj, y, hy‚ü© := hC c ‚ü®hc‚ÇÄ.out.trans hc.out‚ü© i (hi.trans hm) (res x) Œµ Œµ_pos,
  use [i', j, hi', hj, y],
  simp only [res_res] at hy,
  refine le_trans hy _,
  rw d_res,
  apply add_le_add_right,
  exact mul_le_mul hK.out (hC_adm.res_norm_noninc _ _ _ _ (C.d _ _ x))
    (norm_nonneg _) ((zero_le K).trans hK.out)
end

lemma of_iso (h : C‚ÇÅ.is_weak_bounded_exact k K m c‚ÇÄ) (f : C‚ÇÅ ‚âÖ C‚ÇÇ)
  (hf : ‚àÄ c i, @isometry (C‚ÇÅ c i) (C‚ÇÇ c i) _ _ (f.hom.apply : C‚ÇÅ c i ‚ü∂ C‚ÇÇ c i)) :
  C‚ÇÇ.is_weak_bounded_exact k K m c‚ÇÄ :=
begin
  intros c hc i hi x Œµ hŒµ,
  obtain ‚ü®i', j, hi', hj, y, hy‚ü© := h c hc i hi (f.inv.apply x) Œµ hŒµ,
  refine ‚ü®i', j, hi', hj, f.hom y, _‚ü©,
  calc  ‚à•res x - C‚ÇÇ.d _ _ (f.hom y)‚à•
      = ‚à•res x - f.hom (C‚ÇÅ.d _ _ y)‚à• : by rw d_apply
  ... = ‚à•f.hom (f.inv (res x)) - f.hom (C‚ÇÅ.d _ _ y)‚à• : by rw hom_apply_inv_apply
  ... = ‚à•f.hom (f.inv (res x) - C‚ÇÅ.d _ _ y)‚à• : by congr ; exact (system_of_complexes.map_sub _ _ _).symm
  ... = ‚à•f.inv (res x) - C‚ÇÅ.d _ _ y‚à• : normed_add_group_hom.norm_eq_of_isometry (hf _ _) _
  ... = ‚à•res (f.inv x) - C‚ÇÅ.d _ _ y‚à• : by rw res_apply
  ... ‚â§ K * ‚à•C‚ÇÅ.d _ _ (f.inv x)‚à• + Œµ : hy
  ... = K * ‚à•C‚ÇÇ.d _ _ x‚à• + Œµ : _,
  congr' 2,
  calc  ‚à•C‚ÇÅ.d i j (f.inv x)‚à•
      = ‚à•f.inv (C‚ÇÇ.d i j x)‚à• : by rw d_apply
  ... = ‚à•f.hom (f.inv (C‚ÇÇ.d _ _ x))‚à• : (normed_add_group_hom.norm_eq_of_isometry (hf _ _) _).symm
  ... = ‚à•C‚ÇÇ.d _ _ x‚à• : by rw hom_apply_inv_apply
end

lemma iff_of_iso (f : C‚ÇÅ ‚âÖ C‚ÇÇ)
  (hf : ‚àÄ c i, @isometry (C‚ÇÅ c i) (C‚ÇÇ c i) _ _ (f.hom.apply : C‚ÇÅ c i ‚ü∂ C‚ÇÇ c i)) :
  C‚ÇÅ.is_weak_bounded_exact k K m c‚ÇÄ ‚Üî C‚ÇÇ.is_weak_bounded_exact k K m c‚ÇÄ :=
begin
  refine ‚ü®Œª h, h.of_iso f hf, Œª h, h.of_iso f.symm _‚ü©,
  -- TODO: factor this out into a lemma
  intros c n,
  apply add_monoid_hom_class.isometry_of_norm,
  intro v,
  rw ‚Üê normed_add_group_hom.norm_eq_of_isometry (hf c n),
  simp only [‚Üêapply_hom_eq_hom_apply, ‚Üêapply_inv_eq_inv_apply, iso.symm_hom, iso.inv_hom_id_apply],
end

end is_weak_bounded_exact

namespace is_bounded_exact

variables {C C‚ÇÅ C‚ÇÇ}
variables {k k' K K' : ‚Ñù‚â•0} {m m' : ‚Ñï} {c‚ÇÄ c‚ÇÄ' : ‚Ñù‚â•0} [fact (1 ‚â§ k)] [fact (1 ‚â§ k')]

lemma of_le (hC : C.is_bounded_exact k K m c‚ÇÄ)
  (hC_adm : C.admissible) (hk : k ‚â§ k') (hK : K ‚â§ K') (hm : m' ‚â§ m) (hc‚ÇÄ : c‚ÇÄ ‚â§ c‚ÇÄ') :
  C.is_bounded_exact k' K' m' c‚ÇÄ' :=
begin
  intros c hc i hi x,
  haveI : fact (k ‚â§ k') := ‚ü®hk‚ü©,
  obtain ‚ü®i', j, hi', hj, y, hy‚ü© := hC c ‚ü®hc‚ÇÄ.trans hc.out‚ü© i (hi.trans hm) (res x),
  use [i', j, hi', hj, y],
  simp only [res_res] at hy,
  refine le_trans hy _,
  rw d_res,
  exact mul_le_mul hK (hC_adm.res_norm_noninc _ _ _ _ (C.d _ _ x)) (norm_nonneg _) ((zero_le K).trans hK)
end

lemma of_iso (h : C‚ÇÅ.is_bounded_exact k K m c‚ÇÄ) (f : C‚ÇÅ ‚âÖ C‚ÇÇ)
  (hf : ‚àÄ c i, @isometry (C‚ÇÅ c i) (C‚ÇÇ c i) _ _ (f.hom.apply : C‚ÇÅ c i ‚ü∂ C‚ÇÇ c i)) :
  C‚ÇÇ.is_bounded_exact k K m c‚ÇÄ :=
begin
  intros c hc i hi x,
  obtain ‚ü®i', j, hi', hj, y, hy‚ü© := h c hc i hi (f.inv.apply x),
  refine ‚ü®i', j, hi', hj, f.hom y, _‚ü©,
  calc  ‚à•res x - C‚ÇÇ.d _ _ (f.hom y)‚à•
      = ‚à•res x - f.hom (C‚ÇÅ.d _ _ y)‚à• : by rw d_apply
  ... = ‚à•f.hom (f.inv (res x)) - f.hom (C‚ÇÅ.d _ _ y)‚à• : by rw hom_apply_inv_apply
  ... = ‚à•f.hom (f.inv (res x) - C‚ÇÅ.d _ _ y)‚à• : by congr ; exact (system_of_complexes.map_sub _ _ _).symm
  ... = ‚à•f.inv (res x) - C‚ÇÅ.d _ _ y‚à• : normed_add_group_hom.norm_eq_of_isometry (hf _ _) _
  ... = ‚à•res (f.inv x) - C‚ÇÅ.d _ _ y‚à• : by rw res_apply
  ... ‚â§ K * ‚à•C‚ÇÅ.d _ _ (f.inv x)‚à• : hy
  ... = K * ‚à•C‚ÇÇ.d _ _ x‚à• : congr_arg _ _,
  calc  ‚à•C‚ÇÅ.d i j (f.inv x)‚à•
      = ‚à•f.inv (C‚ÇÇ.d i j x)‚à• : by rw d_apply
  ... = ‚à•f.hom (f.inv (C‚ÇÇ.d _ _ x))‚à• : (normed_add_group_hom.norm_eq_of_isometry (hf _ _) _).symm
  ... = ‚à•C‚ÇÇ.d _ _ x‚à• : by rw hom_apply_inv_apply
end

end is_bounded_exact

namespace is_weak_bounded_exact

variables {C C‚ÇÅ C‚ÇÇ}
variables {k k' K K' : ‚Ñù‚â•0} {m m' : ‚Ñï} {c‚ÇÄ c‚ÇÄ' : ‚Ñù‚â•0} [fact (1 ‚â§ k)] [fact (1 ‚â§ k')]

lemma to_exact (hC : C.is_weak_bounded_exact k K m c‚ÇÄ)
  [‚àÄ c i, separated_space (C c i)]
  {Œ¥ : ‚Ñù‚â•0} (hŒ¥ : 0 < Œ¥)
  (H : ‚àÄ c ‚â• c‚ÇÄ, ‚àÄ i ‚â§ m, ‚àÄ x : C (k * c) i, ‚àÄ j, i+1 = j ‚Üí
    C.d _ j x = 0 ‚Üí ‚àÉ (i‚ÇÄ : ‚Ñï) (hi‚ÇÄ : i‚ÇÄ = i - 1) (y : C c i‚ÇÄ), res x = C.d _ _ y) :
  C.is_bounded_exact k (K + Œ¥) m c‚ÇÄ :=
begin
  intros c hc i hi x,
  by_cases hdx : C.d _ (i+1) x = 0,
  { rcases H c hc.out i hi x _ rfl hdx with ‚ü®i‚ÇÄ, hi‚ÇÄ, y, hy‚ü©,
    exact ‚ü®i‚ÇÄ, _, hi‚ÇÄ, rfl, y, by simp [hy, hdx]‚ü© },
  { obtain ‚ü®i', j, hi', rfl, y, hy‚ü© :=
      hC c hc _ hi x (Œ¥*‚à•C.d _ (i+1) x‚à•) (mul_pos (by exact_mod_cast hŒ¥) $ norm_pos_iff'.mpr hdx),
    refine ‚ü®i', _, hi', rfl, y, _‚ü©,
    have : ((K + Œ¥ : ‚Ñù‚â•0) : ‚Ñù) * ‚à•C.d _ (i+1) x‚à•
      = K * ‚à•C.d _ (i+1) x‚à• + Œ¥ * ‚à•C.d _ (i+1) x‚à•, apply_mod_cast add_mul,
    rwa this },
end

end is_weak_bounded_exact
section quotient

open normed_add_group_hom

variables {M M'}

/-- The quotient of a system of complexes. -/
def is_quotient (f : M ‚ü∂ M') : Prop :=
‚àÄ c i, (f.apply : M c i ‚ü∂ M' c i).is_quotient

-- The next three lemmas restate lemmas about normed_add_group_hom.is_quotient in terms of the coercion
-- of `M ‚ü∂ M'` to functions.

lemma is_quotient.surjective {f : M ‚ü∂ M'} (h : is_quotient f) {c i} (m' : M' c i) :
  ‚àÉ m : M c i, f m = m' := (h c i).surjective m'

lemma is_quotient.norm_lift {f : M ‚ü∂ M'} (h : is_quotient f) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {c i}
  (n : M' c i) : ‚àÉ (m : M c i), f m = n ‚àß ‚à•m‚à• < ‚à•n‚à• + Œµ :=
(h c i).norm_lift hŒµ n

lemma is_quotient.norm_le {f : M ‚ü∂ M'} (h : is_quotient f) {c i} (m : M c i) : ‚à•f m‚à• ‚â§ ‚à•m‚à• :=
(h c i).norm_le _

/-- The quotient of an admissible system of complexes is admissible. -/
lemma admissible_of_quotient {f : M ‚ü∂ M'} (hquot : is_quotient f) (hadm : M.admissible) :
  M'.admissible :=
begin
  split,
  { intros c i j h m',
    refine le_of_forall_pos_le_add _,
    intros Œµ hŒµ,
    obtain ‚ü®m, hm : f m = m' ‚àß ‚à•m‚à• < ‚à•m'‚à• + Œµ‚ü© := hquot.norm_lift hŒµ m',
    rw [‚Üê hm.1, d_apply],
    calc ‚à•f (M.d _ _ m)‚à• ‚â§ ‚à•M.d _ _ m‚à• : hquot.norm_le _
      ... ‚â§ ‚à•m‚à• : hadm.d_norm_noninc _ _ _ _ m
      ... ‚â§ ‚à•m'‚à• + Œµ : le_of_lt hm.2
      ... = ‚à•f m‚à• + Œµ : by rw [hm.1] },
  { intros c' c i hc m',
    letI h := hc,
    refine le_of_forall_pos_le_add _,
    intros Œµ hŒµ,
    obtain ‚ü®m, hm‚ü© := hquot.norm_lift hŒµ m',
    rw [‚Üê hm.1, res_apply],
    calc ‚à•f (res m)‚à• ‚â§ ‚à•res m‚à• : hquot.norm_le _
      ... ‚â§ ‚à•m‚à• : hadm.res_norm_noninc c' c _ hc m
      ... ‚â§ ‚à•m'‚à• + Œµ : le_of_lt hm.2
      ... = ‚à•f m‚à• + Œµ : by rw [hm.1] }
end

end quotient

-- move me
instance SemiNormedGroup.forget‚ÇÇ_Ab : has_forget‚ÇÇ SemiNormedGroup Ab :=
{ forget‚ÇÇ :=
  { obj := Œª V, AddCommGroup.of V,
    map := Œª _ _ f, f.to_add_monoid_hom },
  forget_comp := by tidy }

instance SemiNormedGroup.forget‚ÇÇ_Ab_additive : (forget‚ÇÇ SemiNormedGroup Ab).additive := {}

def to_Ab (C : system_of_complexes) : ‚Ñù‚â•0·µí·µñ ‚•§ cochain_complex Ab ‚Ñï :=
C ‚ãô functor.map_homological_complex (forget‚ÇÇ _ _) _

end system_of_complexes

-- #lint- only unused_arguments def_lemma doc_blame
