import algebra.category.Group.abelian
import algebra.category.Group.limits

import for_mathlib.is_iso_neg
import for_mathlib.homology_iso
import for_mathlib.SemiNormedGroup
import for_mathlib.AddCommGroup.pt

import system_of_complexes.basic
.

noncomputable theory

universe u

open_locale nnreal

open category_theory category_theory.limits opposite

set_option pp.universes true

lemma category_theory.homology.œÄ_eq_zero
  {A B C : Ab.{u}} {f : A ‚ü∂ B} {g : B ‚ü∂ C} (w : f ‚â´ g = 0) (x)
  (h : ‚àÉ a : A, f a = (kernel_subobject g).arrow x) :
  homology.œÄ f g w x = 0 :=
begin
  rcases h with ‚ü®a, ha‚ü©,
  rw [Ab.apply_eq_pt_comp _ a, Ab.apply_eq_pt_comp _ x,
    ‚Üê image_subobject_arrow_comp f, ‚Üê image_to_kernel_arrow _ _ w,
    ‚Üê category.assoc, ‚Üê category.assoc] at ha,
  have : (Ab.pt a ‚â´ factor_thru_image_subobject f) ‚â´ image_to_kernel f g w = Ab.pt x,
  { rw ‚Üê cancel_mono (kernel_subobject g).arrow,
    let e : ‚Ñ§ ‚âÉ+ ulift.{u} ‚Ñ§ := add_equiv.ulift.symm,
    have he : function.surjective e.to_add_monoid_hom := e.surjective,
    refine (add_monoid_hom.cancel_right he).mp _,
    ext, exact ha, },
  rw [Ab.apply_eq_pt_comp, ‚Üê this, category.assoc, homology.condition, comp_zero],
  refl,
end

-- move me, generalize
instance ulift.preorder : preorder (ulift.{u} ‚Ñï) :=
preorder.lift ulift.down

section

variables (C : ‚Ñù‚â•0·µí·µñ ‚•§ Ab.{u}) (i : ‚Ñï) (f : ulift.{u} ‚Ñï ‚Üí ‚Ñù‚â•0)

def shift_sub_id.shift (hf : monotone f) :
  (‚àè (Œª x, C.obj (op $ f x))) ‚ü∂ (‚àè (Œª x, C.obj (op $ f x))) :=
pi.lift $ Œª x, pi.œÄ _ (‚ü®x.down+1‚ü©) ‚â´ (C.map (hom_of_le $ hf $ by apply nat.le_succ).op)

def shift_sub_id (hf : monotone f) :
  (‚àè (Œª x, C.obj (op $ f x))) ‚ü∂ (‚àè (Œª x, C.obj (op $ f x))) :=
shift_sub_id.shift C f hf - ùüô _

end

namespace system_of_complexes

variables (C : system_of_complexes.{u}) (i : ‚Ñï) (f : ulift.{u} ‚Ñï ‚Üí ‚Ñù‚â•0)

def to_AbH : ‚Ñù‚â•0·µí·µñ ‚•§ Ab := C.to_Ab ‚ãô homology_functor _ _ i

variables [‚àÄ c i, complete_space (C c i)] [‚àÄ c i, separated_space (C c i)]

lemma shift_eq_zero (hf : monotone f) {k K c‚ÇÄ : ‚Ñù‚â•0} [fact (1 ‚â§ k)]
  (hC : C.is_bounded_exact k K i c‚ÇÄ)
  (hc‚ÇÄ : ‚àÄ j, c‚ÇÄ ‚â§ f j) (hk : ‚àÄ j, k * f j ‚â§ f (j+1)) :
  shift_sub_id.shift (C.to_AbH i) f hf = 0 :=
begin
  apply category_theory.limits.limit.hom_ext, intros j,
  rw [zero_comp, shift_sub_id.shift, to_AbH, limit.lift_œÄ, fan.mk_œÄ_app,
    functor.comp_map, homology_functor_map],
  convert comp_zero using 2,
  apply homology.ext,
  rw [comp_zero, homology.œÄ_map],
  apply AddCommGroup.ext, intros x,
  let d := homological_complex.d_from (C.to_Ab.obj (op (f (j.1 + 1)))) i,
  let x' : C (f (j.1+1)) i := (kernel_subobject d).arrow x,
  have aux : fact (c‚ÇÄ ‚â§ f j.1) := ‚ü®hc‚ÇÄ _‚ü©,
  haveI : fact (k * f j.1 ‚â§ f (j.1+1)) := ‚ü®hk _‚ü©,
  obtain ‚ü®_, _, rfl, rfl, y, hy‚ü© := hC (f j.1) aux i le_rfl (res x'),
  have hdx' : C.d i (i+1) x' = 0,
  { show ((kernel_subobject d).arrow ‚â´ ((C.to_Ab.obj (op (f (j.1+1)))).d i (i+1))) x = 0,
    suffices : (kernel_subobject d).arrow ‚â´ (C.to_Ab.obj (op (f (j.1+1)))).d i (i+1) = 0,
    { rw this, refl },
    rw [‚Üê (C.to_Ab.obj (op (f (j.1+1)))).d_from_comp_X_next_iso, ‚Üê category.assoc,
      kernel_subobject_arrow_comp, zero_comp],
    dsimp, refl, },
  rw [res_res, d_res, hdx', map_zero, norm_zero, mul_zero,
    ‚Üê coe_nnnorm, ‚Üê nnreal.coe_zero, nnreal.coe_le_coe, le_zero_iff,
    nnnorm_eq_zero, sub_eq_zero] at hy,
  apply category_theory.homology.œÄ_eq_zero,
  cases i,
  { refine ‚ü®0, _‚ü©,
    simp only [homological_complex.d_to_eq_zero, cochain_complex.prev_nat_zero,
      AddCommGroup.zero_apply, kernel_subobject_map_arrow_apply,
      homological_complex.hom.sq_from_left],
    rw d_eq_zero at hy, { exact hy.symm }, { dec_trivial } },
  { refine ‚ü®((C.to_Ab.obj (op (f j.1))).X_prev_iso _).inv y, _‚ü©,
    { dsimp, refl },
    rw [‚Üê comp_apply, ‚Üê comp_apply, homological_complex.X_prev_iso_comp_d_to,
      kernel_subobject_map_arrow],
    exact hy.symm, },
end

lemma shift_sub_id_is_iso (hf : monotone f) {k K c‚ÇÄ : ‚Ñù‚â•0} [fact (1 ‚â§ k)]
  (hC : C.is_bounded_exact k K i c‚ÇÄ)
  (hc‚ÇÄ : ‚àÄ j, c‚ÇÄ ‚â§ f j) (hk : ‚àÄ j, k * f j ‚â§ f (j+1)) :
  is_iso (shift_sub_id (C.to_AbH i) f hf) :=
begin
  rw [shift_sub_id, shift_eq_zero C i f hf hC hc‚ÇÄ hk, zero_sub, is_iso_neg_iff],
  apply_instance
end

end system_of_complexes
