import Lbar.ext_aux4
import Lbar.iota

noncomputable theory

universes v u u'

open opposite category_theory category_theory.limits category_theory.preadditive
open_locale nnreal zero_object

variables (r r' : ‚Ñù‚â•0)
variables [fact (0 < r)] [fact (0 < r')] [fact (r < r')] [fact (r < 1)] [fact (r' < 1)]

open bounded_homotopy_category

variables {r'}
variables (BD : breen_deligne.package)
variables (Œ∫ Œ∫‚ÇÇ : ‚Ñù‚â•0 ‚Üí ‚Ñï ‚Üí ‚Ñù‚â•0)
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫ c)] [‚àÄ n, fact (monotone (function.swap Œ∫ n))]
variables [‚àÄ (c : ‚Ñù‚â•0), BD.data.suitable (Œ∫‚ÇÇ c)] [‚àÄ n, fact (monotone (function.swap Œ∫‚ÇÇ n))]
variables (M : ProFiltPseuNormGrpWithTinv‚ÇÅ.{u} r')

namespace Lbar

open ProFiltPseuNormGrpWithTinv‚ÇÅ ProFiltPseuNormGrp‚ÇÅ CompHausFiltPseuNormGrp‚ÇÅ
open bounded_homotopy_category

variables (r r')

def Tinv_sub (S : Profinite.{u}) (V : SemiNormedGroup.{u}) [normed_with_aut r V] (i : ‚Ñ§) :
  ((Ext' i).obj (op $ (Lbar.condensed.{u} r').obj S)).obj V.to_Cond ‚ü∂
  ((Ext' i).obj (op $ (Lbar.condensed.{u} r').obj S)).obj V.to_Cond :=
((Ext' i).map ((condensify_Tinv _).app S).op).app _ -
((Ext' i).obj _).map (Condensed.of_top_ab_map (normed_with_aut.T.inv).to_add_monoid_hom
  (normed_group_hom.continuous _))

-- move me
attribute [simps] Condensed.of_top_ab_map

variables (S : Profinite.{0}) (V : SemiNormedGroup.{0})
variables [complete_space V] [separated_space V]
variables (r')

def condensify_iso_extend :
  condensify (Fintype_Lbar.{0 0} r' ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r') ‚âÖ
  (Profinite.extend (Fintype_Lbar.{0 0} r')) ‚ãô
    (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r' ‚ãô CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{0} ‚ãô
  CompHausFiltPseuNormGrp.to_Condensed.{0}) :=
(((whiskering_left _ _ _).map_iso $
  Profinite.extend_commutes (Fintype_Lbar.{0 0} r') (PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r')).app
    (CHFPNG‚ÇÅ_to_CHFPNG‚Çë‚Çó.{0} ‚ãô CompHausFiltPseuNormGrp.to_Condensed.{0})).symm

def condensify_iso_extend' :
  (condensify (Fintype_Lbar.{0 0} r' ‚ãô PFPNGT‚ÇÅ_to_CHFPNG‚ÇÅ‚Çë‚Çó r')).obj S ‚âÖ
  ((Profinite.extend (Fintype_Lbar.{0 0} r')).obj S).to_Condensed :=
(condensify_iso_extend r').app S

section move_me

--universes u'

open Profinite

variables {C : Type u} [category.{v} C] (F : Fintype.{v} ‚•§ C)
variables {D : Type u'} [category.{v} D]
variable [‚àÄ X : Profinite, has_limit (X.fintype_diagram ‚ãô F)]

@[reassoc]
lemma extend_commutes_comp_extend_extends' (G : C ‚•§ D)
  [‚àÄ X : Profinite.{v}, preserves_limits_of_shape (discrete_quotient X) G]
  [‚àÄ X : Profinite.{v}, has_limit (X.fintype_diagram ‚ãô F ‚ãô G)] :
  whisker_left Fintype.to_Profinite (extend_commutes F G).hom =
  (functor.associator _ _ _).inv ‚â´ (whisker_right (extend_extends _).hom G) ‚â´
    (extend_extends _).inv :=
by rw [‚Üê category.assoc, iso.eq_comp_inv, extend_commutes_comp_extend_extends]

@[reassoc]
lemma extend_commutes_comp_extend_extends'' (G : C ‚•§ D)
  [‚àÄ X : Profinite.{v}, preserves_limits_of_shape (discrete_quotient X) G]
  [‚àÄ X : Profinite.{v}, has_limit (X.fintype_diagram ‚ãô F ‚ãô G)] :
  whisker_left Fintype.to_Profinite (extend_commutes F G).inv =
  (extend_extends _).hom ‚â´ (whisker_right (extend_extends _).inv G) ‚â´
    (functor.associator _ _ _).hom :=
begin
  rw [‚Üê iso.inv_comp_eq, ‚Üê iso_whisker_left_inv, iso.comp_inv_eq, iso_whisker_left_hom,
    extend_commutes_comp_extend_extends', category.assoc, iso.hom_inv_id_assoc,
    ‚Üê iso_whisker_right_hom, ‚Üê iso_whisker_right_inv, iso.inv_hom_id_assoc],
end

end move_me

lemma condensify_Tinv_iso :
  condensify_Tinv (Fintype_Lbar.{0 0} r') ‚â´ (condensify_iso_extend r').hom =
  (condensify_iso_extend r').hom ‚â´ (@whisker_right _ _ _ _ _ _ _ _ (Tinv_nat_trans _) _) :=
begin
  delta Tinv_cond condensify_Tinv condensify_nonstrict condensify_iso_extend' condensify_iso_extend,
  ext S : 2,
  rw [iso.symm_hom, iso.app_inv, functor.map_iso_inv, nat_trans.comp_app, nat_trans.comp_app,
    whiskering_left_map_app_app, ‚Üê iso.app_inv, ‚Üê functor.map_iso_inv, iso.comp_inv_eq,
    functor.map_iso_inv, functor.map_iso_hom, functor.comp_map, functor.comp_map,
    whisker_right_app, whisker_right_app, ‚Üê functor.map_comp, ‚Üê functor.map_comp],
  congr' 1,
  rw [iso.app_inv, iso.app_hom, ‚Üê whisker_right_app, ‚Üê whisker_right_app,
    ‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app],
  congr' 1,
  refine nonstrict_extend_ext _ _ (r'‚Åª¬π) (1 * (r'‚Åª¬π * 1)) _ _ _,
  { intro X, apply nonstrict_extend_bound_by },
  { intro X,
    apply comphaus_filtered_pseudo_normed_group_hom.bound_by.comp,
    apply comphaus_filtered_pseudo_normed_group_hom.bound_by.comp,
    { apply strict_comphaus_filtered_pseudo_normed_group_hom.to_chfpsng_hom.bound_by_one },
    { apply Tinv_bound_by },
    { apply strict_comphaus_filtered_pseudo_normed_group_hom.to_chfpsng_hom.bound_by_one }, },
  { rw [whisker_left_comp, whisker_left_comp, ‚Üê whisker_right_left, ‚Üê whisker_right_left,
      extend_commutes_comp_extend_extends', extend_commutes_comp_extend_extends''],
    rw nonstrict_extend_whisker_left,

    ext X : 2,
    simp only [whisker_left_app, whisker_right_app, nat_trans.comp_app,
      functor.associator_hom_app, functor.associator_inv_app,
      category.id_comp, category.comp_id, category.assoc, functor.map_comp],
    slice_rhs 2 3 {},
    congr' 2,

    simp only [‚Üê iso.app_hom, ‚Üê iso.app_inv, ‚Üê functor.map_iso_hom, ‚Üê functor.map_iso_inv,
      category.assoc, iso.eq_inv_comp],

    ext x : 1,
    exact (comphaus_filtered_pseudo_normed_group_with_Tinv_hom.map_Tinv
      ((Profinite.extend_extends (Fintype_Lbar.{0 0} r')).app X).hom x).symm }
end

lemma condensify_Tinv_iso' :
  (condensify_Tinv (Fintype_Lbar.{0 0} r')).app S ‚â´ (condensify_iso_extend' r' S).hom =
  (condensify_iso_extend' r' S).hom ‚â´ ((Profinite.extend (Fintype_Lbar.{0 0} r')).obj S).Tinv_cond :=
begin
  have := condensify_Tinv_iso r',
  apply_fun (Œª Œ∑, Œ∑.app S) at this,
  exact this,
end

def useful_commsq (i : ‚Ñ§) (Œπ : ulift.{1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ) [normed_with_aut r V] :=
  shift_sub_id.commsq
    (ExtQprime.Tinv2 r r' breen_deligne.eg.data
      (Œª c n, c * breen_deligne.eg.Œ∫ r r' n)
      (Œª c n, r' * (c * breen_deligne.eg.Œ∫ r r' n))
      ((Lbar.functor.{0 0} r').obj S) V i) Œπ hŒπ

section
open breen_deligne thm95.universal_constants

variables (i : ‚Ñï)

lemma useful_commsq_bicartesian (Œπ : ulift.{1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ) [normed_with_aut r V]
  (H1 : ‚àÄ j, c‚ÇÄ r r' eg (Œª n, eg.Œ∫ r r' n) (eg.Œ∫' r r') (i+1) ‚ü®‚Ñ§‚ü© ‚â§ Œπ j)
  (H2 : ‚àÄ j, k (eg.Œ∫' r r') i ^ 2 * Œπ j ‚â§ Œπ (j + 1))
  (H3 : ‚àÄ j, k (eg.Œ∫' r r') (i+1) ^ 2 * Œπ j ‚â§ Œπ (j + 1)) :
  (useful_commsq r r' S V i Œπ hŒπ).bicartesian :=
begin
  apply shift_sub_id.bicartesian_iso _ _
    (ExtQprime_iso_aux_system r' _ _ _ V i).symm (ExtQprime_iso_aux_system r' _ _ _ V i).symm Œπ hŒπ
    (ExtQprime_iso_aux_system_comm' _ _ _ _ _ _ _ _),
  rw [‚Üê whisker_right_twice],
  refine shift_sub_id.bicartesian (aux_system.incl'.{0 1} r r' _ _ _ (eg.Œ∫ r r')) _
    i Œπ hŒπ _ _ _,
  { apply_with system_of_complexes.shift_eq_zero {instances := ff},
    swap 3, { apply thm94.explicit r r' _ _ (eg.Œ∫' r r'), },
    any_goals { apply_instance },
    { intro j,
      refine le_trans _ ((c‚ÇÄ_mono _ _ _ _ _ _ (i+1)).out.trans (H1 j)),
      rw nat.add_sub_cancel, },
    { exact H2 } },
  { apply_with system_of_complexes.shift_eq_zero {instances := ff},
    swap 3, { apply thm94.explicit r r' _ _ (eg.Œ∫' r r'), },
    any_goals { apply_instance },
    { exact H1 },
    { exact H3 } },
  { intros c n,
    let Œ∫ := eg.Œ∫ r r',
    apply aux_system.short_exact r r' _ _ _ (Œª c n, r' * (c * Œ∫ n)) Œ∫,
    intro c, dsimp, apply_instance, }
end

lemma bicartesian_of_is_zero {ùìí : Type*} [category ùìí] [abelian ùìí]
  {A B C D : ùìí} (f‚ÇÅ : A ‚ü∂ B) (g‚ÇÅ : A ‚ü∂ C) (g‚ÇÇ : B ‚ü∂ D) (f‚ÇÇ : C ‚ü∂ D) (h : commsq f‚ÇÅ g‚ÇÅ g‚ÇÇ f‚ÇÇ)
  (hA : is_zero A) (hB : is_zero B) (hC : is_zero C) (hD : is_zero D) :
  h.bicartesian :=
begin
  delta commsq.bicartesian,
  apply_with short_exact.mk {instances:=ff},
  { refine ‚ü®Œª X f g h, _‚ü©, apply hA.eq_of_tgt },
  { refine ‚ü®Œª X f g h, _‚ü©, apply hD.eq_of_src },
  { apply exact_of_is_zero ((is_zero_biprod _ _ hB hC).of_iso (h.sum.iso (sum_str.biprod _ _))), }
end

lemma is_zero_pi {ùìí : Type*} [category ùìí] [abelian ùìí] {Œπ : Type*} (f : Œπ ‚Üí ùìí) [has_product f]
  (hf : ‚àÄ i, is_zero (f i)) :
  is_zero (‚àè f) :=
begin
  rw is_zero_iff_id_eq_zero,
  ext ‚ü®j‚ü©,
  apply (hf j).eq_of_tgt,
end

lemma useful_commsq_bicartesian_neg  (Œπ : ulift.{1} ‚Ñï ‚Üí ‚Ñù‚â•0) (hŒπ : monotone Œπ) [normed_with_aut r V]
  (i : ‚Ñ§) (hi : i < 0) :
  (useful_commsq r r' S V i Œπ hŒπ).bicartesian :=
begin
  have : 1 + i ‚â§ 0, { linarith only [hi] },
  apply bicartesian_of_is_zero;
  apply is_zero_pi; intro x;
  apply Ext_single_right_is_zero _ _ 1 _ _ (chain_complex.bounded_by_one _) this
end

lemma is_iso_sq {ùìí : Type*} [category ùìí] {X Y : ùìí} (f‚ÇÅ : X ‚ü∂ X) (f‚ÇÇ : Y ‚ü∂ Y)
  (e : X ‚âÖ Y) (h : f‚ÇÅ ‚â´ e.hom = e.hom ‚â´ f‚ÇÇ) (h‚ÇÅ : is_iso f‚ÇÅ) :
  is_iso f‚ÇÇ :=
by { rw [‚Üê iso.inv_comp_eq] at h, rw ‚Üê h, apply_instance }

open category_theory.preadditive

lemma is_iso_sq' {ùìí : Type*} [category ùìí] [abelian ùìí] [enough_projectives ùìí]
  {X Y Z : bounded_homotopy_category ùìí} (f‚ÇÅ : X ‚ü∂ X) (f‚ÇÇ : Y ‚ü∂ Y) (f‚ÇÉ : Z ‚ü∂ Z)
  (e : Y ‚âÖ X) (h : e.hom ‚â´ f‚ÇÅ = f‚ÇÇ ‚â´ e.hom) (i : ‚Ñ§)
  (h‚ÇÅ : is_iso (((Ext i).map f‚ÇÅ.op).app Z - ((Ext i).obj _).map f‚ÇÉ)) :
  is_iso (((Ext i).map f‚ÇÇ.op).app Z - ((Ext i).obj _).map f‚ÇÉ) :=
begin
  refine is_iso_sq _ _ ((functor.map_iso _ e.op).app _) _ h‚ÇÅ,
  rw [iso.app_hom, functor.map_iso_hom, sub_comp, comp_sub, nat_trans.naturality,
      ‚Üê nat_trans.comp_app, ‚Üê nat_trans.comp_app, ‚Üê functor.map_comp, ‚Üê functor.map_comp,
      iso.op_hom, ‚Üê op_comp, ‚Üê op_comp, h],
end

/-- Thm 9.4bis of [Analytic]. More precisely: the first observation in the proof 9.4 => 9.1. -/
theorem is_iso_Tinv_sub [normed_with_aut r V] : ‚àÄ i, is_iso (Tinv_sub r r' S V i) :=
begin
  erw (Condensed.bd_lemma _ _ _ _),
  swap, { apply Lbar.obj.no_zero_smul_divisors },
  intro i,
  refine is_iso_sq' _ _ _ (functor.map_iso _ $ condensify_iso_extend' _ _) _ _ _,
  { refine category_theory.functor.map _ _, refine Tinv_cond _ },
  { rw [functor.map_iso_hom, ‚Üê functor.map_comp, ‚Üê functor.map_comp, condensify_Tinv_iso'], },
  revert i,
  refine Tinv2_iso_of_bicartesian' r breen_deligne.eg
      (Œª c n, c * breen_deligne.eg.Œ∫ r r' n)
      (Œª c n, r' * (c * breen_deligne.eg.Œ∫ r r' n))
    ((Lbar.functor.{0 0} r').obj S) V _,
  rintro (i|(_|i)),
  { refine ‚ü®Œπ r r' i, hŒπ r r' i, _, _, _, _‚ü©,
    { intros s m,
      apply Lbar.sufficiently_increasing_eg },
    { intros s m,
      apply Lbar.sufficiently_increasing_eg' },
    all_goals { apply useful_commsq_bicartesian },
    { rintro ‚ü®j‚ü©, apply HŒπ1 },
    { rintro ‚ü®j‚ü©, apply HŒπ2a },
    { rintro ‚ü®j‚ü©, apply HŒπ2b },
    { rintro ‚ü®j‚ü©, apply HŒπ1' },
    { rintro ‚ü®j‚ü©, apply HŒπ2b },
    { rintro ‚ü®j‚ü©, apply HŒπ2c } },
  { refine ‚ü®Œπ r r' 0, hŒπ r r' 0, _, _, _, _‚ü©,
    { intros s m, apply Lbar.sufficiently_increasing_eg, },
    { intros s m, apply Lbar.sufficiently_increasing_eg', },
    { apply useful_commsq_bicartesian_neg, dec_trivial },
    { apply useful_commsq_bicartesian,
    { rintro ‚ü®j‚ü©, apply HŒπ1 },
    { rintro ‚ü®j‚ü©, apply HŒπ2a },
    { rintro ‚ü®j‚ü©, apply HŒπ2b }, }, },
  { refine ‚ü®Œπ r r' 0, hŒπ r r' 0, _, _, _, _‚ü©,
    { intros s m, apply Lbar.sufficiently_increasing_eg, },
    { intros s m, apply Lbar.sufficiently_increasing_eg', },
    { apply useful_commsq_bicartesian_neg, dec_trivial },
    { apply useful_commsq_bicartesian_neg,
      rw [int.neg_succ_of_nat_eq'],
      simp only [int.coe_nat_succ, neg_add_rev, sub_add_cancel, add_neg_lt_iff_le_add', add_zero],
      dec_trivial }, },
end

/-- Thm 9.4bis of [Analytic]. More precisely: the first observation in the proof 9.4 => 9.1. -/
theorem is_iso_Tinv2 [normed_with_aut r V]
  (hV : ‚àÄ (v : V), (normed_with_aut.T.inv v) = 2 ‚Ä¢ v) :
  ‚àÄ i, is_iso (((Ext' i).map ((condensify_Tinv2 (Fintype_Lbar.{0 0} r')).app S).op).app
    (Condensed.of_top_ab ‚Ü•V)) :=
begin
  intro i,
  rw [condensify_Tinv2_eq, ‚Üê functor.flip_obj_map, nat_trans.app_sub, category_theory.op_sub,
    nat_trans.app_nsmul,  category_theory.op_nsmul, two_nsmul, nat_trans.id_app, op_id,
    functor.map_sub, functor.map_add, category_theory.functor.map_id],
  convert is_iso_Tinv_sub r r' S V i using 2,
  suffices : Condensed.of_top_ab_map (normed_group_hom.to_add_monoid_hom normed_with_aut.T.inv) _ =
    2 ‚Ä¢ ùüô _,
  { rw [this, two_nsmul, functor.map_add, category_theory.functor.map_id], refl, },
  ext T f t,
  dsimp only [Condensed.of_top_ab_map_val, whisker_right_app, Ab.ulift_map_apply_down,
    add_monoid_hom.mk'_apply, continuous_map.coe_mk, function.comp_app],
  erw [hV, two_nsmul, two_nsmul],
  refl,
end

end

end Lbar
