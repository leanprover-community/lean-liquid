import pseudo_normed_group.FP
import system_of_complexes.basic
import prop819
import pseudo_normed_group.sum_hom
import pseudo_normed_group.splittable

noncomputable theory

open_locale nnreal big_operators
open category_theory opposite simplex_category

local attribute [instance] type_pow

universe variables u v u‚ÇÄ u‚Çò
-- set_option pp.universes true

namespace system_of_complexes

variables (C : system_of_complexes)

def norm_exact_complex (D : cochain_complex SemiNormedGroup ‚Ñï) : Prop :=
‚àÄ (m : ‚Ñï) (Œµ : ‚Ñù‚â•0) (hŒµ : 0 < Œµ) (x : D.X m) (hx : D.d _ (m+1) x = 0),
  ‚àÉ y : D.X (m-1), D.d _ _ y = x ‚àß ‚à•y‚à•‚Çä ‚â§ (1 + Œµ) * ‚à•x‚à•‚Çä

lemma weak_exact_of_factor_exact (k : ‚Ñù‚â•0) [fact (1 ‚â§ k)] (m : ‚Ñï) (c‚ÇÄ : ‚Ñù‚â•0)
  (D : ‚Ñù‚â•0 ‚Üí cochain_complex SemiNormedGroup ‚Ñï)
  (hD : ‚àÄ c, c‚ÇÄ ‚â§ c ‚Üí norm_exact_complex (D c))
  (f : Œ† c, C.obj (op $ k * c) ‚ü∂ D c)
  (g : Œ† c, D c ‚ü∂ C.obj (op c))
  (hf : ‚àÄ c i, ((f c).f i).norm_noninc)
  (hg : ‚àÄ c i, ((g c).f i).norm_noninc)
  (hfg : ‚àÄ c, c‚ÇÄ ‚â§ c ‚Üí f c ‚â´ g c = C.map (hom_of_le (fact.out _ : c ‚â§ k * c)).op) :
  C.is_weak_bounded_exact k 1 m c‚ÇÄ :=
begin
  intros c hc i hi x Œµ' hŒµ',
  let dx := C.d _ (i+1) x,
  let fx := (f _).f _ x,
  let fdx := (f c).f _ dx,
  let dfx := (D _).d _ (i+1) fx,
  have fdx_dfx : fdx = dfx,
  { simp only [fdx, dfx, fx, ‚Üê comp_apply], congr' 1, exact ((f _).comm _ _).symm },
  have hfdx : (D _).d _ (i+2) fdx = 0,
  { calc (D _).d _ (i+2) fdx = (D _).d _ (i+2) ((D _).d _ (i+1) (fx)) : congr_arg _ fdx_dfx
    ... = ((D _).d _ (i+1) ‚â´ (D _).d _ (i+2)) (fx) : rfl
    ... = 0 : by { rw (D c).d_comp_d _ _ _, refl } },
  let Œµ : ‚Ñù‚â•0 := ‚ü®Œµ', hŒµ'.le‚ü©,
  have hŒµ : 0 < Œµ := hŒµ',
  let Œ¥ : ‚Ñù‚â•0 := Œµ / (‚à•dx‚à•‚Çä + 1),
  have hŒ¥ : 0 < Œ¥,
  { rw [‚Üê nnreal.coe_lt_coe],
    exact div_pos hŒµ (lt_of_le_of_lt (nnreal.coe_nonneg _) (lt_add_one _)), },
  obtain ‚ü®(x' : (D c).X i), (hdx' : (D c).d i (i+1) x' = fdx), hnorm_x'‚ü© :=
    (hD _ hc.1) _ Œ¥ hŒ¥ _ hfdx,
  let gx' := (g _).f _ x',
  have hdfxx' : (D _).d _ (i+1) (fx - x') = 0,
  { rw [_root_.map_sub, hdx', fdx_dfx], exact sub_self _ },
  obtain ‚ü®y, hdy, -‚ü© := (hD _ hc.1) _ Œ¥ hŒ¥ _ hdfxx',
  let gy := (g _).f _ y,
  let dgy := C.d _ i gy,
  let gdy := (g _).f _ ((D _).d _ i y),
  have gdy_dgy : gdy = dgy,
  { simp only [gdy, dgy, gy, ‚Üê comp_apply], congr' 1, exact ((g _).comm _ _).symm },
  refine ‚ü®i-1, i+1, rfl, rfl, gy, _‚ü©,
  simp only [nnreal.coe_one, one_mul],
  have hxdgy : res x - C.d _ _ gy = gx',
  { calc res x - dgy
        = (g _).f _ ((f _).f _ x) - gdy : _
    ... = gx' : by rw [‚Üê _root_.map_sub, hdy, sub_sub_cancel],
    rw [gdy_dgy, ‚Üê comp_apply, ‚Üê homological_complex.comp_f, hfg _ hc.1], refl },
  rw hxdgy,
  change (‚à•gx'‚à•‚Çä : ‚Ñù) ‚â§ ‚à•dx‚à•‚Çä + Œµ,
  simp only [‚Üê nnreal.coe_add, nnreal.coe_le_coe],
  calc ‚à•gx'‚à•‚Çä
      ‚â§ ‚à•x'‚à•‚Çä : hg _ _ _
  ... ‚â§ (1 + Œ¥) * ‚à•fdx‚à•‚Çä : hnorm_x'
  ... ‚â§ (1 + Œ¥) * ‚à•dx‚à•‚Çä : mul_le_mul' le_rfl (hf _ _ _)
  ... ‚â§ ‚à•dx‚à•‚Çä + Œ¥ * ‚à•dx‚à•‚Çä : by rw [add_mul, one_mul]
  ... ‚â§ ‚à•dx‚à•‚Çä + Œµ * 1 : add_le_add le_rfl _
  ... ‚â§ ‚à•dx‚à•‚Çä + Œµ : by rw [mul_one],
  dsimp only [Œ¥],
  rw [div_eq_mul_inv, mul_assoc],
  refine mul_le_mul' le_rfl _,
  rw [nnreal.mul_le_iff_le_inv, inv_inv, mul_one],
  { exact (lt_add_one _).le },
  { refine inv_ne_zero (lt_of_le_of_lt _ (lt_add_one _)).ne',
    exact zero_le' }
end

end system_of_complexes

namespace thm95

variables (r' : ‚Ñù) (V : SemiNormedGroup.{v}) (M : Type u) {M‚ÇÅ M‚ÇÇ : Type u} (N : ‚Ñï) (d : ‚Ñù‚â•0)
variables [profinitely_filtered_pseudo_normed_group M] [pseudo_normed_group.splittable M N d]
variables [profinitely_filtered_pseudo_normed_group M‚ÇÅ]
variables [profinitely_filtered_pseudo_normed_group M‚ÇÇ]
variables (f : comphaus_filtered_pseudo_normed_group_hom M‚ÇÅ M‚ÇÇ) (hf : f.strict)

section open Profinite pseudo_normed_group profinitely_filtered_pseudo_normed_group

@[simps left right]
def FLC_complex_arrow (c : ‚Ñù‚â•0) : arrow Profinite :=
@arrow.mk _ _ (filtration_obj M‚ÇÅ c) (filtration_obj M‚ÇÇ c) $
{ to_fun := pseudo_normed_group.level f hf c,
  continuous_to_fun := f.continuous _ (Œª _, rfl) }

end

section open profinitely_filtered_pseudo_normed_group
  comphaus_filtered_pseudo_normed_group

@[simps obj map]
def FLC_complex : system_of_complexes :=
{ obj := Œª c, (FLC_functor V).obj (op $ FLC_complex_arrow f hf c.unop),
  map := Œª c‚ÇÅ c‚ÇÇ h, (FLC_functor V).map $ quiver.hom.op $
    @arrow.hom_mk _ _ (FLC_complex_arrow f hf c‚ÇÇ.unop) (FLC_complex_arrow f hf c‚ÇÅ.unop)
      (‚ü®_, (@embedding_cast_le _ _ _ _ ‚ü®le_of_hom h.unop‚ü©).continuous‚ü©)
      (‚ü®_, (@embedding_cast_le _ _ _ _ ‚ü®le_of_hom h.unop‚ü©).continuous‚ü©)
      (by { ext, refl }),
  map_id' := Œª c,
  begin
    convert (FLC_functor V).map_id _,
    simp only [unop_id, ‚Üêop_id, quiver.hom.op_inj.eq_iff, nat_trans.id_app],
    ext; refl,
  end,
  map_comp' := Œª c‚ÇÅ c‚ÇÇ c‚ÇÉ h1 h2,
  begin
    convert (FLC_functor V).map_comp _ _,
    simp only [‚Üê op_comp, quiver.hom.op_inj.eq_iff, nat_trans.comp_app],
    ext; refl,
  end, }
.

end

namespace FLC_complex
open pseudo_normed_group

variables (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [fact (c‚ÇÅ ‚â§ c‚ÇÇ)]

def aux_space (c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0) [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] :=
{ p : filtration M‚ÇÇ c‚ÇÅ √ó filtration M‚ÇÅ c‚ÇÇ // cast_le p.1 = level f hf c‚ÇÇ p.2 }

namespace aux_space
open profinitely_filtered_pseudo_normed_group comphaus_filtered_pseudo_normed_group

instance : topological_space (aux_space f hf c‚ÇÅ c‚ÇÇ) :=
by { delta aux_space, apply_instance }

instance : t2_space (aux_space f hf c‚ÇÅ c‚ÇÇ) :=
by { delta aux_space, apply_instance }

instance : totally_disconnected_space (aux_space f hf c‚ÇÅ c‚ÇÇ) :=
subtype.totally_disconnected_space

instance : compact_space (aux_space f hf c‚ÇÅ c‚ÇÇ) :=
{ compact_univ :=
  begin
    rw embedding_subtype_coe.is_compact_iff_is_compact_image,
    simp only [set.image_univ, subtype.range_coe_subtype],
    refine is_closed.is_compact _,
    refine is_closed_eq
      ((embedding_cast_le _ _).continuous.comp continuous_fst)
      ((f.continuous _ _).comp continuous_snd),
    intro, refl
  end }

end aux_space

def AuxSpace : Profinite := Profinite.of (aux_space f hf c‚ÇÅ c‚ÇÇ)

namespace AuxSpace

open profinitely_filtered_pseudo_normed_group

@[simps] def Œπ : filtration_obj M‚ÇÅ c‚ÇÅ ‚ü∂ AuxSpace f hf c‚ÇÅ c‚ÇÇ :=
{ to_fun := Œª x, ‚ü®‚ü®level f hf c‚ÇÅ x, Filtration.cast_le M‚ÇÅ c‚ÇÅ c‚ÇÇ x‚ü©, rfl‚ü©,
  continuous_to_fun :=
  begin
    rw continuous_induced_rng,
    refine continuous.prod_mk (f.continuous _ (Œª _, rfl)) (Filtration.cast_le M‚ÇÅ c‚ÇÅ c‚ÇÇ).continuous,
  end }

@[simps] def fst : AuxSpace f hf c‚ÇÅ c‚ÇÇ ‚ü∂ filtration_obj M‚ÇÇ c‚ÇÅ :=
{ to_fun := _,
  continuous_to_fun := continuous_fst.comp continuous_subtype_coe }

@[simps] def snd : AuxSpace f hf c‚ÇÅ c‚ÇÇ ‚ü∂ filtration_obj M‚ÇÅ c‚ÇÇ :=
{ to_fun := _,
  continuous_to_fun := continuous_snd.comp continuous_subtype_coe }

@[simps left right]
def fst‚Çê : arrow Profinite := arrow.mk (fst f hf c‚ÇÅ c‚ÇÇ)

include d

lemma fst_surjective [fact (0 < N)] (h : c‚ÇÅ / N + d ‚â§ c‚ÇÇ * N‚Åª¬π) :
  function.surjective (fst _ (sum_hom_strict M N) c‚ÇÅ c‚ÇÇ) :=
begin
  intros y,
  dsimp at y,
  obtain ‚ü®x, hx1, hx2‚ü© := exists_sum N d _ _ y.2,
  simp only [fst_apply, function.comp_app],
  refine ‚ü®‚ü®‚ü®y, ‚ü®x, _‚ü©‚ü©, _‚ü©, rfl‚ü©,
  { erw rescale.mem_filtration, refine filtration_mono h hx2 },
  { simp only [pseudo_normed_group.level, sum_hom_apply, subtype.coe_mk, ‚Üê hx1], refl },
end

end AuxSpace

open AuxSpace profinitely_filtered_pseudo_normed_group

@[simps]
def sum_hom‚ÇÄ [fact (0 < N)] (c : ‚Ñù‚â•0) : filtration_obj (rescale N (M^N)) c ‚ü∂ filtration_obj M c :=
‚ü®pseudo_normed_group.level (sum_hom M N) (sum_hom_strict M N) c,
  (sum_hom M N).continuous _ (Œª _, rfl)‚ü©

@[simps left right hom]
def sum_hom‚Çê [fact (0 < N)] (c : ‚Ñù‚â•0) : arrow Profinite := arrow.mk (sum_hom‚ÇÄ M N c)

def sum_hom‚Çê_fst‚Çê [fact (0 < N)] : sum_hom‚Çê M N c‚ÇÅ ‚ü∂ fst‚Çê _ (sum_hom_strict M N) c‚ÇÅ c‚ÇÇ :=
{ left := AuxSpace.Œπ _ _ _ _,
  right := ùüô _, }

def fst‚Çê_sum_hom‚Çê [fact (0 < N)] : fst‚Çê _ (sum_hom_strict M N) c‚ÇÅ c‚ÇÇ ‚ü∂ sum_hom‚Çê M N c‚ÇÇ :=
{ left := snd _ _ _ _,
  right := Filtration.cast_le _ _ _,
  w' := by { ext1 ‚ü®x, h‚ü©, exact h.symm } }

include d

lemma weak_bounded_exact (k : ‚Ñù‚â•0) [hk : fact (1 ‚â§ k)] (m : ‚Ñï) (c‚ÇÄ : ‚Ñù‚â•0) [fact (0 < N)]
  (hdkc‚ÇÄN : d ‚â§ (k - 1) * c‚ÇÄ / N) :
  (FLC_complex V _ (sum_hom_strict M N)).is_weak_bounded_exact k 1 m c‚ÇÄ :=
begin
  let D := Œª c, (FLC_functor V).obj (op $ fst‚Çê _ (sum_hom_strict M N) c (k * c)),
  let f := Œª c, (FLC_functor V).map (fst‚Çê_sum_hom‚Çê M N c (k * c)).op,
  let g := Œª c, (FLC_functor V).map (sum_hom‚Çê_fst‚Çê M N c (k * c)).op,
  refine system_of_complexes.weak_exact_of_factor_exact _ k m c‚ÇÄ D _ f g _ _ _,
  { intros c hc,
    suffices : function.surjective ((unop (op (fst‚Çê (sum_hom M N) _ c (k * c)))).hom),
    { intros i Œµ hŒµ x hx, cases i,
      { simp only [nat.one_ne_zero, homological_complex.shape, complex_shape.up_rel,
          exists_and_distrib_left, not_false_iff, normed_add_group_hom.zero_apply],
        refine ‚ü®(prop819_degree_zero _ this _ x hx).symm, 0, _‚ü©,
        simp only [nnnorm_zero, zero_le'] },
      exact prop819 _ this _ Œµ hŒµ x hx },
    refine fst_surjective M N d c (k * c) _,
    calc c / N + d
        ‚â§ c / N + (k - 1) * c‚ÇÄ / N : add_le_add le_rfl hdkc‚ÇÄN
    ... ‚â§ c / N + (k - 1) * c / N : add_le_add le_rfl _
    ... ‚â§ 1 * c / N + (k - 1) * c / N : by rw one_mul
    ... = k * c / N : _,
    { simp only [div_eq_mul_inv],
      refine mul_le_mul' (mul_le_mul' le_rfl hc) le_rfl, },
    { simp only [div_eq_mul_inv, mul_assoc],
      rw ‚Üê add_mul, congr,
      rw [‚Üê nnreal.eq_iff, nnreal.coe_add, nnreal.coe_sub hk.1, add_sub_cancel'_right], } },
  { intros c i, exact FLC_functor_map_norm_noninc _ _ _ },
  { intros c i, exact FLC_functor_map_norm_noninc _ _ _ },
  { intros c hc,
    dsimp only [f, g, FLC_complex_map],
    rw [‚Üê category_theory.functor.map_comp, ‚Üê op_comp],
    refl }
end

end FLC_complex


end thm95
